<!--Saved by Quest 5.8.6836.13983-->
<asl version="580">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <game name="Shrunk at McDonald's">
    <gameid>5c36a976-4ee5-4e2c-af93-93eed48755cb</gameid>
    <version>1.0</version>
    <firstpublished>2021</firstpublished>
    <author>boons123</author>
    <description><![CDATA[You shrink while on your shift at McDonald's.<br/><br/>A small work in progress; I'm open to both reviews and suggestions on possible additions.<br/><br/>Game requested and inspired by proveyed.<br/>http://textadventures.co.uk/user/view/ntp1l1v_fkcza7nu2uhsxq/proveyed<br/>https://www.giantessworld.net/viewuser.php?uid=15275]]></description>
    <turnoffplacesandobjects type="boolean">false</turnoffplacesandobjects>
    <autodisplayverbs />
  </game>
  <command name="lookat">
    <pattern>look at #object#; look #object#; x #object#; examine #object#; exam #object#; ex #object#</pattern>
    <script>
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (TypeOf(object, "look") = "script") {
        if (not HasAttribute(object,"timesexamined")) {
          object.timesexamined = 0
        }
        do (object, "look")
        object.timesexamined = object.timesexamined + 1
      }
      else {
        lookdesc = ""
        if (HasString(object, "look")) {
          lookdesc = object.look
        }
        if (LengthOf(lookdesc) = 0) {
          lookdesc = Template("DefaultObjectDescription")
        }
        if (GetBoolean(object, "switchedon")) {
          if (HasString(object, "switchedondesc")) {
            lookdesc = lookdesc + " " + object.switchedondesc
          }
        }
        else {
          if (HasString(object, "switchedoffdesc")) {
            lookdesc = lookdesc + " " + object.switchedoffdesc
          }
        }
        isDark = CheckDarkness()
        if (isDark and not GetBoolean(object, "lightsource")) {
          lookdesc = DynamicTemplate("LookAtDarkness", object)
        }
        else {
          if (not HasAttribute(object,"timesexamined")) {
            object.timesexamined = 0
          }
          object.timesexamined = object.timesexamined + 1
        }
        msg (lookdesc)
      }
      ListObjectContents (object)
    </script>
  </command>
  <command name="take">
    <pattern>take #object#; get #object#; pick up #object#</pattern>
    <allow_all />
    <scope>notheld</scope>
    <script>
      took_something = false
      foreach (obj, object) {
        // if this is multiple then we should skip anything in a container that has already been taken
        // (always earlier in the list) and anything held by an NPC.
        // Scenery and anything flagged "not_all" will already be excluded
        if (not multiple or (not Contains(game.pov, obj.parent) and not DoesInherit(obj.parent, "npc_type"))) {
          DoTake (obj, multiple)
          took_something = true
        }
      }
      if (multiple and not took_something) {
        msg ("Nothing here to take.")
      }
    </script>
  </command>
  <command name="drop">
    <pattern>drop #object#</pattern>
    <allow_all />
    <scope>inventory</scope>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("You are not carrying anything.")
      }
      else {
        foreach (obj, object) {
          if (not multiple or Contains(game.pov, obj)) {
            DoDrop (obj, multiple)
          }
        }
      }
    </script>
  </command>
  <command name="use">
    <pattern>use #object#</pattern>
    <script><![CDATA[
      if (HasScript(object, "use")) {
        do (object, "use")
      }
      else {
        if (GetBoolean(object, "use")) {
          candidates = CreateUseMenuList (object)
          if (ListCount(candidates) = 0) {
            msg (Template("NoObjectsAvailable"))
          }
          else {
            game.pov.usemenuobject = object
            if (HasString(object, "usemenuprompt")) {
              menucaption = object.usemenuprompt
            }
            else {
              menucaption = Template("UseOnMenu")
            }
            ShowMenu (menucaption, candidates, true) {
              if (result <> null) {
                HandleUseOn (game.pov.usemenuobject, GetObject(result))
                game.pov.usemenuobject = null
              }
            }
          }
        }
        else {
          msg (DynamicTemplate("CantUse", object))
        }
      }
    ]]></script>
  </command>
  <command name="undo">
    <pattern type="string">^undo$</pattern>
    <isundo />
    <script>
      undo
      game.suppressturnscripts = true
      if (GetBoolean (game, "gridmap")) {
        Grid_DrawPlayerInRoom (game.pov.parent)
      }
    </script>
  </command>
  <command name="inventory">
    <pattern type="string">^i$|^inv$|^inventory$</pattern>
    <script>
      list = FormatObjectList(Template("CarryingListHeader"), game.pov, Template("And"), ".")
      if (list = "") {
        msg (Template("NotCarryingAnything"))
      }
      else {
        msg (list)
      }
    </script>
  </command>
  <command name="look">
    <pattern type="string">^look$|^l$</pattern>
    <script>
      ShowRoomDescription
    </script>
  </command>
  <command name="lookdir">
    <pattern type="string"><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <script><![CDATA[
      if (HasScript(exit, "look")) {
        do (exit, "look")
      }
      else {
        message = DynamicTemplate("YouLooking",exit.alias)
        if (HasString(exit, "look")) {
          if (exit.look <> "") {
            message = exit.look
          }
        }
        if (exit.locked) {
          if (HasString(exit,"lockmessage")) {
            lockmessage = exit.lockmessage
          }
          else {
            lockmessage = Template("LockedExit")
          }
          msg (message+" "+lockmessage)
        }
        else {
          msg (message)
        }
      }
    ]]></script>
  </command>
  <command name="quit">
    <pattern type="string">^quit$</pattern>
    <script>
      finish
    </script>
  </command>
  <command name="go">
    <pattern type="string"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <unresolved>You can't go there.</unresolved>
    <script>
      if (exit.visible) {
        if (exit.locked) {
          msg (exit.lockmessage)
        }
        else if (exit.runscript) {
          if (HasScript(exit, "script")) {
            do (exit, "script")
          }
        }
        else if (exit.lookonly) {
          msg ("You can't go there.")
        }
        else {
          if (HasString(exit, "message")) {
            if (not exit.message = "") {
              if (game.clearscreenonroomenter) {
                game.currentexitmessage = exit.message
              }
              else {
                msg (exit.message)
              }
            }
          }
          game.pov.parent = exit.to
        }
      }
      else {
        msg ("You can't go there.")
      }
    </script>
  </command>
  <command name="open">
    <pattern>open #object#</pattern>
    <script>
      TryOpenClose (true, object)
    </script>
  </command>
  <command name="close">
    <pattern>close #object#</pattern>
    <script>
      TryOpenClose (false, object)
    </script>
  </command>
  <command name="put">
    <pattern type="string"><![CDATA[^(put|insert|place|drop) (?<object1>.*) (on|in|on to|in to|into) (?<object2>.*)$]]></pattern>
    <scope>object1=inventory|object2=container</scope>
    <script>
      // put object1 in/on object 2
      canbedropped = true
      if (HasBoolean(object1, "drop")) {
        if (not object1.drop) {
          canbedropped = false
        }
      }
      if (object1.parent = object2) {
        msg (DynamicTemplate("AlreadyThere", object1))
      }
      else if (not ListContains(ScopeInventory(), object1)) {
        msg (DynamicTemplate("NotCarrying", object1))
      }
      else if (not canbedropped) {
        msg (DynamicTemplate("ObjectCannotBeStored", object1))
      }
      else if (not ListContains(ScopeReachable(), object1)) {
        msg (BlockingMessage(object1, ""))
      }
      else if (not ListContains(ScopeReachable(), object2)) {
        msg (BlockingMessage(object2, ""))
      }
      else if (not object2.container) {
        msg (Template("CannotDoThat"))
      }
      else if (not object2.isopen) {
        msg (DynamicTemplate("ObjectNotOpen", object2))
      }
      else if (ListContains(ListParents(object2), object1)) {
        msg (Template("CannotDoThat"))
      }
      else {
        if (GetBoolean(object2, "hidechildren")) {
          object2.hidechildren = false
        }
        params = NewDictionary()
        dictionary add (params, "object", object1)
        dictionary add (params, "destination", object2)
        if (HasScript(object2, "addscript")) {
          do (object2, "addscript", params)
        }
        else if (HasScript(object1, "drop")) {
          do (object1, "drop", params)
        }
        else {
          object1.parent = object2
          msg (Template("Done"))
        }
      }
      // must be carrying object1
      // item cannot be dropped
      // object1 must not be inside a closed container
      // object2 must not be inside a closed container
      // object2 must be an open container or surface
      // object1 is inside object 2
    </script>
  </command>
  <command name="removefrom">
    <pattern type="string"><![CDATA[^(remove|take|get|eject) (?<object1>.*) (from|out of|off|out) (?<object2>.*)$]]></pattern>
    <scope>object1=contents|object2=container</scope>
    <script>
      // remove object1 from object2
      // if object2 does indeed contain object1, this is a synonym for "take object1"
      if (not Contains(object2, object1)) {
        msg (DynamicTemplate("ObjectDoesNotContain", object2, object1))
      }
      else {
        DoTake (object1, false)
      }
    </script>
  </command>
  <command name="givesingle">
    <pattern>give #object#</pattern>
    <script><![CDATA[
      if (HasScript(object, "givesingle")) {
        do (object, "givesingle")
      }
      else {
        if (GetBoolean(object, "givesingle")) {
          candidates = CreateGiveMenuList (object)
          if (ListCount(candidates) = 0) {
            msg (Template("NoObjectsAvailable"))
          }
          else {
            game.pov.givemenuobject = object
            if (HasString(object, "givemenuprompt")) {
              menucaption = object.givemenuprompt
            }
            else {
              menucaption = Template("GiveToMenu")
            }
            ShowMenu (menucaption, candidates, true) {
              if (result <> null) {
                HandleGiveTo (game.pov.givemenuobject, GetObject(result))
                game.pov.givemenuobject = null
              }
            }
          }
        }
        else {
          msg (DynamicTemplate("CantGive", object))
        }
      }
    ]]></script>
  </command>
  <command name="give">
    <pattern type="string"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></pattern>
    <script>
      HandleGiveTo (object1, object2)
    </script>
  </command>
  <command name="useon">
    <pattern type="string"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></pattern>
    <script>
      HandleUseOn (object1, object2)
    </script>
  </command>
  <command name="ask">
    <pattern type="string"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "ask", "askdefault", "DefaultAsk")
    </script>
  </command>
  <command name="tell">
    <pattern type="string"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tell", "telldefault", "DefaultTell")
    </script>
  </command>
  <command name="tellto">
    <pattern type="string"><![CDATA[^(tell|ask) (?<object>.*) to (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tellto", "telltodefault", "DefaultTellTo")
    </script>
  </command>
  <command name="alttellto">
    <pattern type="string"><![CDATA[^(?<object>.*), (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tellto", "telltodefault", "DefaultTellTo")
    </script>
  </command>
  <command name="oops">
    <pattern type="string"><![CDATA[^oops (?<text>.*)$]]></pattern>
    <isoops />
    <script><![CDATA[
      hasoops = false
      if (HasAttribute(game, "unresolvedcommand")) {
        if (game.unresolvedcommand <> null) {
          hasoops = true
        }
      }
      if (not hasoops) {
        msg (Template("DefaultOops"))
      }
      else {
        dictionary remove (game.unresolvedcommandvarlist, game.unresolvedcommandkey)
        dictionary add (game.unresolvedcommandvarlist, game.unresolvedcommandkey, text)
        HandleSingleCommandPattern ("", game.unresolvedcommand, game.unresolvedcommandvarlist)
      }
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <verb name="speak">
    <pattern>speak to #object#; speak #object#; talk to #object#; talk #object#</pattern>
    <property>speak</property>
    <defaulttemplate>DefaultSpeakTo</defaulttemplate>
  </verb>
  <verb name="buy">
    <pattern>buy #object#; purchase #object#</pattern>
    <property>buy</property>
    <defaulttemplate>DefaultBuy</defaulttemplate>
  </verb>
  <verb name="climb">
    <pattern>climb #object#</pattern>
    <property>climb</property>
    <defaulttemplate>DefaultClimb</defaulttemplate>
  </verb>
  <verb name="drink">
    <pattern>drink #object#</pattern>
    <property>drink</property>
    <defaulttemplate>DefaultDrink</defaulttemplate>
  </verb>
  <verb name="eat">
    <pattern>eat #object#</pattern>
    <property>eat</property>
    <defaulttemplate>DefaultEat</defaulttemplate>
  </verb>
  <verb name="hit">
    <pattern>hit #object#</pattern>
    <property>hit</property>
    <defaulttemplate>DefaultHit</defaulttemplate>
  </verb>
  <verb name="kill">
    <pattern>kill #object#</pattern>
    <property>kill</property>
    <defaulttemplate>DefaultKill</defaulttemplate>
  </verb>
  <verb name="kiss">
    <pattern>kiss #object#</pattern>
    <property>kiss</property>
    <defaulttemplate>DefaultKiss</defaulttemplate>
  </verb>
  <verb name="knock">
    <pattern>knock #object#</pattern>
    <property>knock</property>
    <defaulttemplate>DefaultKnock</defaulttemplate>
  </verb>
  <verb name="lick">
    <pattern>lick #object#</pattern>
    <property>lick</property>
    <defaulttemplate>DefaultLick</defaulttemplate>
  </verb>
  <verb name="lieon">
    <pattern>lie on #object#; lie upon #object#; lie down on #object#; lie down upon #object#</pattern>
    <property>lie</property>
    <defaulttemplate>DefaultLie</defaulttemplate>
  </verb>
  <verb name="listento">
    <pattern>listen to #object#</pattern>
    <property>listen</property>
    <defaulttemplate>DefaultListenTo</defaulttemplate>
  </verb>
  <verb name="lock">
    <pattern>lock #object#</pattern>
    <property>lock</property>
    <defaulttemplate>DefaultLock</defaulttemplate>
  </verb>
  <verb name="move">
    <pattern>move #object#</pattern>
    <property>move</property>
    <defaulttemplate>DefaultMove</defaulttemplate>
  </verb>
  <verb name="pull">
    <pattern>pull #object#</pattern>
    <property>pull</property>
    <defaulttemplate>DefaultPull</defaulttemplate>
  </verb>
  <verb name="push">
    <pattern>push #object#</pattern>
    <property>push</property>
    <defaulttemplate>DefaultPush</defaulttemplate>
  </verb>
  <verb name="read">
    <pattern>read #object#</pattern>
    <property>read</property>
    <defaulttemplate>DefaultRead</defaulttemplate>
  </verb>
  <verb name="search">
    <pattern>search #object#</pattern>
    <property>search</property>
    <defaulttemplate>DefaultSearch</defaulttemplate>
  </verb>
  <verb name="show">
    <pattern>show #object#</pattern>
    <property>show</property>
    <defaulttemplate>DefaultShow</defaulttemplate>
  </verb>
  <verb name="siton">
    <pattern>sit on #object#; sit upon #object#; sit down on #object#; sit down upon #object#</pattern>
    <property>sit</property>
    <defaulttemplate>DefaultSit</defaulttemplate>
  </verb>
  <verb name="smell">
    <pattern>smell #object#; sniff #object#</pattern>
    <property>smell</property>
    <defaulttemplate>DefaultSmell</defaulttemplate>
  </verb>
  <verb name="taste">
    <pattern>taste #object#</pattern>
    <property>taste</property>
    <defaulttemplate>DefaultTaste</defaulttemplate>
  </verb>
  <verb name="throw">
    <pattern>throw #object#</pattern>
    <property>throw</property>
    <defaulttemplate>DefaultThrow</defaulttemplate>
  </verb>
  <verb name="tie">
    <pattern>tie #object#</pattern>
    <property>tie</property>
    <defaulttemplate>DefaultTie</defaulttemplate>
  </verb>
  <verb name="touch">
    <pattern>touch #object#</pattern>
    <property>touch</property>
    <defaulttemplate>DefaultTouch</defaulttemplate>
  </verb>
  <verb name="turnon">
    <pattern>turn on #object#; turn #object# on; switch on #object#; switch #object# on</pattern>
    <property>turnon</property>
    <defaulttemplate>DefaultTurnOn</defaulttemplate>
  </verb>
  <verb name="turnoff">
    <pattern>turn off #object#; turn #object# off; switch off #object#; switch #object# off</pattern>
    <property>turnoff</property>
    <defaulttemplate>DefaultTurnOff</defaulttemplate>
  </verb>
  <verb name="turn">
    <pattern>turn #object#</pattern>
    <property>turn</property>
    <defaulttemplate>DefaultTurn</defaulttemplate>
  </verb>
  <verb name="unlock">
    <pattern>unlock #object#</pattern>
    <property>unlock</property>
    <defaulttemplate>DefaultUnlock</defaulttemplate>
  </verb>
  <verb name="untie">
    <pattern>untie #object#</pattern>
    <property>untie</property>
    <defaulttemplate>DefaultUntie</defaulttemplate>
  </verb>
  <command name="listen">
    <pattern type="string">^listen$</pattern>
    <script>
      msg (Template("DefaultListen"))
    </script>
  </command>
  <command name="jump">
    <pattern type="string">^jump$</pattern>
    <script>
      msg (Template("DefaultJump"))
    </script>
  </command>
  <command name="sit">
    <pattern type="string">^sit$|^sit down$</pattern>
    <script>
      msg (Template("DefaultSitDown"))
    </script>
  </command>
  <command name="lie">
    <pattern type="string">^lie$|^lie down$</pattern>
    <script>
      msg (Template("DefaultLieDown"))
    </script>
  </command>
  <command name="sleep">
    <pattern type="string">^sleep$|^rest$</pattern>
    <script>
      msg (Template("DefaultSleep"))
    </script>
  </command>
  <command name="wait">
    <pattern type="string">^wait$|^z$</pattern>
    <script>
      msg (Template("DefaultWait"))
    </script>
  </command>
  <command name="xyzzy">
    <pattern type="string">^xyzzy$</pattern>
    <script>
      msg (Template("DefaultXyzzy"))
    </script>
  </command>
  <command name="help">
    <pattern type="string">^help$|^\?$</pattern>
    <script>
      msg (Template("DefaultHelp"))
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="save">
    <pattern type="string">^save$</pattern>
    <script>
      if (HasAttribute(game, "questplatform")) {
        if (game.questplatform = "desktop") {
          request (RequestSave, "")
        }
        else {
          JS.saveGame ()
        }
      }
      else {
        request (RequestSave, "")
      }
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="version_cmd">
    <pattern type="string">^(version|info|about)$</pattern>
    <script><![CDATA[
      s = "<b>TITLE: </b>" + game.gamename + "<br/>"
      if (HasAttribute (game, "author")) {
        s = s + "<b>AUTHOR: </b>" + game.author + "<br/>"
      }
      s = s + "<b>VERSION: </b>" + game.version + "<br/>"
      s = s + "<b>IFID: </b>" + game.gameid + "<br/>"
      s = s + "<br/>"
      msg (s)
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="log_cmd">
    <pattern type="string">^log$|^view log$|^display log$</pattern>
    <script>
      if (not GetBoolean(game, "nohtmllog")) {
        JS.showLog ()
      }
      else {
        msg ("This game has no in-game log.")
      }
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="view_transcript_cmd">
    <pattern type="string">^(view|display|show) (the |)(script|transcript)$</pattern>
    <script>
      if (not GetBoolean(game, "notranscript")) {
        JS.showTranscript ()
      }
      else {
        msg ("This game has no transcript feature.")
      }
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="transcript_on_cmd">
    <pattern type="string">^(transcript|script)( on|)$|^enable (script|transcript)$</pattern>
    <script><![CDATA[
      if (not GetBoolean(game, "notranscript")) {
        if (not GetBoolean(game,"savetranscript")) {
          msg ("Please enter a filename.  (<b>  \"-transcript.html\" will be appended to this filename.)<br/>  <i>(The file will be saved in \"Documents\\Quest Transcripts\".)</i></b>")
          JS.eval ("$('input#txtCommand').val(transcriptName);")
          get input {
            filename = Trim(result)
            if (not filename = "") {
              JS.eval ("transcriptName = '"+filename+"';")
            }
            JS.eval ("savingTranscript = true;")
            game.savetranscript = true
            pre = "<hr/>Transcript enabled for:<br/>"
            s = "<b>TITLE: </b>" + game.gamename + "<br/>"
            if (HasAttribute (game, "author")) {
              s = s + "<b>AUTHOR: </b>" + game.author + "<br/>"
            }
            s = s + "<b>VERSION: </b>" + game.version + "<br/>"
            s = s + "<b>IFID: </b>" + game.gameid + "<br/>"
            s = s + "<br/>"
            s = pre + s
            msg ("")
            msg (s)
            msg ("<br/><b><i>[  Enter </i>SCRIPT OFF<i> to disable the transcript.  ]</i></b>")
          }
        }
        else {
          msg ("The transcript is already enabled.")
        }
      }
      else {
        msg ("This game has no transcript feature.")
      }
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="transcript_off_cmd">
    <pattern type="string">^(transcript|script) off$|^disable (script|transcript)$</pattern>
    <script>
      if (not GetBoolean(game, "notranscript")) {
        if (GetBoolean(game,"savetranscript")) {
          game.savetranscript = false
          JS.eval ("var savingTranscript = false;")
          msg ("Transcript disabled.")
        }
        else {
          msg ("The transcript is already disabled.")
        }
      }
      else {
        msg ("This game has no transcript feature.")
      }
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="restart">
    <pattern type="string">^restart$</pattern>
    <script>
      Ask (Template("WantRestartGame")) {
        if (result) {
          JS.eval ("if(webPlayer){window.location.reload();}else if (typeof(RestartGame) != 'undefined'){RestartGame();}else{addTextAndScroll('Try pressing CTRL+R.')};")
        }
        else {
          game.suppressturnscripts = true
        }
      }
    </script>
  </command>
  <command name="wear">
    <pattern>put #object# on; wear #object#; put on #object#; don #object#; wear #object#</pattern>
    <allow_all />
    <scope>inventory</scope>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("You've nothing to wear.")
      }
      else {
        foreach (obj, object) {
          if (multiple) {
            OutputTextNoBr (GetDisplayAlias(obj) + ": ")
          }
          f = _DoWear(obj)
        }
        UpdateArmour
      }
    </script>
  </command>
  <command name="remove">
    <pattern>take #object# off; remove #object#; take off #object#; doff #object#</pattern>
    <allow_all />
    <scope>inventory</scope>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("You've nothing to take off.")
      }
      else {
        foreach (obj, object) {
          if (multiple) {
            OutputTextNoBr (GetDisplayAlias(obj) + ": ")
          }
          f = _DoRemove(obj)
        }
      }
      UpdateArmour
    </script>
  </command>
  <command name="devmode_commands">
    <pattern type="string"><![CDATA[^#(?<text>.*)]]></pattern>
    <script><![CDATA[
      if (HasAttribute(game, "devmode_active")) {
        if (game.devmode_active) {
          if (IsDefined("text")) {
            regex = "^(?<command2>put) (?<object1>.+) (in|on) (?<object2>.+)$|^(?<command1>drop|take|to|go|open|close|on|off) (?<object>.+)$|^(?<command0>selftest|clr|\\?)$"
            if (IsRegexMatch (regex, text)) {
              result = populate (regex, text)
              com0 = ToString(DictionaryItem(result, "command0"))
              com1 = ToString(DictionaryItem(result, "command1"))
              com2 = ToString(DictionaryItem(result, "command2"))
              // Commands
              if (not com0 = "") {
                switch (LCase(com0)) {
                  case ("selftest") {
                    selfTest
                  }
                  case ("clr") {
                    ClearScreen
                  }
                  case ("?") {
                    DevModeOutput (Template("DevModeDescriptionCommands"))
                  }
                }
              }
              else if (not com1 = "") {
                objstr = ToString(DictionaryItem(result, "object"))
                obj = getObjectExt(objstr)
                if (obj = null) {
                  error (DynamicTemplate("DevModeErrorCantFindObject", objstr))
                }
                switch (LCase(com1)) {
                  case ("drop") {
                    setWithoutChange (obj, "parent", game.pov.parent)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("take") {
                    setWithoutChange (obj, "parent", game.pov)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("to") {
                    setWithoutChange (game, "pov", obj)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("go") {
                    setWithoutChange (game.pov, "parent", obj)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("open") {
                    setWithoutChange (obj, "isopen", true)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("close") {
                    setWithoutChange (obj, "isopen", false)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("on") {
                    setWithoutChange (obj, "switchedon", true)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                  case ("off") {
                    setWithoutChange (obj, "switchedon", false)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                }
              }
              else if (not com2 = "") {
                obj1str = ToString(DictionaryItem(result, "object1"))
                obj2str = ToString(DictionaryItem(result, "object2"))
                obj1 = getObjectExt(obj1str)
                obj2 = getObjectExt(obj2str)
                if (obj1 = null) {
                  error (DynamicTemplate("DevModeErrorCantFindObject", obj1str))
                }
                if (obj2 = null) {
                  error (DynamicTemplate("DevModeErrorCantFindObject", obj2str))
                }
                switch (LCase(ToString(DictionaryItem(result, "command2")))) {
                  case ("put") {
                    setWithoutChange (obj1, "parent", obj2)
                    DevModeOutput (Template("DevModeComExecute"))
                  }
                }
              }
            }
            else {
              ParseToQuestCode (text)
            }
            // Expressions
          }
          else {
            request (Quit, "")
          }
        }
        else {
          error (Template("DevModeNotActive"))
        }
      }
      else {
        error (Template("DevModeNotActive"))
      }
    ]]></script>
  </command>
  <object name="the counter">
    <isroom />
    <descprefix>You are on top of</descprefix>
    <description><![CDATA[<br/>You've shrunk.<br/><br/>Sizzling is all you can hear as the trainee next to you works the grill. It gives you chills. <br/><br/>The now giant girl flips a burger, before looking around. Clearly, she's looking for you, but unbeknownst to her you're right there. You begin to scream and wave your arms, but it's no use. She's completely unaware of her speck-sized trainer.<br/><br/>The monumental {object:burger} grill is in front of you, and the {object:fry scooper} is next to you, with a {object:blob of ketchup} in the way. The {object:trainee} keeps working, and you could try getting her attention.]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <beforeenter type="script">
    </beforeenter>
    <beforefirstenter type="script"><![CDATA[
      msg ("Another day. another punch of the punch clock at your shitty job. You hate working at McDonald's with a passion. As you begin to settle into your shift training this new employee, you suddenly feel lightheaded.<br/>")
    ]]></beforefirstenter>
    <object name="burger">
      <look>A sizzling, sports-field sized McDonald's burger.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <jumpto type="script"><![CDATA[
        msg ("You take a leap of faith onto the burger.")
        wait {
          msg ("<br/>Immediately, your body is cooked. The searing pain runs through you for an instant, until you pathetically die. The trainee moves the burger on to be processed.<br/><br/>Your cooked corpse can't even be distinguished from the burger with the human eye, and is soon coated with a layer of cheese by some overworked minimum-wage employee. It melts all over your tiny body, before being slapped with a bun. Your tomb is wrapped up, and is served to a hungry customer.<br/><br/>You'd never get the chance to be found. The random woman who bought you eagerly scarfs down the cheeseburger. What's left of your charred corpse is crushed to a powder beneath her teeth, before being swallowed in a wave of saliva. Your remains churn in her stomach with a mixture of burger, fries, and soda. Somewhere in the chewed up mush of her greasy meal, her body finds a few calories from you, which immediately go to her ass. <br/><br/>You're just ass fat.")
          finish
        }
      ]]></jumpto>
    </object>
    <object name="fry scooper">
      <look>The tool you were just using. What used to fit in your hand is now like a building to you.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climb type="script"><![CDATA[
        msg ("You hop on the fry scooper, hoping that a fellow employee will notice you when they go to scoop some fries. Within no time. you hear someone shout for an order of large fries.")
        wait {
          msg ("<br/>You watch as the giant woman who you once trained places her hand on the fry scooper. Waving your arms and yelling, you watch her eyes glaze over you as she focuses on the task at hand, scooping fries.<br/><br/>Clinging to the utensil, what feels like thousands of hot, greasy fries are shoveled on top of you, before you're all deposited in the iconic red box. Luckily, you end up near the top of the container. You lay your eyes on the restaurant for one last time, before the giantess drops you in a bag, before her massive hand drops some napkins and a straw in.")
          wait {
            ClearScreen
            MoveObject (player, fries)
          }
        }
      ]]></climb>
    </object>
    <object name="trainee">
      <look type="script"><![CDATA[
        if (not HasAttribute(this,"timesexamined")) {
          this.timesexamined = 0
        }
        if (this.timesexamined >= 4) {
          msg ("<br/>As you gawk at the trainee yet again, she wrinkles her nose and lets out a loud snort. The sudden suction yanks your microscopic body from the counter, pulling you straight up her nostril. Wet nose hairs scrape across your skin as another snort drags you deeper, until you're swallowed by the humid darkness of her nasal passage.<br/><br/>You try to scream, but the force of her sniff sucks you down the back of her throat and into her lungs. Everything is hot, damp and constricting as the massive girl's body finishes the job. Your short life ends inside her airway, just another speck caught in a single snort.")
          finish
        }
        else {
          msg ("She's huge. And she seems kind of lost without you.")
        }
      ]]></look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <jumpto type="script">
        msg ("You take a leap of faith off the counter, aiming for the trainee's pants.")
        wait {
          ClearScreen
          MoveObject (player, trainee waist)
        }
      </jumpto>
    </object>
    <object name="blob of ketchup">
      <look>A giant, delicious, red condiment.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <eat type="script"><![CDATA[
        firsttime {
          msg ("You walk up to the ketchup, grabbing a handful and licking it from your fingers. Pretty good.")
        }
        otherwise {
          msg ("Gluttony gets the best of you and you go up to eat more ketchup.<br/><br/>Too busy stuffing your face, you don't see the colossal finger of the employee coming to wipe the ketchup off the counter. The giant digit slides across the blob, bringing you down with it. The wall of finger crushes you instantly, the red stain of your body mixing in well with the ketchup.<br/><br/>The trainee, not knowing what to do with the mess, smears your body on the apron. You'd sit there in your ketchupy glory for the rest of her long shift.")
          finish
        }
      ]]></eat>
    </object>
    <object name="player">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <verb>
    <property>jumpto</property>
    <pattern>jump to</pattern>
    <defaultexpression>"You can't jump to " + object.article + "."</defaultexpression>
  </verb>
  <object name="fries">
    <description><![CDATA[<br/>You cling to a fry, feeling the bag being shaken around as it's carried around across the kitchen.<br/><br/>The busy noises of the kitchen are deafening.  The bag is dropped, and you hear ice being dispensed, before the soda machine begins running. The giantess above you begins taking an order, and you realize that you're being served through the drive thru.<br/><br/>It's just a matter of time before you're served with the {object:fries}.]]></description>
    <descprefix>You are in an order of</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <enter type="script">
      EnableTimer (fries serving)
    </enter>
    <object name="fries1">
      <alias>fries</alias>
      <look>Golden fries.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <eat>You take a microscopic bite out the fry. Salty and greasy.</eat>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
    </object>
  </object>
  <object name="mouth">
    <description><![CDATA[<br/>The giant girl's molars begin tearing apart the fries into an unrecognizable mush. The teeth have immense power, and you doubt she'd notice the small crunch of your pathetically sized body. You're glad you're not on them.<br/><br/>The mouth is terrifying. You pray that the giant tongue you're on is not going to flick you under her teeth to be crushed into a pulp.<br/><br/>You're going to be eaten.]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are inside a</descprefix>
    <alias>customer's mouth</alias>
    <enter type="script">
      EnableTimer (fries swallow)
    </enter>
  </object>
  <object name="stomach">
    <descprefix>You are inside of</descprefix>
    <alias>a customer's stomach</alias>
    <description><![CDATA[<br/>Her stomach groans with satisfaction, deafening you.<br/><br/>After landing in the contents of her stomach, you surprisingly float. The organic cave moves and churns around you, getting ready to digest the college girl's fast food meal, and the shrunken employee that came with it. The stomach acid you're floating in begins to burn you, and you panic.<br/><br/>You're lunch.<br/>]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (fries digestion)
    </enter>
  </object>
  <object name="trainee waist">
    <description><![CDATA[<br/>You made it. You scream up to her, and you realize you already forgot her name.<br/><br/>You cling to the back of the trainee's pants, holding on for dear life as she walks around the kitchen. You notice that her waistband is loose enough in the back for your speck-sized self to fit. Her fat ass sways as she moves, threatening to send you on the long way down to floor. You're unsure if you'd survive, and you don't want to test it. <br/><br/>You can enter the back of her {object:waistband} or scale down her {object:ass}.]]></description>
    <descprefix>You are clinging to the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>trainee's waist</alias>
    <object name="waistband">
      <look>A microscopic person like you could easily slide in to her ass.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbin type="script">
        msg ("You look into the abyss of her ass crack, and decide to climb in, squeezing in behind her black panties.")
        wait {
          ClearScreen
          MoveObject (player, trainee ass)
        }
      </climbin>
    </object>
    <object name="ass">
      <look>Her ass is of an inconceivable size.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbdown type="script">
        msg ("You carefully scale down the trainee's pants. She doesn't sit still, and you nearly fall off a couple times. Scary stuff.")
        wait {
          ClearScreen
          MoveObject (player, trainee shoe)
        }
      </climbdown>
    </object>
  </object>
  <verb>
    <property>climbin</property>
    <pattern>climb in</pattern>
    <defaultexpression>"You can't climb in " + object.article + "."</defaultexpression>
  </verb>
  <verb>
    <property>climbdown</property>
    <pattern>climb down</pattern>
    <defaultexpression>"You can't climb down " + object.article + "."</defaultexpression>
  </verb>
  <object name="trainee ass">
    <alias>trainee's ass</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are in the</descprefix>
    <description><![CDATA[<br/>The trainee's ass was slick with sweat, maybe because she's working hard, maybe because she's anxious she lost her trainer.<br/><br/>Little did she know you were shrunken in her ass, slowly slipping down between the fat cheeks. Perspiration flows around you, bringing with it a salty, rotten odor and taste. With every move you make, you slip deeper into the employee's crack, and the sheer size of it means you'll never find a way out. You feel your whole world shake as the giant girl begins to pace around.<br/><br/>You surrounded by {object:ass1}.]]></description>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (trainee ass sweat)
    </enter>
    <onexit type="script">
      DisableTimer (trainee ass sweat)
    </onexit>
    <object name="ass1">
      <alias>ass</alias>
      <look>You can't see anything in the dark environment.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <struggle type="script"><![CDATA[
        firsttime {
          msg ("You thrash and fight against her ass, but her moist cheeks restrict your movement. Your attacks do little to no damage.")
        }
        otherwise {
          firsttime {
            msg ("You keep fighting for your life. Kicking and punching her ass fat, your blows simply bounce off the womanly meat.")
          }
          otherwise {
            msg ("You're not holding back anymore. You flail your limbs around and take a nice big bite of the trainee's ass cheek.<br/><br/>You feel the ass begin to shift, and the giant girl's massive hand appears from above, grabbing both the waistband to her black work pants and her tight underwear. Being uncomfortable from your attacks and the swamp ass she's building up, she adjusts her clothing, sending you into a freefall within her abyssal ass.")
            wait {
              ClearScreen
              MoveObject (player, trainee taint)
            }
          }
        }
      ]]></struggle>
    </object>
  </object>
  <verb>
    <property>struggle</property>
    <pattern>struggle</pattern>
    <defaultexpression>"You can't struggle " + object.article + "."</defaultexpression>
  </verb>
  <object name="trainee taint">
    <description><![CDATA[<br/>You shouldn't have struggled. This is infinitely worse.<br/><br/>You landed at the bottom of her moist black panties, between her pussy and asshole. This is the worst possible position you could be in, with the trickle down of sweat from the trainee's back finding it's way down into her ass, past her disgusting asshole, and on to you. You didn't think the sweat could get more gross, but with the runoff of her anus, it definitely is. You sputter some of the shit-tainted sweat out of your mouth, and scream.<br/><br/>There's no escape.]]></description>
    <descprefix>You are in the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>trainee's taint</alias>
    <enter type="script">
      EnableTimer (trainee taint sweat)
    </enter>
  </object>
  <object name="trainee shoe">
    <descprefix>You are near the mouth of the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>trainee's shoe</alias>
    <description><![CDATA[<br/>The trainee is unimaginably big.<br/><br/>You're on top of her nonslip shoe now, and you can see massive grease stains and crumbs on them; pretty gross. The giant trainee paces around the restaurant, nearly kicking you off a few times. The cuff of her shoe is visible, and there's a gap between her sock and shoe big enough for you to enter.<br/><br/>You could enter her {object:shoe} or climb down it, or climb back up her {object:pants}.]]></description>
    <object name="shoe">
      <look>The gigantic, company supplied shoe will protect the trainee from slipping. And easily crush you.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbin type="script">
        msg ("At your size, you can easily climb down into the trainee's shoe. She takes a step as you're doing this, and you tumble down deeper into the massive piece of footwear.")
        wait {
          ClearScreen
          MoveObject (player, trainee foot)
        }
      </climbin>
      <climbdown type="script">
        msg ("You climb down, nearly being thrown off as she takes a step, you hear a fry crunch under her shoe. That could easily be you.")
        wait {
          ClearScreen
          MoveObject (player, kitchen floor)
        }
      </climbdown>
    </object>
    <object name="pants">
      <look>These black work pants are a little tight.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climb type="script">
        msg ("You climb back up her pants, being extra careful scaling her ass.")
        wait {
          ClearScreen
          MoveObject (player, trainee waist)
        }
      </climb>
    </object>
  </object>
  <object name="trainee foot">
    <descprefix>You are under the</descprefix>
    <alias>trainee's foot</alias>
    <description><![CDATA[<br/>Somehow, you've managed to avoid immediate death by foot by rolling underneath the arch of her foot.<br/><br/>However, with your current situation you'd have rather become a little red dot on her sock. The interior of her shoe is a humid bog of pure sweat. The smell is atrocious, and the heat given off by the foot makes you sweat, mixing yours with the disgusting foot sweat of this employee. Between the damp insole and the moist fabric of her sock, you regret every decision you've made.<br/><br/>You can only feel her {object:socked foot}]]></description>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (trainee foot sweat)
    </enter>
    <object name="socked foot">
      <look>If it's already this sweaty an hour into her shift, you can't imagine what it'd be like at the end of the day.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <struggle type="script">
        firsttime {
          msg ("You fight against the trainee's foot, nice try.")
        }
        otherwise {
          firsttime {
            msg ("Your battle against the sock is legendary.")
          }
          otherwise {
            msg ("With all your might, you managed to rip out one thread.")
          }
        }
      </struggle>
    </object>
  </object>
  <object name="kitchen floor">
    <description><![CDATA[<br/>This is a new way to see the restaurant you're so familiar with.<br/><br/>The hectic environment of the kitchen floor is scary. The trainee keeps shuffling around, and you watch her work shoe easily crush a crumb bigger than you. Another order is yelled by somebody and you watch as the trainee steps over you. Past the beeping machines of the restaurant, you can spot the break room, your favourite spot.<br/><br/>You can climb the {object:trainee feet}, or make your way to the {object:break room}. Across the kitchen, you can see the {object:cash register}, leading to the restaurant floor.]]></description>
    <descprefix>You are on the busy</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <enter type="script">
      EnableTimer (trainee random step)
    </enter>
    <onexit type="script">
      DisableTimer (trainee random step)
    </onexit>
    <object name="trainee feet">
      <look>Just watching them move makes you feel puny.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <alias>trainee's feet</alias>
      <climb type="script">
        msg ("Seizing the moment while she's standing still, you climb her work shoe.")
        wait {
          ClearScreen
          MoveObject (player, trainee shoe)
        }
      </climb>
    </object>
    <object name="break room">
      <look>You can't see who's in there from here.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <approach type="script">
        msg ("You run across the surface of the restaurant floor, praying you don't get crushed under some minimum-wage worker's sore feet.")
        wait {
          ClearScreen
          MoveObject (player, break room floor)
        }
      </approach>
    </object>
    <object name="cash register">
      <look>Your last stop before the customers.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <approach type="script">
        msg ("You walk along the kitchen floor towards the cash register.")
        wait {
          ClearScreen
          MoveObject (player, cash register1)
        }
      </approach>
    </object>
  </object>
  <verb>
    <property>approach</property>
    <pattern>approach</pattern>
    <defaultexpression>"You can't approach " + object.article + "."</defaultexpression>
  </verb>
  <object name="break room floor">
    <description><![CDATA[<br/>She's even worse big.<br/><br/>The first thing you see is your shitty manager. She always hated you. Now that her resting bitch face is a mile wide, she's terrifying. You watch as she browses through her phone, eating her salad with her flats off, leaving her bare feet dangling in the air. You don't know if you'd bother getting her attention, she'd probably take pleasure in squishing you like a bug. Luckily, there's another open chair.<br/><br/>You can approach your manager, {object:manager}, or climb the {object:chair1}. You can also return to the {object:kitchen}.]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are on the</descprefix>
    <object name="manager">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix type="string"></prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>What a bitch.</look>
      <alias>Nicole</alias>
      <approach type="script">
        msg ("You make your pilgrammage to your manager's godlike feet, praying she doesn't get up and unawarely squish you.")
        wait {
          ClearScreen
          MoveObject (player, manager feet)
        }
      </approach>
    </object>
    <object name="chair1">
      <alias>empty chair</alias>
      <look type="string"></look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>an</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <approach type="script">
        msg ("You don't want to imagine what your bitch of a boss will do if she discovers you at this puny size; you'll take your chances with the empty chair.")
        MoveObject (player, empty chair)
      </approach>
    </object>
    <object name="kitchen">
      <look>The busy McDonald's kitchen.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <approach type="script">
        msg ("You prefer the busy kitchen to the calm break room.")
        wait {
          ClearScreen
          MoveObject (player, kitchen floor)
        }
      </approach>
    </object>
    <object name="employee bathroom">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>The door to the employee bathroom is easy enough to walk under for a tiny person like you.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <alias>door to the employee bathroom</alias>
      <walkunder type="script">
        msg ("You walk into the occupied bathroom. Pervert.")
        wait {
          ClearScreen
          MoveObject (player, employee bathroom1)
        }
      </walkunder>
    </object>
  </object>
  <object name="manager feet">
    <descprefix>You are under </descprefix>
    <alias>Nicole's feet</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description><![CDATA[<br/>This is kind of symbolic.<br/><br/>Your manager's feet dangle high above you, with her absentmindedly scrunching her toes as she eats her lunch. You cringe at the thought of her unawarely dropping them onto you. Beside you, her vacant flats lay, waiting for your boss to finish her break and slip them back on. Nicole's throne, the break room chair, lays in front of you too. It'd be an easy climb from behind.<br/><br/>You can interact with her {object:flats}, climb her {object:chair}, or return to the {object:middle of the room}.]]></description>
    <object name="flats">
      <look>The massive, gross flats of your bitchy boss.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbin type="script">
        msg ("You, for some reason, decide to climb into your manager's flats.")
        wait {
          ClearScreen
          MoveObject (player, manager flat)
        }
      </climbin>
    </object>
    <object name="chair">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>The break room throne.</look>
      <climb type="script">
        msg ("You climb the leg of the cheap chair, hearing a light creak as your manager moves.")
        wait {
          ClearScreen
          MoveObject (player, manager ass)
        }
      </climb>
    </object>
    <object name="middle of the room">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>A good place to see the whole room.</look>
      <approach type="script">
        msg ("You're getting the fuck out of here before she unawarely kills you.")
        wait {
          ClearScreen
          MoveObject (player, middle of the room)
        }
      </approach>
    </object>
  </object>
  <object name="manager flat">
    <description><![CDATA[<br/>Disgusting.<br/><br/>That's the only word you have for Nicole's flats. You walk your tiny body across the huge, darkened imprint of her foot, breathing in the thick miasma of pure foot. The sweat in the air settles on your tongue, and you begin to think maybe this was a poor choice. Your godlike manager does wear these everyday.<br/><br/>You can interact with her insole, or return to the light.]]></description>
    <alias>Nicole's flat</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <object name="insole">
      <look>The worn imprint of her foot makes you feel small.</look>
      <lick>Bootlicker.</lick>
      <smell>You take sniff of your manager's flat. You retch on the foul taste of her foot sweat.</smell>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
    <object name="the light">
      <look>Where you came from.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <approach type="script"><![CDATA[
        msg ("You attempt to return to the light, escaping the hell of your bitch manager's flat.")
        wait {
          msg ("<br/>The light soon turns to darkness, and you look up at the gigantic foot of your manager. You can sense your doom approaching as the shadow cast over you gets darker and darker, before her foot completely obscured the outside world. Miles of the bitch's foot come down upon you, and sink into the damp insole. <br/><br/>Somehow, you survive.")
          wait {
            msg ("<br/>You don't.<br/><br/>Almost immediately Nicole makes a miniscule movement to her, of unconcievable size to you, squishing you instantly under a wrinkle in her sweaty foot. Your red smear mixes in with the grime and sweat of your manager's bare foot, turning you from her employee to a microscopic stain between her foot and her gross flats.<br/><br/>Atleast you were a stain. When she got moving, sweat would run over the gore, washing the last remnants of your existence into her sweat-soaked insole.<br/><br/>She'd be happy to know you died under her like a bug.")
            finish
          }
        }
      ]]></approach>
    </object>
  </object>
  <object name="manager ass">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are behind</descprefix>
    <alias>Nicole's ass</alias>
    <description><![CDATA[<br/>Your manager's planet sized ass lies before you.<br/><br/>The fat bitch is about one unaware movement away from backing up her ass on top of you and turning you into a red stain between her derriere and the break room chair. Nicole would probably be happy about that. Looking up from her tight work pants, her shirt is tucked in, secured by a belt. Her back is like a skyscraper to you, leading up to her dark hair and big head.<br/><br/>You could climb up her {object:shirt}, or try to get into her {object:pants1}.]]></description>
    <object name="pants1">
      <alias>pants</alias>
      <look>The pants hug her chubby thighs.</look>
      <climbinback>You scale her pants, but her belt is on way too tight, and you can't even slip inside her ass crack. Why would you want to though?</climbinback>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
    </object>
    <object name="shirt">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>The shirt looks easily climbable; it'll take you up to her shoulder.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climb type="script">
        msg ("You begin working your way up your manager's back, climbing the fabric of her shirt like a microscopic piece of lint.")
        wait {
          ClearScreen
          MoveObject (player, manager shoulder)
        }
      </climb>
    </object>
  </object>
  <verb>
    <property>climbinback</property>
    <pattern>climb in back</pattern>
    <defaultexpression>"You can't climb in back " + object.article + "."</defaultexpression>
  </verb>
  <object name="manager shoulder">
    <description><![CDATA[<br/>You nearly lose your grip on the shoulder of your boss, and you nearly lose your lunch looking at the drop. <br/><br/>Looking down in front of you, you can see Nicole's mountaineous boobs. They were large at normal size, but now compared to your tiny form they're gigantic. Your tiny form could easily fit in the gaps between the buttons, looking like they're about to pop right off her shirt.<br/><br/>You feel like the smallest movement of the giant woman could send you to your death, so you should move. You can interact with her {object:tits}, or climb back down her {object:back}.]]></description>
    <descprefix>You are on top of</descprefix>
    <alias>Nicole's shoulder</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <enter type="script">
      EnableTimer (manager shoulder idle)
    </enter>
    <onexit type="script">
      DisableTimer (manager shoulder idle)
    </onexit>
    <object name="tits">
      <look>Her shirt is struggling to contain them.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbin type="script"><![CDATA[
        msg ("You make the choice to crawl down your manager's shirt, inbetween her breasts.")
        wait {
          msg ("<br/>This wasn't unexpected, but you fall between the giant boobs of your manager, you hands sliding down the clammy fat as you try to stop your fall.")
          wait {
            ClearScreen
            MoveObject (player, manager boobs)
          }
        }
      ]]></climbin>
    </object>
    <object name="back">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>You made the climb up, I'm sure you could make the climb down.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbdown type="script"><![CDATA[
        msg ("You begin to attempt to climb down, slowly moving down Nicole's back.")
        wait {
          msg ("<br/>The giant woman moves in her seat, adjusting the way she's sitting. <br/><br/>Unfortunately for you, this spells disaster and you lose your grip on her shirt, tumbling down to your death. Your last thoughts run through your brain as you slide down her back, hitting some fatty flesh.")
          wait {
            ClearScreen
            MoveObject (player, manager asshole)
          }
        }
      ]]></climbdown>
    </object>
  </object>
  <object name="manager boobs">
    <description><![CDATA[<br/>Maybe your manager is so bitchy because of all the back pain these things give her.<br/><br/>Your speck-sized body is slipping deeper into your manager's cleavage like quicksand. The fat is very warm, and both you and her are working up a sweat. The heavy breasts make it hard for you to breath, and it feels like every second breath you get a mouthful of the bitch's tit flesh. It feels impossible to fight against the mounds.<br/><br/>Your whole world is {object:boob flesh}.]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>between your manager's boobs</alias>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (manager boob suffocation)
    </enter>
    <object name="boob flesh">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <look>Fatty mounds of tit flesh. Slightly sweaty.</look>
      <struggle>It's pointless.</struggle>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <object name="manager asshole">
    <description><![CDATA[<br/>Surprisingly you're not dead, but you're going to wish you were. You open your eyes and can barely see the gigantic ass cheeks, and the wrinked hole you're on. You're plastered to the bitch's nasty asshole.<br/><br/>The atmosphere down here is disgusting and sweltering, and you struggle to breath in the thick air. You basically have to swallow the humid, shitty ass air to breathe. The vile sweat burns your eyes and sticks to your tongue, and the taste of it makes you want to die. You're no better than a speck of waste in the chubby ass of your boss, and you're beginning to feel like it too.<br/><br/>All you feel is Nicole's sweaty and suffocating {object:asshole}.]]></description>
    <descprefix>You are stuck to</descprefix>
    <alias>Nicole's asshole</alias>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (manager asshole suffocation)
    </enter>
    <beforeenter type="script">
    </beforeenter>
    <object name="asshole">
      <look>The vile shithole. Your bitch manager's shithole.</look>
      <lick>A bit too late to be kissing her ass. The taste of sweat and waste overload your senses.</lick>
      <smell>You put your nose up to the ringed muscle, and take a whiff. Globs of gooey sweat fly up your nose.</smell>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <struggle type="script"><![CDATA[
        firsttime {
          msg ("You struggle and thrash and punch and kick. Your body becomes coated in vile, gooey sweat. Unsurprisingly you're too weak to fight your manager's muscly sphincter.<br/><br/>A light movement of the bitch's shithole happens around you.")
        }
        otherwise {
          msg ("You have no honor, so you bite with your microscopic teeth and dig your fingernails onto the giant woman's sensitive asshole. The tender anal meat seems resistant to your bug sized attempts at a fight.<br/><br/>You only had less than a second before the giantess would clench her anus, immediately popping your body like a grape under the pressure of the muscle. Your gory, mangled, tiny remains easily smear across the gigantic asshole, no better than a speck of waste. The waterfall of sweat Nicole would work up during her shift would easily wash that away, leaving the last of you soaked into her panties with the rest of the grime and perspiration.")
          finish
        }
      ]]></struggle>
    </object>
  </object>
  <object name="empty chair">
    <descprefix>You are on top of an</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description><![CDATA[<br/>The chair is big.<br/><br/>Besides the warmth from the ass of the giant woman who last sat on this chair, there's not much of interest on top of the chair. You should probably move before somebody else slams their ass on top of you.<br/><br/>You can go up the {object:back of the chair}, or down the {object:chair leg}.]]></description>
    <enter type="script">
      EnableTimer (employee butt crush)
    </enter>
    <onexit type="script">
      DisableTimer (employee butt crush)
    </onexit>
    <object name="back of the chair">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Climb up so you don't get sat on.</look>
      <climb type="script"><![CDATA[
        msg ("You scale up the back of the cheap chair, and take a leap of faith towards the table.")
        wait {
          msg ("You land on the table, miraculously. You didn't even see her coming, but behind you an employee lands in the chair you formerly occupied. You recognize her, Becca. She's a slacker, and has had it out for you ever since you called her out on it. That shit doesn't matter now you suppose, you're less than a millimeter tall.<br/><br/>She sets her McNuggets and sauce next to you, not even noticing your speck-sized self.")
          wait {
            ClearScreen
            MoveObject (player, break room table)
          }
        }
      ]]></climb>
    </object>
    <object name="chair leg">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Slide down the metal leg of the chair.</look>
      <climbdown type="script">
        msg ("You climb down the table and return to the center of the room.")
        wait {
          ClearScreen
          MoveObject (player, break room floor)
        }
      </climbdown>
    </object>
  </object>
  <object name="break room table">
    <descprefix>You are on top of</descprefix>
    <description><![CDATA[<br/>Looks like you've got no way down now.<br/><br/>At one end of the table, Becca is going to town on a ten piece meal, browsing through her phone and savouring the few minutes she gets to sit down. At the other end your bitchy boss is munching down on a salad. As if that'll get you slimmer, Nicole.<br/><br/>You can interact with your manager's {object:fork}, or Becca's {object:chicken nuggets}]]></description>
    <object name="chicken nuggets">
      <look>They make you feel small.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbin type="script">
        msg ("The building sized box of McNuggets is an easy climb for you, the box only shaking a bit as the gargantuan monster of a hand grabs another nugget.")
        MoveObject (player, McNuggets)
      </climbin>
    </object>
    <object name="fork">
      <look>The points of the fork are bigger than your entire body.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climb type="script"><![CDATA[
        msg ("You climb up on the fork, lathering yourself in the leftover poppy seed dressing. Your manager would not be able to distinguish you from the delicious dressing now.")
        wait {
          msg ("Without warning, Nicole reaches for the fork, taking you along with it. You’re brought up to her mouth, and all you can do is stifle a little whimper as your boss opens her mouth, her stale breath washing over you, her slimy pink tongue inviting you in. The giant woman finishes what she started, bringing the fork into her mouth and sealing your fate for good.<br/><br/>With her mouth oozing saliva, the giantess easily makes quick work of you, her thick, sticky spit easily pulling you off her fork. You bang your hands on the bumpy surface of her tongue, but you’re indistinguishable from any other poppy seed on her tongue. Her spit fills every cavity of your body, not letting you escape it’s vile embrace. You choke and sputter on the drool, using every ounce of your strength to escape Nicole’s disgusting mouth but it’s no use. You’re destined to be food for your boss.<br/><br/>With a sickening noise, you’re quickly swallowed down her throat.")
          wait {
            ClearScreen
            MoveObject (player, manager stomach)
          }
        }
      ]]></climb>
    </object>
  </object>
  <object name="McNuggets">
    <description><![CDATA[<br/>You're smaller than a crumb on the battered, deep fried piece of chicken.<br/><br/>Looking up, it's terrifying to watch your fellow employee tear through the nugget like it's nothing. You watch her swallow, and her tongue comes out and licks any additional sweet and sour sauce off her gigantic lips. That could easily be you. Becca terrifies you.<br/><br/>You can interact with her {object:nugget}, or leave the {object:box}.]]></description>
    <descprefix>You are in a box of</descprefix>
    <enter type="script">
      EnableTimer (employee nugget)
    </enter>
    <onexit type="script">
      DisableTimer (employee nugget)
    </onexit>
    <object name="nugget">
      <eat>You take a bite out of the nugget. Yum.</eat>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
    <object name="box">
      <look>Might wanna get out of here before she eats you, or throws you in the garbage.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbout type="script"><![CDATA[
        msg ("You make your way out of the box of nuggets, a logical decision.")
        wait {
          msg ("Landing on the table, you gaze up once again at the giant girl, only to notice her looking directly back at you. You've finally gotten her attention, and you begin jumping and waving. She reaches out her hand to pick you up.<br/><br/>A leviathan of a finger comes down and pounds your tiny body into the table before you even realize what's happening. Your body easily pops beneath the digit, smearing you between her finger and table, with her unceremoniously wiping whatever's left of your gory, mashed remains off her finger and onto her pants.<br/><br/>She's not one bit surprised this shitty restaurant has bugs.")
          finish
        }
      ]]></climbout>
    </object>
  </object>
  <verb>
    <property>climbout</property>
    <pattern>climb out</pattern>
    <defaultexpression>"You can't climb out " + object.article + "."</defaultexpression>
  </verb>
  <object name="employee mouth">
    <description><![CDATA[<br/>Her tongue whips you around her mouth, and you pray to god you don't get chewed up.<br/><br/>The giant girl's molars get to work on the chicken nugget you were, with you luckily being picked up by her tongue in a glob of sauce. Thick strands of saliva fly around her mouth, along with microscopic bits of chicken nugget hitting you in the face every time she chews. You're lucky the gargantuan pink muscle you're on hasn't put you under those massive teeth. Still, you're probably dead anyways.<br/><br/>You can see Becca's massive, snake-like {object:tongue}.]]></description>
    <descprefix>You are in</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <objectslistprefix>You can see her saliva coated</objectslistprefix>
    <alias>Becca's mouth</alias>
    <enter type="script">
      EnableTimer (employee swallow)
    </enter>
    <onexit type="script">
      DisableTimer (employee swallow)
    </onexit>
    <object name="tongue">
      <look>Her saliva makes you stick to it, for better or for worse.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <struggle type="script"><![CDATA[
        firsttime {
          msg ("Wrestling this leviathan is pointless.")
        }
        otherwise {
          msg ("You try to fight the beast. It seems to retaliate by flicking you around her mouth, leaving you screaming. You're getting incredible air time, though.<br/><br/>You slam against one of Becca's molars, breaking a few bones. Landing on a soggy piece of chicken nugget, you can't even react to the employee's teeth coming down on you, crushing you into unrecognizable mush, your bloody remains easily washing away with her saliva, and whatever's left being swallowed with the rest of her food.<br/><br/>Your tiny body would add the smallest amount of calorific impact to her meal, becoming a mere fat cell or two on her butt, more cushioning for her tired body when Becca plops her ass down for her next break.")
          finish
        }
      ]]></struggle>
    </object>
  </object>
  <object name="employee stomach">
    <description><![CDATA[<br/>You slowly come to the realization you're going to be nothing but food.<br/><br/>The boiling cauldron of chicken, soda and stoamch acid gladly accepts you into the mix, the sticky sludge of the already digested food coating you and wasting no time to begin digesting you. The cavern's walls groan and ooze digestive juices, and you feel your skin begin to tingle against the bubbly liquid you're submerged in. It terrifies you that you're going to be no more than a few calories for her.<br/><br/>You're swimming in Becca's {object:stomach contents}.]]></description>
    <objectslistprefix>You can feel</objectslistprefix>
    <alias>Becca's stomach</alias>
    <descprefix>You are digesting in</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <enter type="script">
      EnableTimer (employee digestion)
    </enter>
    <object name="stomach contents">
      <look>You can't see it, but you can feel it eating away at you.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <struggle>You try to struggle against it, but you're geniunely less than a millimeter tall and there's nothing you can do.</struggle>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <object name="manager stomach">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are in</descprefix>
    <alias>Nicole's stomach</alias>
    <description><![CDATA[Your manager’s putrid gut is already churning her meal, and accepts you into the acrid mix.<br/><br/>After landing face first into the rapidly digesting salad, hot vomit surrounds your body and you struggle to stay afloat in Nicole’s stomach. Still in shock, you’re in horror as it lets out a deafening groan, striking a sort of primal fear. Getting your bearings, you feel a burning sensation surrounding your microscopic body, the stomach contents attempting to amalgamate you into your manager’s lunch. You fight and swim against the slime, screaming out in pain. Spitting out the sour stomach acid, you’re horrified to feel your mouth bleeding from the inside. <br/><br/>You’re destined to become fuel for your shitty boss, no better than the {object:salad} she ate.<br/>]]></description>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (manager digestion)
    </enter>
    <object name="salad">
      <look>You can't see it, but it surrounds you.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climb>You sink right through, splashing more stomach acid all over yourself.</climb>
    </object>
  </object>
  <object name="cash register1">
    <alias>cash register</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are beneath the</descprefix>
    <description><![CDATA[<br/>You're honestly glad you never work up here.<br/><br/>Above you, you can see the now colossal cashier, Maria, taking another giant's order. You never really had a problem with her, maybe she's a bit chatty but that's it. You don't think you'll be doing much chatting anyway at this size, every bit of the giant woman seems to be able to crush you into nothing.<br/><br/>You can try your luck with {object:cashier}, head for the {object:restaurant floor}, .]]></description>
    <object name="cashier">
      <look>Now giant, the petite Latina isn't so small anymore.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <alias>Maria</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <approach type="script">
        msg ("You stare in awe at Maria's size as you walk towards her.")
        wait {
          ClearScreen
          MoveObject (player, cashier shoes)
        }
      </approach>
    </object>
    <object name="restaurant floor">
      <look>The busy restaurant floor.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <approach type="script">
        msg ("You decide to head towards the unknown, the busy McDonald's floor.")
        wait {
          ClearScreen
          MoveObject (player, restaurant floor1)
        }
      </approach>
    </object>
    <object name="serving counter3">
      <alias>serving counter</alias>
      <look>You could interact with food from on top.</look>
      <approach type="script">
        msg ("You start moving to the underside of the serving counter.")
        wait {
          ClearScreen
          MoveObject (player, serving counter)
        }
      </approach>
    </object>
  </object>
  <object name="cashier shoes">
    <alias>Maria's shoes</alias>
    <description><![CDATA[<br/>It feels like you're at the base of skyscraper.<br/><br/>You have a sense of safety down here because you don't expect her to move around too much, but still you're frightened by the gigantic feet. Maria's still taking orders, and her feet look climbable up to her pants. On the otherhand, you could climb into her visible sock instead.<br/><br/>You can enter her {object:sock}, or climb up the giant cashier's {object:pants}. On the other hand, you can go back to {object:where you were}.]]></description>
    <descprefix>You are next to</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <object name="sock">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>Run of the mill black sock.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbin type="script"><![CDATA[
        msg ("You climb the shoe, before reaching the sock. Unsurprisingly, your tiny form easily slips into Maria's sock.")
        wait {
          msg ("<br/>Her foot moves slightly and your slow descent is turned into a tumble, sliding between the cotton sock and her smooth skin. You land under what you assume is the arch of her foot.")
          wait {
            ClearScreen
            MoveObject (player, cashier foot)
          }
        }
      ]]></climbin>
    </object>
    <object name="pants2">
      <alias>pants</alias>
      <look>They hug her ass, arguably her best feature. It's huge, now even more so.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climb type="script">
        msg ("This might be an insane idea, but you begin to scale Maria's monolithic leg from behind. The fall would kill you.")
        wait {
          ClearScreen
          MoveObject (player, cashier pocket)
        }
      </climb>
    </object>
    <object name="where you were">
      <look>Where you came from.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <approach type="script">
        msg ("Maria's giant feet are kind of intimidating, so you step back.")
        wait {
          ClearScreen
          MoveObject (player, cash register1)
        }
      </approach>
    </object>
  </object>
  <object name="cashier foot">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>Maria's foot</alias>
    <descprefix>You are underneath</descprefix>
    <description><![CDATA[<br/>When you try to catch your breath, your airways get clogged up by Maria's nasty foot sweat.<br/><br/>You never imagined that her shoes contained this humid hellscape, but to your surprise you're immediately coated in salty, putrid sweat. Her tan foot is absolutely dripping, and the sock below you is completely drenched, leaving you suspended in perspiration. The smell is horrible, and every breath you take you can feel the sweaty condensation of the giant woman's sweat land on your tongue.<br/><br/>You're at serious risk of drowning, and all you can do is struggle against the cashier's foot.]]></description>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (cashier foot sweat)
    </enter>
    <object name="foot">
      <look>How can it generate so much sweat?</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <struggle>Struggling only puts more sweat down your throat, expediting your death.</struggle>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <lick>You attempt to lick your way out of this predicament, but all you get is a mouthful of Maria's foot sweat.</lick>
      <smell>You can already smell it, and taking a deep whiff of it only sends globules of sweat up your nostril.</smell>
    </object>
  </object>
  <object name="cashier pocket">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>Maria's back pocket</alias>
    <descprefix>You are clinging to</descprefix>
    <description><![CDATA[<br/>You're amazed you even made that climb. <br/><br/>You hold onto Maria's back pocket, and by extension her ass, with a death grip. The tight pants hug her body, and her already huge rear has been amplified by her new size. That also makes it more dangerous. One small movement and the fall down to the tile floor would kill you instantly. Yikes.<br/><br/>You could climb into the back of her {object:waistband}, or try your best to climb down her {object:leg}. There's no way you'd be able to climb up her tan skin to her shirt.]]></description>
    <object name="waistband1">
      <alias>waistband</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>The only thing between you and her ass crack.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbin type="script">
        msg ("You climb over the Latina's sizable rear, heading directly for her waistband. You're so tiny you easily slip into her ass crack.")
        wait {
          ClearScreen
          MoveObject (player, cashier ass)
        }
      </climbin>
    </object>
    <object name="leg">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbdown type="script">
        msg ("There's nothing for you up here, so you return to her feet.")
        wait {
          ClearScreen
          MoveObject (player, cashier shoes)
        }
      </climbdown>
    </object>
  </object>
  <object name="cashier ass">
    <alias>Maria's ass</alias>
    <descprefix>You are completely surrounded by</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <objectslistprefix>You can feel</objectslistprefix>
    <description><![CDATA[<br/>Maybe this was a bad idea.<br/><br/>Your descent into Maria's butt quickly stops. Her pants are almost too tight around her rear, compressing her gigantic, fat cheeks and leaving you stuck inbetween them. It was already enormous and hot, but now her ass is your everything, and the smallest movement of her body could easily crush you.<br/><br/>Your whole world is Maria's {object:ass2}.]]></description>
    <enter type="script">
      EnableTimer (cashier ass suffocation)
    </enter>
    <object name="ass2">
      <alias>ass</alias>
      <look>At normal size you enjoyed it, but now you're experiencing it in a way you never imagined.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <struggle>You'd like to struggle, but there's seriously no use. You have no hope.</struggle>
      <lick>You run your tongue across her tan ass fat, tasting the salty skin.</lick>
      <smell>Smells like the fruity body wash she must use, with a trace of sweat.</smell>
    </object>
  </object>
  <object name="restaurant floor1">
    <alias>restaurant floor</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are on the</descprefix>
    <description><![CDATA[<br/>This is an entirely new perspective of the restaurant floor you used to mop.<br/><br/>The McDonald's floor is chaotic to say the least. Every customer poses the threat of crushing you with their feet unawarely and you realize how bad of a situation you're currently in. You should leave.<br/><br/>Across the floor from you, you can see a giant woman waiting for her coffee, an absolute MILF.<br/><br/>You can see the cash register, and the entrance. You can also interact with the {object:MILF1}]]></description>
    <prefix type="string"></prefix>
    <object name="cash register2">
      <alias>cash register</alias>
      <look>You can barely see Maria's pretty face over it.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <approach type="script">
        msg ("You head back to the cash register, watching a giant bitch slam her foot down directly where you were standing.")
        wait {
          ClearScreen
          MoveObject (player, cash register1)
        }
      </approach>
    </object>
    <object name="entrance">
      <look>The entrance of the restaurant. It swings open occasionally.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <approach type="script"><![CDATA[
        msg ("You approach the impossibly big door, being careful to avoid any customers along the way.")
        wait {
          msg ("<br/>You watch in horror as the door swings open, revealing a giant girl and her equally huge friends behind it. You recognize them as the typical obnoxious college girls, the ones you deal with on the daily. You gaze up at the colossal customer, screaming for them to help you and to look where they're stepping. They seem to be too distracted with their dumb conversation, and your view of her blonde hair and pretty face are obscured by the bottom of her gigantic Nike Blazer.<br/><br/>You're left with no time to react as the girl takes her step, effortlessly crushing you between the sole of her shoe and the disgusting floor you used to clean. You splatter between the two objects, before she lifts her foot up again, leaving your remains caked into the dirt of the floor. The unaware college girl instantly converted you from human into filth on the already filthy McDonald's floor.<br/><br/>You're still recognizable as a little blood stain, but the next giant girl made sure that wasn't the case, the giant pair of Vans once again crushing you into nothing, leaving little bits and pieces of you lodged onto the bottom of her shoe, without even noticing. The bitch didn't even look up from her phone before effortlessly stepping on you. It's not fair.<br/><br/>The cycle seems to continue as more of them pour in, until all of five of them have finally made it into the restaurant, only at the cost of your tiny life. At this point you've been utterly trampled, and the stain you left behind on the floor is unrecognizable from any other piece of floor grime, and you'd continue to be stepped on by every hungry bitch that entered the restaurant. You're left with a disgusting fate.<br/><br/>That is, until some tired minimum wage employee mopped you up, erasing any trace of your pathetic death.")
          finish
        }
      ]]></approach>
    </object>
    <object name="MILF1">
      <alias>MILF</alias>
      <look>She's wearing jeans that must've been a struggle to get up over her curves, and white heels.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <approach type="script">
        msg ("You scurry across the McDonald's floor like a bug. You basically are one, but even smaller.")
        wait {
          ClearScreen
          MoveObject (player, MILF heels)
        }
      </approach>
    </object>
  </object>
  <object name="serving counter">
    <descprefix>You are beneath the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description><![CDATA[<br/>There's nobody currently here, but that won't take long.<br/><br/>Underneath the serving counter, you really get a feel for how dirty the floor can get. At your size, it seems to be absolutely coated in grime, though you imagine the sole of the shoe of whatever bitch might accidentally step on you wouldn't be much cleaner. You notice a sticky puddle of dried soda, and see that the mess extends up the counter.<br/><br/>You can head back to the {object:cash register3}, interact with the {object:sticky mess}, or climb up the {object:serving counter1} using it.]]></description>
    <object name="cash register3">
      <alias>cash register</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Maria's hard at work over there.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <approach type="script">
        msg ("You make the quick decision to return to the cash register.")
        wait {
          ClearScreen
          MoveObject (player, cash register1)
        }
      </approach>
    </object>
    <object name="sticky mess">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix />
      <look>A sugary mess of dried soda. Kinda gross.</look>
      <smell>Smells like sugar and dirt.</smell>
      <lick type="script"><![CDATA[
        msg ("You walk up on the mess, and get on all fours to give the substance a lick. You recoil at the taste of stale soda and the grimy McDonald's floor. When you attempt to get back up, you realize just how sticky the floor is. You can't move.")
        wait {
          msg ("<br/>Within seconds, you hear a boom.<br/><br/>And another boom.<br/><br/>You can only see the shoes of the girl approaching you. You panic and thrash against the sticky substance that's subduing you but it's no use. You scream in terror as a gigantic shadow is cast over you.<br/><br/>Chloe's gigantic shoe silences you as it reduces you to a little red smear of gore between her footwear and the mess on the floor. Setting order #113 on the counter, she grimaces as she goes to lift her shoe, noticing how it sticky it is. She'd bring your corpse up with her foot, leaving your sticky remains stuck in the tread of her sole, your final resting place.")
          finish
        }
      ]]></lick>
    </object>
    <object name="serving counter1">
      <alias>serving counter</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>It stands like a massive building in front of you. Climbable though.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <climb type="script">
        msg ("Your hands stick to the mess, and within no time you easily scale the serving counter.")
        wait {
          ClearScreen
          MoveObject (player, serving counter2)
        }
      </climb>
    </object>
  </object>
  <object name="serving counter2">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are on top of the</descprefix>
    <alias>serving counter</alias>
    <description type="script"><![CDATA[
      if (not ListContains(ScopeVisible(), coffee)) {
        msg ("The serving counter is a dangerous place to be.<br/><br/>The high traffic counter seems to be empty, and from your vantage point you get a good view of the people awaiting their orders. The only person you can spot is an attractive older woman. You'd call her a MILF.<br/><br/>You can look at the {object:MILF}, or climb down the {object:counter}.")
      }
      else if (ListContains(ScopeVisible(), coffee)) {
        msg ("The serving counter is a dangerous place to be.<br/><br/>The only object on the counter is a coffee and from your vantage point you get a good view of the people awaiting their orders. The only person you can spot is an attractive older woman. You'd call her a MILF.<br/><br/>You can look at the {object:MILF}, interact with the {object:coffee} or climb down the {object:counter}.")
      }
    ]]></description>
    <object name="MILF">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look type="script"><![CDATA[
        firsttime {
          msg ("The mature brunette is wearing jeans that hug her wide hips, and a white top that shows some cleavage. Her eyes are on her phone.")
          SetTimeout (3) {
            ClearScreen
            msg ("You're still gazing at the MILF when all of the sudden a {object:coffee}  is slammed down next to you.<br/><br/>\"Order #113!\"<br/>")
            MakeObjectVisible (coffee)
            ShowRoomDescription
          }
        }
        otherwise {
          msg ("Her eyes pop up from her phone, and eye the coffee next to you.")
        }
      ]]></look>
    </object>
    <object name="coffee">
      <visible type="boolean">false</visible>
      <look>You can't tell if it's a large coffee or just simply large to you.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climb type="script"><![CDATA[
        msg ("You scale the cup with relative ease, given that your hands are still sticky. In no time, you reach the lid.")
        wait {
          msg ("<br/>You spot the MILF beginning to move, her now planet-sized boobs bouncing up and down as she walks. You're too caught up in your perversion to realize that she's heading for her coffee, with a side of you.")
          wait {
            ClearScreen
            MoveObject (player, MILF coffee)
          }
        }
      ]]></climb>
    </object>
    <object name="counter">
      <look>This counter has seen so much food.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <climbdown type="script">
        msg ("You doubt you could climb down this thing safely.")
      </climbdown>
    </object>
  </object>
  <object name="MILF coffee">
    <alias>MILF's coffee</alias>
    <description><![CDATA[<br/>Her red nail nearly crushes you as she pops the lid open, hot steam rushing out.<br/><br/>The MILF's face looms over you like some sort of fucked up sky, and you can count every pore on her face from your position. Assuming you don't want to be energy for this lady, you don't have many options to get out of this situation. A fall from this height would kill you.<br/><br/>You can see {object:her face}, and the {object:coffee lid}.]]></description>
    <descprefix>You are on top of</descprefix>
    <enter type="script">
      EnableTimer (coffee fall)
    </enter>
    <onexit type="script">
      DisableTimer (coffee fall)
    </onexit>
    <object name="her face">
      <look>The naked eye probably couldn't even see you.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <screamat>She can't hear you over the giant, busy McDonald's restaurant, dipshit.</screamat>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <jumpto type="script"><![CDATA[
        msg ("You make the brazen decision to jump towards the MILF. Was it stupid or brave?")
        wait {
          msg ("<br/>You're left contemplating that question as you fall through the air, straight towards the woman's gigantic tits.")
          wait {
            ClearScreen
            MoveObject (player, MILF tits)
          }
        }
      ]]></jumpto>
    </object>
    <object name="coffee lid">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look type="script">
        msg ("You peer into the cup, and at the same time the giant woman above you begins to move. It was the perfect storm to send you falling into her coffee.")
        MoveObject (player, coffee cup)
      </look>
    </object>
  </object>
  <verb>
    <property>screamat</property>
    <pattern>scream at</pattern>
    <defaultexpression>"You can't scream at " + object.article + "."</defaultexpression>
  </verb>
  <object name="coffee cup">
    <descprefix>You are submerged in</descprefix>
    <alias>coffee</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description><![CDATA[<br/>It burns.<br/><br/>You thrash in pain as you feel the steaming hot coffee burn your skin, emerging at the surface and letting out a bubbly scream. The waves in the cup caused by the colossal woman above you move you around as you suffer. You can taste, smell, breathe and feel nothing but coffee. You're in a state of unimaginable panic. <br/><br/>All you can feel is {object:coffee1}, your eyes have been severely burned.]]></description>
    <objectslistprefix>You can feel nothing but</objectslistprefix>
    <enter type="script">
      EnableTimer (coffee drink)
    </enter>
    <onexit type="script">
      DisableTimer (coffee drink)
    </onexit>
    <object name="coffee1">
      <alias>hot coffee</alias>
      <look>It's like lava.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <struggle>You flail around like a helpless bug stuck in the giant woman's drink.</struggle>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
    </object>
  </object>
  <object name="MILF stomach">
    <description><![CDATA[<br/>You land in the disgusting organ with a splash.<br/><br/>Immediately, the sticky digested mess of whatever she already ate for breakfast coats your skin. Your body begins to burn more than it already is, and the MILF's stomach bile begins to eat away at your destroyed skin. Attempting to stay afloat in the rancid vomit, you cry out in pain.<br/><br/>All you can feel is the {object:chyme}.]]></description>
    <descprefix>You are inside the</descprefix>
    <alias>MILF's stomach</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <objectslistprefix>You are coated in</objectslistprefix>
    <enter type="script">
      EnableTimer (milf digestion)
    </enter>
    <object name="chyme">
      <look>You're practically a part of the disgusting mixture.</look>
      <struggle>It's too thick, and you're too weak.</struggle>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <object name="MILF tits">
    <descprefix>You are inbetween the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>MILF's tits</alias>
    <description><![CDATA[<br/>Good news, you didn't splat on impact. Bad news, you're stuck in the giant woman's cleavage.<br/><br/>To her, you're barely an inch deep in her big boobs, but to you, it feels like a hundred feet. Your surroundings are oppressive to a tiny person, to say the least, the heat, the movement, the unimaginable weight of the breasts. It's not safe.<br/><br/>All you can see is {object:boobs}.]]></description>
    <enter type="script">
      EnableTimer (milf boob suffocation)
    </enter>
    <object name="boobs">
      <look>Mountainous mammaries.</look>
      <lick>You run your tongue across the pillowly flesh, tasting her salty skin.</lick>
      <smell>They smell like soap and tit sweat.</smell>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <struggle type="script"><![CDATA[
        firsttime {
          msg ("You struggle against the titantic tits, screaming up at your captor's face as you do so. She responds by taking a sip of her coffee.")
        }
        otherwise {
          firsttime {
            msg ("You punch and claw and kick against the milk bag. You manage to beat it up a little bit.")
          }
          otherwise {
            msg ("You keep the fight for you life going between the MILF's boobs, using all the dirty tactics you can. Too busy biting a mouthful of tit flesh, you don't even notice the giant woman looking down at her breasts.<br/><br/>The two fatty mounds come together as one, and your puny body puts up a pathetic resistance, before popping like a grape. Your warm gore runs down her cleavage, leaving a microscopic red streak.<br/><br/>The woman, satisfied that the minor itch between her tits has been dealt with, continues to drink her coffee in peace. Your remains would be rubbed together throughout the day as her breasts bounced up and down, eventually turning into nothing. She'd never know of your microscopic demise.")
            finish
          }
        }
      ]]></struggle>
    </object>
  </object>
  <object name="MILF heels">
    <descprefix>You are next to the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>MILF's heels</alias>
    <description><![CDATA[<br/>The cruise ship-like heels make you feel even more pathetic.<br/><br/>The MILF stands tall above you, her face nearly obscured by her mountainous breasts. Her white top leads down to her jeans, which smother her large ass, planet-like at your size, and that leads down to the heels that tower over you already.<br/><br/>You can climb the {object:toe box}, the {object:heel}, or return to the {object:main floor}.]]></description>
    <object name="toe box">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>A safer climb than the heel.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <climb type="script">
        msg ("You climb up the rough black surface of the toe box, reaching the top of her giant high heels.")
        wait {
          ClearScreen
          MoveObject (player, MILF heel)
        }
      </climb>
    </object>
    <object name="heel">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>A riskier climb than the toe box, but it would offer you direct access to her jeans.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <climb type="script"><![CDATA[
        msg ("You attempt to climb up the heel of this MILF's high heels.")
        wait {
          msg ("You get up the tiniest bit, and immediately slide down. The big butt above you begins to move, she must be growing impatient. She shuffles her feet around, and this spells disaster for you.<br/><br/>You must be the unluckiest person on earth. She lifts her foot, and by extension her footwear into the air, and drops the entirety of her giant heel on top of you. Like some sort of hydraulic press, you're reduced to a smear, your bones being crushed into powder between the dirty restaurant floor, and the bottom of her comparably dirty heel.<br/><br/>Your legacy would not live on, your pathetic remains being obscured and destroyed from both the bottom of her heel and the restaurant floor, leaving nothing behind.")
          finish
        }
      ]]></climb>
    </object>
    <object name="main floor">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Standing next to this MILF is dangerous, maybe you should go back here.</look>
      <approach type="string"></approach>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
    </object>
  </object>
  <object name="MILF heel">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are on top of the</descprefix>
    <alias>MILF's heel</alias>
    <description><![CDATA[<br/>You slip on the glossy black surface, catching yourself on your hands as you fall.<br/><br/>You can't even see the goddess-like woman's face above you from this angle, her large tits blocking your view. That doesn't matter right now, your focus is on her foot. The space between the top of her heel and her foot is large enough for you to fit into, or you could climb up her foot to her pants. The wait seems kind of long, I wouldn't expect her coffee to be ready soon.<br/><br/>You can climb into or down the {object:toe box1} of her heels, or climb up to her {object:jeans}.]]></description>
    <object name="toe box1">
      <alias>toe box</alias>
      <look>These heels aren't new.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <climbin type="script">
        msg ("You climb on top of the MILF's bare foot, and squeeze your speck-sized body into her high heel. You slide down the soft flesh of her foot.")
        wait {
          ClearScreen
          MoveObject (player, MILF toes)
        }
      </climbin>
      <climbdown type="script">
        msg ("Fuck this shit.")
        wait {
          ClearScreen
          MoveObject (player, MILF heels)
        }
      </climbdown>
    </object>
    <object name="jeans">
      <look>How does she fit, all that, in them jeans?</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climb type="script">
        msg ("You climb up the smooth skin of the MILF's foot and reach the cuff of her jeans, before continuing your journey upwards.")
        wait {
          ClearScreen
          MoveObject (player, MILF waist)
        }
      </climb>
    </object>
  </object>
  <object name="MILF toes">
    <descprefix>You are in between the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>MILF's toes</alias>
    <description><![CDATA[<br/>I'm not sure what you expected, but as you get up from your rough landing on her slightly damp insole, you regret your decision.<br/><br/>The smell down here is abhorrent, you can taste the MILF's feet with every breath you take. Your lungs burn with the taste of the sour funk, and you realize that there's probably no escape from this disgusting, almost alien landscape of the inside of the giant lady's high heel. Your last moments will be spent between some random 30-something's big and second toes.<br/><br/>Her {object:big toe} rises and falls with every step.]]></description>
    <objectslistprefix>You can't really see anything, but you can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (milf foot suffocation)
    </enter>
    <object name="big toe">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>The massive wall of flesh makes you feel even more insignificant.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <struggle type="script"><![CDATA[
        firsttime {
          msg ("You hit the underside her toe with all your might, hurting your hands on the thick callouses.")
        }
        otherwise {
          msg ("You try attacking the soft skin of the toe, and you immediately get a reaction, but not the one you would've wanted.<br/><br/>Your toe prison begins to scrunch, and your body is contorted and snapped before exploding in a pathetic display of gore. The tiny red mark that was once you stains the skin of the MILF above you, with whatever remains are left seeping into the disgusting insole below you.<br/><br/>The giant woman, satisfied that the tiniest itch was gone, walks out of the restaurant to continue her day. When she took them off at the end of the day, you were already washed away by the putrid sweat, whatever you were having being soaked into the insole of some giant mom's heel.")
          finish
        }
      ]]></struggle>
    </object>
  </object>
  <object name="MILF waist">
    <descprefix>You are holding onto the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>MILF's waist</alias>
    <description><![CDATA[<br/>You finish climbing up her shapely thigh, and take a quick rest near her waist.<br/><br/>You don't even want to think about the fall from here. Fatal. Her belt is secure around her waist, but you reckon you could slip into her ass crack, the jeans being barely able to contain it. On the other hand, the only way further up the MILF's  mature body is to climb on her bare skin, reaching her white tank top.<br/><br/>You can climb down her {object:jeans1}, climb into the back of them, or climb up her {object:skin}.]]></description>
    <object name="jeans1">
      <alias>jeans</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>You're lucky these were so easy to climb.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbin type="script"><![CDATA[
        msg ("You climb into the back of her jeans without issue.")
        wait {
          msg ("<br/>The giantess begins to walk, which propels your once slow descent into her abyssal ass crack to a tumble, eventually landing what feels like miles deep in it.")
          wait {
            ClearScreen
            MoveObject (player, MILF asshole)
          }
        }
      ]]></climbin>
      <climbdown type="script">
        msg ("The height's getting to you, so you bail down the MILF's leg.")
        wait {
          ClearScreen
          MoveObject (player, MILF heel)
        }
      </climbdown>
    </object>
    <object name="skin">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>The milky white skin of her stomach.</look>
      <climb type="script"><![CDATA[
        msg ("You dig your hands into the skin, continuing up to her white tank top.")
        wait {
          msg ("<br/>You never even saw the massive hand coming.<br/><br/>You're effortlessly swatted by the giant mom, soaring through the air at unimaginable speeds. Luckily for you, you pass out before impact. Your body hits the ground with the most pathetic squish, and your microscopic gore is neatly contained in a pile. For a second, anyway.<br/><br/>A giant Fila Disruptor makes short work of whatever's left, the girl not even noticing.")
          finish
        }
      ]]></climb>
    </object>
  </object>
  <object name="MILF asshole">
    <descprefix>You are beneath the</descprefix>
    <alias>MILF's asshole</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description><![CDATA[<br/>Her asshole is terrifyingly huge.<br/><br/>Her lacy panties keep you close to it, and a simple adjustment of her underwear would bring you right up against the grimy hole. Up this close, at this size, her asshole is disgusting. You gag from the revolting, earthy scent.  Catching your breath in the humid darkness, you feel the MILF continue to walk, her fat ass swaying you around as the unimaginably big woman walks.  The brown wrinkled flesh above you pulsates,  showcasing the specks of filth between its folds. <br/><br/>You can attempt to interact with the mature woman's {object:asshole1}, or the {object:ass fat} that surrounds you.]]></description>
    <objectslistprefix>You can feel</objectslistprefix>
    <enter type="script">
      EnableTimer (milf fart)
    </enter>
    <onexit type="script">
      DisableTimer (milf fart)
    </onexit>
    <object name="asshole1">
      <alias>asshole</alias>
      <look>The wrinkled pucker is repulsive.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <lick>You run your tongue across the rubbery flesh. Unsurprisingly, it tastes like her morning shit, leaving you struggling not to vomit.</lick>
      <smell>The smell of ass overwhelms your senses, leaving your brain fogged up by the rank scent.</smell>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climbin type="script">
        msg ("You approach the asshole, putting one of your hands on the filthy anal wrinkle, and climbing up to the mouth of the hole. You're already coated in grime from that, and that allows for an easy slip into the massive, meaty anus.")
        wait {
          ClearScreen
          MoveObject (player, MILF asshole1)
        }
      </climbin>
    </object>
    <object name="ass fat">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Gigantic fatty mounds. Coated in cellulite.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climb type="script"><![CDATA[
        firsttime {
          msg ("You attempt to climb up the ass meat, your hands unable to get a grip on the dimpled butt cheek.")
        }
        otherwise {
          msg ("You don't give up, so you give climbing the giant mom's ass another shot. Surprisingly, you begin to make moves up the mile-high structure.")
          wait {
            msg ("<br/>The structure begins to shift as you climb, and you nearly lose your grip. The cheeks come together immediately like some sort of organic trash compactor, crushing you into a smear between the planet-sized globes.<br/><br/>Your bloody remains stay wedged in between the MILF's cheeks for the rest of her day, the sheer rubbing together of the gelatinous masses reducing you into nothing. No evidence would remain of your pathetic death.")
            finish
          }
        }
      ]]></climb>
    </object>
  </object>
  <object name="MILF asshole1">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are inside the</descprefix>
    <alias>MILF's asshole</alias>
    <description><![CDATA[<br/>You're immediately greeted with the most disgusting feeling.<br/><br/>You land in a glob of juice or slime or something worse. It restricts your movement and fills your mouth with mucus and filth as you open your mouth to scream. The raw sewage flows down your throat, overwhelming your sense with the MILF's body's byproducts. I don't know what you expected, but this is how you'll die.<br/><br/>You can struggle against the rotten {object:filth}.]]></description>
    <objectslistprefix>You can feel nothing but</objectslistprefix>
    <enter type="script">
      EnableTimer (milf anal suffocation)
    </enter>
    <object name="filth">
      <struggle>A glob of some random unaware mom's ass slime is stronger than your entire body. You can't do anything.</struggle>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>It stinks with the taste and smell of shit.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
    </object>
  </object>
  <verb>
    <property>walkunder</property>
    <pattern>walk under</pattern>
    <defaultexpression>"You can't walk under " + object.article + "."</defaultexpression>
  </verb>
  <object name="employee bathroom1">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description><![CDATA[<br/>It's like you're in front of the throne of a goddess. If that deity was your coworker.<br/><br/>Chloe sits comfortably on the employee bathroom's toilet, browsing on her phone. You have no clue how long she's been here, but you can imagine she's been slacking on the job from how you know her. Her work pants and light blue panties are around her ankles, and her pale, skinny legs don't seem to be going anywhere quickly.<br/><br/>You can make your way over to her {object:pants3}, or head back under the {object:door}.]]></description>
    <descprefix>You are on the floor of the</descprefix>
    <alias>employee bathroom</alias>
    <object name="pants3">
      <alias>pants</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>She's nude from the waist down.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climbin type="script">
        msg ("You climb in Chloe's black pants, entering the crotch.")
        wait {
          ClearScreen
          MoveObject (player, employee panties)
        }
      </climbin>
    </object>
    <object name="door">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <look>You can walk under it again.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <walkunder type="script">
        msg ("You decide you don't want to perv on Chloe.")
        wait {
          ClearScreen
          MoveObject (player, break room floor)
        }
      </walkunder>
    </object>
  </object>
  <object name="employee panties">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are in the crotch of the</descprefix>
    <alias>employee's panties</alias>
    <description><![CDATA[<br/>You land in her panties comfortably.<br/><br/>The thong is warm from Chloe's body heat, the light blue cotton provides a nice place for you to rest. You look up to see her still browsing her phone, you doubt she's even still using the bathroom. Her skinny legs tower over on each side of you like skyscrapers, you'd have to climb them to reach the toilet. The creator of the game wanted to push an update out, so you imagine there isn't a timer-related event here.<br/><br/>You can climb her {object:legs}, or climb out of her {object:thong}.]]></description>
    <object name="legs">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Chloe's a slimmer girl, and her legs show it.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <climb type="script">
        msg ("You climb up Chloe's smooth legs, praying to god that she doesn't swat you off like a bug.")
        wait {
          ClearScreen
          MoveObject (player, toilet seat)
        }
      </climb>
    </object>
    <object name="thong">
      <look>You're glad it isn't disgusting.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <smell type="script">
        msg ("You take a deep whiff of your coworker's thong, and smell the laundry detergent she uses, as well as a hint of womanly musk.")
      </smell>
      <climbout type="script">
        msg ("You decide to quit perving on Chloe and climb out of her underwear.")
        wait {
          ClearScreen
          MoveObject (player, employee bathroom1)
        }
      </climbout>
    </object>
  </object>
  <object name="toilet seat">
    <description><![CDATA[<br/>You leap off Chloe's knee and onto the middle of the toilet seat. Trying not to imagine how much bacteria is on this thing, you get a bearing on your surroundings.<br/><br/>Your coworker is still browsing on her phone, her crotch being directly in front of you and her gargantuan ass suspended over the toilet bowl below you. Speaking of the toilet bowl, it's filled with her light yellow piss, the smell of urine wafting up from the water in the porcelain throne. Chances are your body sticks out on the white surface of the toilet, so now would be a good chance to get the giant girl's attention.<br/><br/>You can interact with {object:employee}, her {object:leg1}, and if you're feeling suicidal you can jump into the {object:toilet bowl}.]]></description>
    <descprefix>You are on top of the</descprefix>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <object name="employee">
      <alias>Chloe</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>Her eyes are still glued to her phone, her free hand playing with her blonde hair.</look>
      <screamat type="script"><![CDATA[
        if (GetBoolean(employee, "flush")) {
          msg ("No chance she can hear you over the toilet flushing.")
        }
        else {
          firsttime {
            msg ("You scream at the giant girl, the sound of TikToks drowning out your pathetic vocalizations.")
          }
          otherwise {
            msg ("You look up at Chloe and keep screaming, now jumping up and down and waving your hands. Suddenly, her eyes look back at you, an expression of curiosity on her face. Her massive hand comes down to reach for you.")
            wait {
              msg ("<br/>Her curious expression turns into a smirk, and you watch in horror as she flicks you into the toilet bowl.")
              wait {
                ClearScreen
                MoveObject (player, employee toilet)
              }
            }
          }
        }
      ]]></screamat>
    </object>
    <object name="leg1">
      <alias>leg</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>Her pasty legs lead up to thicker thighs.</look>
      <climbdown type="script">
        msg ("You decide that you don't want to risk dying in the dirty toilet.")
        wait {
          ClearScreen
          MoveObject (player, employee panties)
        }
      </climbdown>
    </object>
    <object name="toilet bowl">
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <look>Disgusting.</look>
      <jumpin type="script">
        firsttime {
          msg ("You attempt to jump in, but Chloe flushes the toilet before you can even start your running leap.")
          SetObjectFlagOn (employee, "flush")
        }
        otherwise {
          msg ("Seeing that the water has cleared up, you take your suicidal leap into the now clean toilet bowl. Just as you do this, Chloe lifts her ass off the seat, getting ready to leave.")
          wait {
            ClearScreen
            MoveObject (player, manager toilet1)
          }
        }
      </jumpin>
    </object>
  </object>
  <object name="employee toilet">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <descprefix>You are inside the</descprefix>
    <alias>toilet bowl</alias>
    <description><![CDATA[<br/>How could she do that to you?<br/><br/>You land in the pissy water with a splash, struggling to resurface. You gag the foul piss out of your system when you breach the surface of the toilet water, looking up at your new sky. The inside of the toilet bowl is nasty, and that's only added to by Chloe's giant genitals dangling over you, threatening to release unspeakable horrors onto your tiny body. Fortunately for you, she looks like she's done, but that also means she's going to flush soon.<br/><br/>You can see {object:piss} and Chloe's {object:pussy} from the limited light down here.]]></description>
    <enter type="script">
      EnableTimer (employee flush)
    </enter>
    <object name="piss">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <look>You're basically bathing in it.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <struggle>The only thing you're struggling to do is stay afloat.</struggle>
      <drink>You already received liters of this in your mouth, but you take another mouthful. Your brain overloads from the acrid taste.</drink>
    </object>
    <object name="pussy">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>Her shaved pussy just released this ocean of piss.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <screamat>She can't hear you scream, but it feels good.</screamat>
    </object>
    <object name="toilet paper">
      <visible type="boolean">false</visible>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <look>It's soaked in urine, with a little bit floating above.</look>
      <climb>You attempt to climb the used toilet paper, but due to the fact that it's soaked you just can't.</climb>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <verb>
    <property>jumpin</property>
    <pattern>jump in</pattern>
    <defaultexpression>"You can't jump in " + object.article + "."</defaultexpression>
  </verb>
  <object name="manager toilet1">
    <alias>empty toilet</alias>
    <descprefix>You are inside</descprefix>
    <description><![CDATA[<br/>Thank god the toilet is empty.<br/><br/>You resurface from your cannonball into the toilet water. Looking up from the filthy inside, you can see nothing but the ceiling. Off in the distance, you hear Chloe washing her hands, and you know it's just a matter of time before she leaves and another employee plops their ass down on the toilet.<br/><br/>You can see {object:toilet water}.]]></description>
    <enter type="script">
      EnableTimer (manager toilet entrance)
    </enter>
    <onexit type="script">
      DisableTimer (manager toilet entrance)
    </onexit>
    <object name="toilet water">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <look>Clean, for now.</look>
      <splash>Your microscopic hands make pitiful splashes in the ocean-sized toilet bowl.</splash>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
    </object>
  </object>
  <verb>
    <property>splash</property>
    <pattern>splash</pattern>
    <defaultexpression>"You can't splash " + object.article + "."</defaultexpression>
  </verb>
  <object name="manager toilet2">
    <description><![CDATA[<br/>Most of the light in the toilet bowl is eclipsed when Nicole's ass makes contact with the seat. You can't believe this is real.<br/><br/>Your giant manager shuffles her hips, revealing a better view of her equally giant asshole. You were praying that she just had to piss, to spare you a miserable death, but from the way the sweaty, puckered ring is moving that doesn't seem to be the case. Her pussy is equally big, and past her fat lips, you see Nicole whip out her phone and begin scrolling through Facebook.<br/><br/>You can see her {object:asshole2} directly above you, and the {object:back of the toilet} behind you.]]></description>
    <objectslistprefix>You can barely see</objectslistprefix>
    <descprefix>You are inside of the</descprefix>
    <alias>toilet Nicole is using</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <enter type="script">
      EnableTimer (manager shit)
    </enter>
    <object name="asshole2">
      <alias>asshole</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <look>A giant circle of filthy wrinkled skin.</look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <screamat>She can't hear you, but the anus seems to wink in response, taunting you.</screamat>
    </object>
    <object name="back of the toilet">
      <look>It feels safer than the center of the bowl.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climb type="script"><![CDATA[
        firsttime {
          msg ("You begin swimming towards the back of the toilet, only stopping when you release how little you've made it there.")
        }
        otherwise {
          msg ("You don't give up, and you continue swimming to the back of the bowl, making it there in no time. You begin to climb it.")
          DisableTimer (manager shit)
          wait {
            msg ("<br/>Unfortunately for you, you were completely oblivious to the threat above you, only looking up to see Nicole's stretching asshole at the last moment. The skyscraper-sized log of waste was then pinched off by your manager's giant asshole and sent into freefall straight above you.<br/><br/>You simply watch in awe and horror like a deer in headlights before it hits you. The falling shit collides with you and explodes your microscopic body between it and the back of the toilet, leaving your tiny red mush embedded in the brown smear it leaves as it slides down into the water below. The naked eye wouldn't be able to distinguish you from your manager's disgusting waste.<br/><br/>When Nicole finished her massacre of a dump, she examined the crime scene. She grimaced at the shitty smear; it wouldn't go away when she flushed.<br/><br/>She'd stroll out into the restaurant to find you, to humiliate you by making you clean the toilet. She'd be disappointed when she couldn't find you, unaware that she gave you an even more humiliating end.")
            finish
          }
        }
      ]]></climb>
    </object>
    <object name="shit">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>her</prefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look>The dark brown log is disgusting.</look>
      <visible type="boolean">false</visible>
      <climb type="script"><![CDATA[
        msg ("You sink your hand's into your manager's warm shit, smearing your body against it as you inchworm your way up. You gag and retch as you smear yourself in literal shit, and now that you're coated in it you feel no better than a piece of shit. You make it to the top, though.")
        DisableTimer (manager shit)
        wait {
          msg ("<br/>Your eyes covered in waste, you don't even see the second piece of Nicole's shit flying towards you. Gravity inevitably kills you as the piece of shit makes contact, shattering your bones and squishing your organs like they're nothing. You're now just a microscopic red splatter between her logs, completely unnoticeable.<br/><br/>The chance that Nicole would even find out what she did would be lowered to zero when she blanketed your tomb in a wad of shit-stained toilet paper. You wouldn't even want her to know, she'd probably get some sick kick out of it.<br/><br/>With a flick of the handle, she essentially unawarely fires you.")
          finish
        }
      ]]></climb>
    </object>
    <object name="toilet paper1">
      <alias>toilet paper</alias>
      <visible type="boolean">false</visible>
      <look>Coated in shit, but so are you.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <climb>You attempt to climb the toilet paper, but you just end up smearing yourself in Nicole's shit.</climb>
    </object>
  </object>
  <type name="defaultgame">
    <enablehyperlinks />
    <echocommand />
    <echohyperlinks />
    <showdescriptiononenter />
    <autodescription />
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">12</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <backgroundimage type="string"></backgroundimage>
    <setbackgroundopacity type="boolean">false</setbackgroundopacity>
    <backgroundopacity type="double">0.5</backgroundopacity>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks />
    <compassdirections type="stringlist">
      <value>northwest</value>
      <value>north</value>
      <value>northeast</value>
      <value>west</value>
      <value>east</value>
      <value>southwest</value>
      <value>south</value>
      <value>southeast</value>
      <value>up</value>
      <value>down</value>
      <value>in</value>
      <value>out</value>
    </compassdirections>
    <clearframe />
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="stringlist">
      <value>all</value>
      <value>everything</value>
    </allobjects>
    <parserignoreprefixes type="stringlist">
      <value>the</value>
      <value>a</value>
      <value>an</value>
    </parserignoreprefixes>
    <displayroomdescriptiononstart />
    <showpanes />
    <showcommandbar />
    <showlocation />
    <statusandcompassattop type="boolean">false</statusandcompassattop>
    <turnoffcompass type="boolean">false</turnoffcompass>
    <turnoffinventory type="boolean">false</turnoffinventory>
    <turnoffplacesandobjects type="boolean">false</turnoffplacesandobjects>
    <borderlesscursor type="boolean">false</borderlesscursor>
    <colourblend type="boolean">false</colourblend>
    <commandpane type="boolean">false</commandpane>
    <customstatuspane type="boolean">false</customstatuspane>
    <panestheme>Classic</panestheme>
    <shadowbox type="boolean">false</shadowbox>
    <respondtogridclicks type="boolean">false</respondtogridclicks>
    <commandcursor><![CDATA[>]]></commandcursor>
    <moneyformat>$!</moneyformat>
    <classiclocation />
    <turnoffsavebutton type="boolean">false</turnoffsavebutton>
    <mapexitwidth type="int">1</mapexitwidth>
    <mapexitcolour>Black</mapexitcolour>
    <setcustomwidth type="boolean">false</setcustomwidth>
    <customwidth type="int">950</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <custompaddingright type="int">20</custompaddingright>
    <showborder />
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <showmoney type="boolean">false</showmoney>
    <showtitle />
    <autodisplayverbs />
    <clearscreenonroomenter type="boolean">false</clearscreenonroomenter>
    <attr name="autodescription_youarein" type="int">1</attr>
    <attr name="autodescription_youcansee" type="int">2</attr>
    <attr name="autodescription_youcango" type="int">3</attr>
    <attr name="autodescription_description" type="int">4</attr>
    <autodescription_youarein_useprefix />
    <attr name="autodescription_youarein_newline" type="boolean">false</attr>
    <attr name="autodescription_youcansee_newline" type="boolean">false</attr>
    <attr name="autodescription_youcango_newline" type="boolean">false</attr>
    <attr name="autodescription_description_newline" type="boolean">false</attr>
    <changeroom_newline />
    <attr name="command_newline" type="boolean">false</attr>
    <description type="string"></description>
    <languageid>en</languageid>
    <gridmap type="boolean">false</gridmap>
    <mapscale type="int">30</mapscale>
    <mapsize type="int">300</mapsize>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <attr name="feature_pictureframe" type="boolean">false</attr>
    <attr name="feature_limitinventory" type="boolean">false</attr>
    <attr name="feature_asktell" type="boolean">false</attr>
    <attr name="feature_annotations" type="boolean">false</attr>
    <attr name="feature_advancedwearables" type="boolean">false</attr>
    <attr name="feature_advancedscripts" type="boolean">false</attr>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <multiplecommands type="boolean">false</multiplecommands>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg;*.ogg;*.ogv</publishfileextensions>
    <nohtmllog type="boolean">false</nohtmllog>
    <notranscript type="boolean">false</notranscript>
    <suppressturnscripts />
    <attr name="feature_devmode" type="boolean">false</attr>
    <changedpov type="script">
      InitPOV (oldvalue, game.pov)
    </changedpov>
    <textprocessorcommands type="scriptdictionary">
      <item key="if ">
        game.textprocessorcommandresult = ProcessTextCommand_If (section, data)
      </item>
      <item key="either ">
        game.textprocessorcommandresult = ProcessTextCommand_Either (section, data)
      </item>
      <item key="here ">
        game.textprocessorcommandresult = ProcessTextCommand_Here (section, data)
      </item>
      <item key="nothere ">
        game.textprocessorcommandresult = ProcessTextCommand_Here (section, data)
      </item>
      <item key="popup:">
        game.textprocessorcommandresult = ProcessTextCommand_Popup (section, data)
      </item>
      <item key="i:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="b:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="s:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="u:">
        game.textprocessorcommandresult = ProcessTextCommand_Format (section, data)
      </item>
      <item key="colour:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="color:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="back:">
        game.textprocessorcommandresult = ProcessTextCommand_Colour (section, data)
      </item>
      <item key="object:">
        game.textprocessorcommandresult = ProcessTextCommand_Object (section, data)
      </item>
      <item key="command:">
        game.textprocessorcommandresult = ProcessTextCommand_Command (section, data)
      </item>
      <item key="page:">
        game.textprocessorcommandresult = ProcessTextCommand_Command (section, data)
      </item>
      <item key="exit:">
        game.textprocessorcommandresult = ProcessTextCommand_Exit (section, data)
      </item>
      <item key="once:">
        game.textprocessorcommandresult = ProcessTextCommand_Once (section, data)
      </item>
      <item key="notfirst:">
        game.textprocessorcommandresult = ProcessTextCommand_NotFirst (section, data)
      </item>
      <item key="random:">
        game.textprocessorcommandresult = ProcessTextCommand_Random (section, data)
      </item>
      <item key="rndalt:">
        game.textprocessorcommandresult = ProcessTextCommand_RandomAlias (section, data)
      </item>
      <item key="img:">
        game.textprocessorcommandresult = ProcessTextCommand_Img (section, data)
      </item>
      <item key="counter:">
        game.textprocessorcommandresult = ProcessTextCommand_Counter (section, data)
      </item>
      <item key="select:">
        game.textprocessorcommandresult = ProcessTextCommand_Select (section, data)
      </item>
      <item key="eval:">
        game.textprocessorcommandresult = ProcessTextCommand_Eval (section, data)
      </item>
      <item key="=">
        game.textprocessorcommandresult = ProcessTextCommand_Eval (section, data)
      </item>
    </textprocessorcommands>
  </type>
  <type name="theme_novella">
    <setcustompadding />
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth />
    <customwidth type="int">650</customwidth>
    <custompaddingtop type="int">60</custompaddingtop>
  </type>
  <type name="theme_retro">
    <defaultbackground>Black</defaultbackground>
    <defaultforeground>White</defaultforeground>
    <defaultlinkforeground>White</defaultlinkforeground>
    <defaultfont>'Lucida Console', Monaco, monospace</defaultfont>
    <defaultwebfont>Press Start 2P</defaultwebfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>'Lucida Console', Monaco, monospace</menufont>
    <menubackground>Black</menubackground>
    <menuforeground>White</menuforeground>
    <menuhoverbackground>GreenYellow</menuhoverbackground>
  </type>
  <type name="theme_typewriter">
    <setcustompadding />
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth />
    <customwidth type="int">650</customwidth>
    <custompaddingtop type="int">60</custompaddingtop>
    <defaultfont>'Courier New', Courier, monospace</defaultfont>
    <defaultwebfont>Special Elite</defaultwebfont>
  </type>
  <type name="theme_hotdogstand">
    <defaultbackground>Red</defaultbackground>
    <defaultforeground>Yellow</defaultforeground>
    <defaultlinkforeground>Yellow</defaultlinkforeground>
    <defaultfont>'Comic Sans MS', cursive, sans-serif</defaultfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>Impact, Charcoal, sans-serif</menufont>
    <menubackground>Red</menubackground>
    <menuforeground>Yellow</menuforeground>
    <menuhoverbackground>Black</menuhoverbackground>
    <menuhoverforeground>Yellow</menuhoverforeground>
  </type>
  <type name="defaultobject">
    <visible />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Use</value>
      <value>Drop</value>
    </inventoryverbs>
    <take type="boolean">false</take>
    <use type="boolean">false</use>
    <givesingle type="boolean">false</givesingle>
    <drop />
    <gender>it</gender>
    <article>it</article>
    <possessive>its</possessive>
    <wornmodifier>worn</wornmodifier>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>You are in</descprefix>
    <objectslistprefix>You can see</objectslistprefix>
    <exitslistprefix>You can go</exitslistprefix>
    <contentsprefix>containing</contentsprefix>
    <description type="string"></description>
    <attr name="implementation_notes" type="string"></attr>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix />
    <volume type="int">0</volume>
    <price type="int">0</price>
    <dark type="boolean">false</dark>
    <lightstrength type="string"></lightstrength>
    <darklevel type="boolean">false</darklevel>
    <attr name="grid_width" type="int">1</attr>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_fill">White</attr>
    <attr name="grid_border">Black</attr>
    <attr name="grid_borderwidth" type="int">1</attr>
    <attr name="grid_bordersides" type="int">15</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_label" type="string"></attr>
    <attr name="grid_label_colour">Black</attr>
    <grid_parent_offset_auto />
    <attr name="grid_parent_offset_x" type="int">0</attr>
    <attr name="grid_parent_offset_y" type="int">0</attr>
    <attr name="pov_alias">me</attr>
    <pov_alt type="stringlist">
      <value>me</value>
      <value>myself</value>
      <value>self</value>
    </pov_alt>
    <attr name="pov_look">Looking good.</attr>
    <attr name="pov_gender">you</attr>
    <attr name="pov_article">yourself</attr>
    <attr name="pov_possessive">your</attr>
    <attr name="feature_usegive" type="boolean">false</attr>
    <attr name="feature_container" type="boolean">false</attr>
    <attr name="feature_switchable" type="boolean">false</attr>
    <attr name="feature_edible" type="boolean">false</attr>
    <attr name="feature_player" type="boolean">false</attr>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <visited type="boolean">false</visited>
    <hasbeenmoved type="boolean">false</hasbeenmoved>
    <timesexamined type="int">0</timesexamined>
    <attr name="not_all" type="boolean">false</attr>
    <changedparent type="script">
      if (game.pov = this) {
        if (IsDefined("oldvalue")) {
          OnEnterRoom (oldvalue)
        }
        else {
          OnEnterRoom (null)
        }
        if (game.gridmap) {
          MergePOVCoordinates
        }
      }
      this.hasbeenmoved = true
    </changedparent>
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }
    </changedswitchedon>
  </type>
  <type name="defaultexit">
    <displayverbs type="stringlist">
      <value>Go to</value>
    </displayverbs>
    <visible />
    <scenery type="boolean">false</scenery>
    <locked type="boolean">false</locked>
    <lockmessage>That way is locked.</lockmessage>
    <lookonly type="boolean">false</lookonly>
    <runscript type="boolean">false</runscript>
    <lightstrength type="string"></lightstrength>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_offset_x" type="int">0</attr>
    <attr name="grid_offset_y" type="int">0</attr>
  </type>
  <type name="direction">
    <displayverbs type="stringlist">
      <value>Go</value>
    </displayverbs>
  </type>
  <type name="compassdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="updowndirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="inoutdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="northwestdirection">
    <inherit name="compassdirection" />
    <alias>northwest</alias>
    <alt type="stringlist">
      <value>nw</value>
    </alt>
  </type>
  <type name="northdirection">
    <inherit name="compassdirection" />
    <alias>north</alias>
    <alt type="stringlist">
      <value>n</value>
    </alt>
  </type>
  <type name="northeastdirection">
    <inherit name="compassdirection" />
    <alias>northeast</alias>
    <alt type="stringlist">
      <value>ne</value>
    </alt>
  </type>
  <type name="westdirection">
    <inherit name="compassdirection" />
    <alias>west</alias>
    <alt type="stringlist">
      <value>w</value>
    </alt>
  </type>
  <type name="eastdirection">
    <inherit name="compassdirection" />
    <alias>east</alias>
    <alt type="stringlist">
      <value>e</value>
    </alt>
  </type>
  <type name="southwestdirection">
    <inherit name="compassdirection" />
    <alias>southwest</alias>
    <alt type="stringlist">
      <value>sw</value>
    </alt>
  </type>
  <type name="southdirection">
    <inherit name="compassdirection" />
    <alias>south</alias>
    <alt type="stringlist">
      <value>s</value>
    </alt>
  </type>
  <type name="southeastdirection">
    <inherit name="compassdirection" />
    <alias>southeast</alias>
    <alt type="stringlist">
      <value>se</value>
    </alt>
  </type>
  <type name="updirection">
    <inherit name="updowndirection" />
    <alias>up</alias>
    <alt type="stringlist">
      <value>u</value>
    </alt>
  </type>
  <type name="downdirection">
    <inherit name="updowndirection" />
    <alias>down</alias>
    <alt type="stringlist">
      <value>d</value>
    </alt>
  </type>
  <type name="indirection">
    <inherit name="inoutdirection" />
    <alias>in</alias>
    <alt type="stringlist">
      <value></value>
    </alt>
  </type>
  <type name="outdirection">
    <inherit name="inoutdirection" />
    <alias>out</alias>
    <alt type="stringlist">
      <value>o</value>
    </alt>
  </type>
  <type name="defaultcommand">
    <pattern type="simplepattern"></pattern>
  </type>
  <type name="defaultverb">
    <separator>with; using</separator>
    <multiobjectmenu>With which object?</multiobjectmenu>
    <multiobjectdefault>That doesn't work.</multiobjectdefault>
    <multiobjectmenuempty>There are no objects available to do that with.</multiobjectmenuempty>
    <script type="script"><![CDATA[
      if (not IsDefined("object2")) {
        object2 = null
      }
      switch (TypeOf(object, this.property)) {
        case ("script") {
          if (object2 = null) {
            do (object, this.property)
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("string") {
          if (object2 = null) {
            msg (GetString(object, this.property))
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("scriptdictionary") {
          if (object2 <> null) {
            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)
          }
          else {
            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())
            excludelist = NewObjectList()
            list add (excludelist, game.pov)
            list add (excludelist, object)
            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
            if (ListCount(candidates) = 0) {
              msg (this.multiobjectmenuempty)
            }
            else {
              game.pov.multiverb = this.property
              game.pov.multiverbobject = object
              game.pov.multiverbobjectdefault = this.multiobjectdefault
              ShowMenu (this.multiobjectmenu, candidates, true) {
                if (result <> null) {
                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)
                  game.pov.multiverb = null
                  game.pov.multiverbobject = null
                  game.pov.multiverbobjectdefault = null
                }
              }
            }
          }
        }
        case ("null") {
          if (this.defaulttext <> null) {
            msg (this.defaulttext)
          }
          else if (this.defaulttemplate <> null) {
            msg (DynamicTemplate(this.defaulttemplate, object))
          }
          else if (this.defaultexpression <> null) {
            params = NewDictionary()
            dictionary add (params, "object", object)
            msg (Eval(this.defaultexpression, params))
          }
          else {
            error ("No verb response defined")
          }
        }
        default {
          error ("No verb response defined")
        }
      }
    ]]></script>
  </type>
  <type name="npc_type">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <not_all />
  </type>
  <type name="plural_npc_type">
    <inherit name="npc_type" />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
  </type>
  <type name="male">
    <inherit name="npc_type" />
    <gender>he</gender>
    <article>him</article>
    <possessive>his</possessive>
    <wornmodifier>worn</wornmodifier>
  </type>
  <type name="namedmale">
    <inherit name="male" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  <type name="female">
    <inherit name="npc_type" />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>she</gender>
    <article>her</article>
    <possessive>her</possessive>
    <wornmodifier>worn</wornmodifier>
  </type>
  <type name="namedfemale">
    <inherit name="female" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  <type name="plural">
    <gender>they</gender>
    <article>them</article>
    <possessive>their</possessive>
    <wornmodifier>worn</wornmodifier>
  </type>
  <type name="maleplural">
    <inherit name="plural_npc_type" />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>they</gender>
    <article>them</article>
    <possessive>their</possessive>
    <wornmodifier>worn</wornmodifier>
  </type>
  <type name="femaleplural">
    <inherit name="plural_npc_type" />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>they</gender>
    <article>them</article>
    <possessive>their</possessive>
    <wornmodifier>worn</wornmodifier>
  </type>
  <type name="openable">
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_base">
    <container />
  </type>
  <type name="container_closed">
    <inherit name="container_base" />
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_open">
    <inherit name="container_base" />
    <isopen />
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="surface">
    <inherit name="container_base" />
    <isopen />
    <transparent />
    <contentsprefix>on which there is</contentsprefix>
  </type>
  <type name="container">
    <inherit name="container_open" />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_limited">
    <inherit name="container" />
    <maxobjects type="int">1</maxobjects>
    <maxvolume type="int">100</maxvolume>
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
    <addscript type="script"><![CDATA[
      activecontainer = this
      correct = true
      while (DoesInherit(activecontainer, "container_base")) {
        if (HasInt(activecontainer, "maxvolume")) {
          if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
            correct = false
            if (HasString(this, "containerfullmessage")) {
              message = this.containerfullmessage
            }
            else {
              message = DynamicTemplate("ContainerFull", this)
            }
          }
        }
        activecontainer = activecontainer.parent
      }
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        correct = false
        if (HasString(this, "containermaxobjects")) {
          message = this.containermaxobjects
        }
        else {
          message = DynamicTemplate("MaxObjectsInContainer", this)
        }
      }
      if (correct = false) {
        msg (message)
      }
      else {
        if (HasScript(object, "drop")) {
          params = NewDictionary()
          dictionary add (params, "destination", this)
          do (object, "drop", params)
        }
        else {
          object.parent = this
          msg (Template("Done"))
        }
      }
    ]]></addscript>
  </type>
  <type name="container_lockable">
    <locked />
    <nokeymessage>You do not have the key.</nokeymessage>
    <unlockmessage>Unlocked.</unlockmessage>
    <lockmessage>Locked.</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen />
    <autounlock />
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and AllKeysAvailable(this)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
  </type>
  <type name="defaultplayer">
    <money type="int">0</money>
  </type>
  <type name="switchable">
    <switchedon type="boolean">false</switchedon>
    <cannotswitchon type="string"></cannotswitchon>
    <displayverbs type="stringlist">
      <value>Switch on</value>
      <value>Switch off</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Switch on</value>
      <value>Switch off</value>
    </inventoryverbs>
    <turnon type="script">
      if (ListContains(ScopeReachable(), this)) {
        if (this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOn", this))
        }
        else if (not this.cannotswitchon = "") {
          msg (this.cannotswitchon)
        }
        else {
          if (HasString(this, "switchonmsg")) {
            msg (this.switchonmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOn", this))
          }
          this.switchedon = true
        }
      }
      else {
        msg (DynamicTemplate("DefaultTurnOn", this))
      }
    </turnon>
    <turnoff type="script">
      if (ListContains(ScopeReachable(), this)) {
        if (not this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOff", this))
        }
        else {
          if (HasString(this, "switchoffmsg")) {
            msg (this.switchoffmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOff", this))
          }
          this.switchedon = false
        }
      }
      else {
        msg (DynamicTemplate("DefaultTurnOff", this))
      }
    </turnoff>
  </type>
  <type name="edible">
    <eathealth type="int">0</eathealth>
    <displayverbs type="stringlist">
      <value>Eat</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Eat</value>
    </inventoryverbs>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(game.pov, "health")) {
        game.pov.health = game.pov.health + this.eathealth
      }
      destroy (this.name)
    </eat>
  </type>
  <type name="gridborder_path_ew">
    <attr name="grid_bordersides" type="int">10</attr>
  </type>
  <type name="gridborder_path_e">
    <attr name="grid_bordersides" type="int">11</attr>
  </type>
  <type name="gridborder_path_w">
    <attr name="grid_bordersides" type="int">14</attr>
  </type>
  <type name="gridborder_path_ns">
    <attr name="grid_bordersides" type="int">5</attr>
  </type>
  <type name="gridborder_path_n">
    <attr name="grid_bordersides" type="int">7</attr>
  </type>
  <type name="gridborder_path_s">
    <attr name="grid_bordersides" type="int">13</attr>
  </type>
  <type name="wearable">
    <usestandardverblist />
    <worn type="boolean">false</worn>
    <armour type="int">0</armour>
    <attr name="multistate_status" type="int">0</attr>
    <invverbs type="string"></invverbs>
    <wornverbs type="string"></wornverbs>
    <removeable />
    <attr name="wear_layer" type="int">2</attr>
    <wear_adjverbs />
    <wear_slots type="stringlist" />
    <inventoryverbs type="stringlist">
      <value>Wear</value>
      <value>Remove</value>
    </inventoryverbs>
    <take type="script">
      msg (DynamicTemplate("TakeSuccessful", this))
      this.parent = game.pov
      SetVerbs
    </take>
    <colourmylistalias type="script"><![CDATA[
      if (HasString(this, "alias")) {
        s = CapFirst(this.alias)
      }
      else {
        s = CapFirst(this.name)
      }
      if (HasString(this, "listalias")) {
        s = this.listalias
      }
      this.listalias = "<span style=\"color:blue\">" + s + "</span>"
    ]]></colourmylistalias>
  </type>
  <type name="devmode">
    <devmode_active />
    <attr name="devmode_changepov" type="boolean">false</attr>
    <attr name="devmode_changepovpos" type="boolean">false</attr>
    <attr name="devmode_setinitscript" type="boolean">false</attr>
    <devmode_setverbs />
    <devmode_showinfos />
    <devmode_showdebugtable />
    <devmode_ownfontcolour />
    <attr name="devmode_fontcolour">Green</attr>
    <devmode_attributes type="stringdictionary" />
    <devmode_verbs type="stringlist">
      <value>#drop</value>
      <value>#take</value>
      <value>#to</value>
      <value>#open</value>
      <value>#close</value>
      <value>#on</value>
      <value>#off</value>
    </devmode_verbs>
  </type>
  <function name="GetDefaultPrefix" parameters="obj" type="string"><![CDATA[
    if (Instr("aeiou", LCase(Left(GetDisplayAlias(obj), 1))) > 0) {
      return ("an")
    }
    else {
      return ("a")
    }
  ]]></function>
  <function name="WriteVerb" parameters="obj, verb" type="string">
    return (CapFirst(obj.gender) + " " + Conjugate(obj, verb))
  </function>
  <function name="Conjugate" parameters="obj, verb" type="string">
    gender = obj.gender
    if (gender = "he" or gender = "she") {
      gender = "it"
    }
    switch (verb) {
      case ("be") {
        switch (gender) {
          case ("i") {
            return ("am")
          }
          case ("you") {
            return ("are")
          }
          case ("it") {
            return ("is")
          }
          case ("we") {
            return ("are")
          }
          case ("they") {
            return ("are")
          }
          default {
            return ("is")
          }
        }
      }
      case ("do") {
        switch (gender) {
          case ("i") {
            return ("do")
          }
          case ("you") {
            return ("do")
          }
          case ("it") {
            return ("does")
          }
          case ("we") {
            return ("do")
          }
          case ("they") {
            return ("do")
          }
          default {
            return ("do")
          }
        }
      }
      default {
        if (gender = "it") {
          if (EndsWith(verb, "y") and not EndsWith(verb, "ey")) {
            return (Mid(verb, 1, Lengthof(verb) - 1) + "ies")
          }
          else {
            return (verb + "s")
          }
        }
        else {
          return (verb)
        }
      }
    }
  </function>
  <function name="Possessive" parameters="possessive, object" type="string">
    return (possessive + " " + GetDisplayAlias(object))
  </function>
  <function name="ToWords" parameters="number" type="string"><![CDATA[
    if (not TypeOf(number) = "int") {
      error ("ToWords can only handle ints")
    }
    number_units = Split("zero;one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty", ";")
    number_tens = Split("twenty;thirty;forty;fifty;sixty;seventy;eighty;ninety", ";")
    s = ""
    if (number < 0) {
      s = "minus "
      number = -number
    }
    if (number < 2000) {
      hundreds = number / 100
      number = number % 100
      if (hundreds > 0) {
        s = s + StringListItem(number_units, hundreds) + " hundred "
        if (number > 0) {
          s = s + "and "
        }
      }
      if (number < 20) {
        if (not number = 0 or s = "") {
          s = s + StringListItem(number_units, number)
        }
      }
      else {
        units = number % 10
        tens = (number / 10) % 10
        s = s + StringListItem(number_tens, tens - 2)
        if (not units = 0) {
          s = s + StringListItem(number_units, units)
        }
      }
    }
    else {
      s = ToString(number)
    }
    return (Trim(s))
  ]]></function>
  <function name="GetDefiniteName" parameters="obj" type="string">
    result = GetDisplayAlias(obj)
    if (GetBoolean(obj, "usedefaultprefix") or not obj.prefix = null) {
      result = "the " + result
    }
    return (result)
  </function>
  <function name="ListObjectContents" parameters="object"><![CDATA[
    if ((GetBoolean(object, "isopen") or GetBoolean(object, "transparent")) and GetBoolean(object, "listchildren")) {
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (HasString(object, "listchildrenprefix")) {
        listprefix = object.listchildrenprefix
      }
      else {
        listprefix = DynamicTemplate("ObjectContains", object)
      }
      list = FormatObjectList(listprefix, object, Template("And"), ".")
      if (list <> "") {
        msg (list)
      }
    }
  ]]></function>
  <function name="DoTake" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (object.parent = game.pov) {
      msg (prefix + DynamicTemplate("AlreadyTaken", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (BlockingMessage(object, prefix))
    }
    else {
      volume = 0
      continue = true
      foreach (obj, GetAllChildObjects(game.pov)) {
        if (HasInt(obj, "volume")) {
          volume = volume + obj.volume
        }
      }
      if (not Contains(game.pov, object)) {
        volume = volume + GetVolume(object,true)
      }
      if (HasInt(game.pov, "maxvolume")) {
        if (volume > game.pov.maxvolume) {
          continue = false
          if (HasString(game.pov, "containerfullmessage")) {
            message = prefix + game.pov.containerfullmessage
          }
          else {
            message = prefix + DynamicTemplate("FullInventory", object)
          }
        }
      }
      children = GetDirectChildren(game.pov)
      if (HasInt(game.pov, "maxobjects")) {
        if (game.pov.maxobjects > 0) {
          if (ListCount(children) >= game.pov.maxobjects) {
            continue = false
            if (HasString(game.pov, "containermaxobjects")) {
              message = prefix + game.pov.containermaxobjects
            }
            else {
              message = prefix + DynamicTemplate("MaxObjectsInInventory", object)
            }
          }
        }
      }
      if (continue = false) {
        msg (message)
      }
      else {
        found = true
        takemsg = object.takemsg
        switch (TypeOf(object, "take")) {
          case ("script") {
            if (ismultiple) {
              OutputTextNoBr (prefix)
            }
            do (object, "take")
            takemsg = ""
          }
          case ("boolean") {
            if (object.take = true) {
              object.parent = game.pov
              if (takemsg = null) {
                takemsg = DynamicTemplate("TakeSuccessful", object)
              }
            }
            else {
              found = false
            }
          }
          case ("string") {
            object.parent = game.pov
            takemsg = object.take
          }
          default {
            found = false
          }
        }
        if (not found and takemsg = null) {
          takemsg = DynamicTemplate("TakeUnsuccessful", object)
        }
        if (LengthOf(takemsg) > 0) {
          msg (prefix + takemsg)
        }
        if (HasScript(object, "ontake")) {
          do (object, "ontake")
        }
        if (found and GetBoolean (object, "scenery") and object.parent = game.pov) {
          object.scenery = false
        }
      }
    }
  ]]></function>
  <function name="DoDrop" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (not ListContains(ScopeInventory(), object)) {
      msg (prefix + DynamicTemplate("NotCarrying", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (BlockingMessage(object, prefix))
    }
    else {
      found = true
      dropmsg = object.dropmsg
      if (HasObject(game.pov.parent, "dropdestination")) {
        destination = game.pov.parent.dropdestination
      }
      else {
        destination = game.pov.parent
      }
      switch (TypeOf(object, "drop")) {
        case ("script") {
          if (ismultiple) {
            OutputTextNoBr (prefix)
          }
          d = NewDictionary()
          dictionary add (d, "destination", destination)
          do (object, "drop", d)
          dropmsg = ""
        }
        case ("boolean") {
          if (object.drop = true) {
            object.parent = destination
            if (dropmsg = null) {
              dropmsg = DynamicTemplate("DropSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = game.pov.parent
          dropmsg = object.drop
        }
        default {
          found = false
        }
      }
      if (not found and dropmsg = null) {
        dropmsg = DynamicTemplate("DropUnsuccessful", object)
      }
      if (LengthOf(dropmsg) > 0) {
        msg (prefix + dropmsg)
      }
      if (HasScript(object, "ondrop")) {
        do (object, "ondrop")
      }
    }
  ]]></function>
  <function name="CreateUseMenuList" parameters="object" type="objectlist">
    objectlist = NewObjectList()
    objectlist = ScopeReachableInventory()
    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())
    excludelist = NewObjectList()
    list add (excludelist, game.pov)
    list add (excludelist, object)
    candidates = NewObjectList()
    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
    return (candidates)
  </function>
  <function name="TryOpenClose" parameters="doopen, object">
    if (doopen) {
      action = "open"
      scriptaction = "openscript"
    }
    else {
      action = "close"
      scriptaction = "closescript"
    }
    if (not ListContains(ScopeReachable(), object)) {
      msg (BlockingMessage(object, ""))
    }
    else {
      found = false
      if (GetBoolean(object, action)) {
        if (doopen) {
          if (object.isopen) {
            msg (DynamicTemplate("AlreadyOpen", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              OpenObject (object)
            }
          }
        }
        else {
          if (not object.isopen) {
            msg (DynamicTemplate("AlreadyClosed", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              CloseObject (object)
            }
          }
        }
      }
      else {
        if (doopen) {
          msg (DynamicTemplate("CantOpen", object))
        }
        else {
          msg (DynamicTemplate("CantClose", object))
        }
      }
    }
  </function>
  <function name="OpenObject" parameters="object">
    if (HasString(object, "openmsg")) {
      msg (object.openmsg)
    }
    else {
      msg (DynamicTemplate("OpenSuccessful", object))
    }
    object.isopen = true
    ListObjectContents (object)
  </function>
  <function name="CloseObject" parameters="object">
    if (HasString(object, "closemsg")) {
      msg (object.closemsg)
    }
    else {
      msg (DynamicTemplate("CloseSuccessful", object))
    }
    object.isopen = false
  </function>
  <function name="CreateGiveMenuList" parameters="object" type="objectlist">
    objectlist = NewObjectList()
    objectlist = ScopeReachableInventory()
    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())
    excludelist = NewObjectList()
    list add (excludelist, game.pov)
    list add (excludelist, object)
    candidates = NewObjectList()
    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
    return (candidates)
  </function>
  <function name="HandleGiveTo" parameters="object1, object2">
    handled = false
    if (HasString(object2, "give")) {
      msg (object2.give)
      handled = true
    }
    else if (TypeOf(object2, "give") = "scriptdictionary") {
      if (DictionaryContains(object2.give, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.give, object1.name), parameters)
        handled = true
      }
      if (not handled) {
        if (HasScript(object2, "giveanything")) {
          // TO DO: Would be better to use a delegate for giveanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "giveanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "giveto")) {
        msg (object1.giveto)
        handled = true
      }
      else if (TypeOf(object1, "giveto") = "scriptdictionary") {
        if (DictionaryContains(object1.giveto, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "givetoanything")) {
            // TO DO: Would be better to use a delegate for givetoanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "givetoanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultGive", object2, object1))
    }
  </function>
  <function name="HandleUseOn" parameters="object1, object2">
    handled = false
    if (HasString(object2, "useon")) {
      msg (object2.useon)
      handled = true
    }
    else if (TypeOf(object2, "useon") = "scriptdictionary") {
      if (DictionaryContains(object2.useon, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.useon, object1.name), parameters)
        handled = true
      }
      else {
        if (HasScript(object2, "useanything")) {
          // TO DO: Would be better to use a delegate for useanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "useanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "selfuseon")) {
        msg (object1.selfuseon)
        handled = true
      }
      else if (TypeOf(object1, "selfuseon") = "scriptdictionary") {
        if (DictionaryContains(object1.selfuseon, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.selfuseon, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "selfuseanything")) {
            // TO DO: Would be better to use a delegate for selfuseanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "selfuseanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultUseOn", object2, object1))
    }
  </function>
  <function name="DoAskTell" parameters="object, text, property, defaultscript, defaulttemplate"><![CDATA[
    handled = false
    maxstrength = 0
    match = null
    text = LCase(text)
    if (TypeOf(object, property) = "scriptdictionary") {
      dictionary = GetAttribute(object, property)
      foreach (keywords, dictionary) {
        strength = GetKeywordsMatchStrength(LCase(keywords), text)
        if (strength >= maxstrength and strength>0) {
          match = ScriptDictionaryItem(dictionary, keywords)
          maxstrength = strength
        }
      }
      if (match <> null) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object)
        invoke (match, parameters)
        handled = true
      }
    }
    if (not handled) {
      if (HasScript(object, defaultscript)) {
        d = NewDictionary()
        dictionary add (d, "text", text)
        do (object, defaultscript, d)
      }
      else {
        msg (DynamicTemplate(defaulttemplate, object))
      }
    }
  ]]></function>
  <function name="GetKeywordsMatchStrength" parameters="keywords, input" type="int">
    // Keywords is the subject. We split it into individual words, and then see how well
    // the words in the input match the keywords.
    keywordlist = Split(keywords, " ")
    inputlist = Split(input, " ")
    strength = 0
    foreach (word, inputlist) {
      foreach (keyword, keywordlist) {
        if (StartsWith(word, keyword)) {
          strength = strength + LengthOf(keyword)
        }
      }
    }
    return (strength)
  </function>
  <function name="UpdateTranscriptString" parameters="data">
    game.suppressturnscripts = true
    game.transcriptstring = game.transcriptstring + data
  </function>
  <function name="BlockingMessage" parameters="blocked, prefix" type="string">
    obj = GetBlockingObject(blocked)
    if (HasString(obj, "blockingmessage")) {
      return (obj.blockingmessage)
    }
    else {
      return (prefix + DynamicTemplate("ObjectNotOpen", obj))
    }
  </function>
  <function name="RandomChance" parameters="percentile" type="boolean"><![CDATA[
    return (GetRandomInt(1,100) <= percentile)
  ]]></function>
  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>
  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>
  <function name="IncreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) + 1)
  </function>
  <function name="DecreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) - 1)
  </function>
  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>
  <function name="AddToInventory" parameters="object">
    object.parent = game.pov
  </function>
  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>
  <function name="MoveObjectHere" parameters="object">
    object.parent = game.pov.parent
  </function>
  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>
  <function name="MakeObjectVisible" parameters="object">
    object.visible = true
  </function>
  <function name="MakeObjectInvisible" parameters="object">
    object.visible = false
  </function>
  <function name="MakeExitVisible" parameters="object">
    object.visible = true
  </function>
  <function name="MakeExitInvisible" parameters="object">
    object.visible = false
  </function>
  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>
  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>
  <function name="CloneObject" parameters="object" type="object">
    newobject = ShallowClone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    if (not HasAttribute(object, "prototype")) {
      newobject.prototype = object
    }
    foreach (o, GetDirectChildren(object)) {
      o2 = CloneObject (o)
      MoveObject (o2, newobject)
    }
    return (newobject)
  </function>
  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>
  <function name="CloneObjectAndInitialise" parameters="object" type="object">
    newobject = CloneObject(object)
    if (HasScript(newobject, "_initialise_")) {
      do (newobject, "_initialise_")
    }
    return (newobject)
  </function>
  <function name="CloneObjectAndMoveHere" parameters="object" type="object">
    newobject = CloneObject(object)
    newobject.parent = game.pov.parent
    return (newobject)
  </function>
  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>
  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>
  <function name="SwitchOn" parameters="object">
    object.switchedon = true
  </function>
  <function name="SwitchOff" parameters="object">
    object.switchedon = false
  </function>
  <function name="SetDark" parameters="object">
    object.dark = true
  </function>
  <function name="SetLight" parameters="object">
    object.dark = false
  </function>
  <function name="SetObjectLightstrength" parameters="object, strength">
    if (LengthOf(strength) = 0) {
      object.lightsource = false
    }
    else {
      object.lightsource = true
    }
    object.lightstrength = strength
  </function>
  <function name="SetExitLightstrength" parameters="exit, strength">
    if (LengthOf(strength) = 0) {
      exit.lightsource = false
    }
    else {
      exit.lightsource = true
    }
    exit.lightstrength = strength
  </function>
  <function name="ChangePOV" parameters="object"><![CDATA[
    if (game.pov <> object) {
      game.pov = object
      if (game.gridmap) {
        JS.Grid_ClearAllLayers ()
        Grid_Redraw
      }
      OnEnterRoom (null)
    }
  ]]></function>
  <function name="RequestSave">
    // Deprecated
    request (RequestSave, "")
  </function>
  <function name="RequestSpeak" parameters="s">
    // Deprecated
    request (Speak, s)
  </function>
  <function name="ShowMenu" parameters="caption, options, allowCancel, callback"><![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      count = count + 1
      if (TypeOf(options) = "stringdictionary") {
        optionText = StringDictionaryItem(options, option)
        optiontag = option
        style = GetCurrentLinkTextFormat()
        list add (game.menuoptionskeys, option)
      }
      else if (TypeOf(option) = "string") {
        optionText = option
        optiontag = option
        style = GetCurrentLinkTextFormat()
        list add (game.menuoptionskeys, option)
      }
      else if (TypeOf(option) = "object") {
        optionText = GetDisplayAlias(option)
        optiontag = option.name
        colour = ""
        if (HasString(option, "linkcolour") and GetUIOption("UseGameColours") = "true") {
          colour = option.linkcolour
        }
        else {
          colour = GetLinkTextColour()
        }
        style = GetCurrentTextFormat(colour)
        list add (game.menuoptionskeys, option.name)
      }
      else {
        error ("ShowMenu cannot handle a " + TypeOf(option))
      }
      msg (count + ": <a class=\"cmdlink\" style=\"" + style + "\" onclick=\"ASLEvent('ShowMenuResponse','" + EscapeQuotes(optiontag) + "')\">" + optionText + "</a>")
    }
    EndOutputSection (outputsection)
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
  ]]></function>
  <function name="ShowMenuResponse" parameters="option">
    if (game.menucallback = null) {
      error ("Unexpected menu response")
    }
    else {
      parameters = NewStringDictionary()
      dictionary add (parameters, "result", UnescapeQuotes(option))
      script = game.menucallback
      ClearMenu
      // Added by KV to handle the new FinishTurn setup in 580
      if (not GetBoolean(game, "disambiguating")) {
        game.runturnscripts = true
      }
      game.disambiguating = false
      invoke (script, parameters)
      FinishTurn
    }
  </function>
  <function name="EscapeQuotes" parameters="s" type="string">
    s = Replace(s, "\"", "@@@doublequote@@@")
    s = Replace(s, "\'", "@@@singlequote@@@")
    return (s)
  </function>
  <function name="UnescapeQuotes" parameters="s" type="string">
    s = Replace(s, "@@@doublequote@@@", "\"")
    s = Replace(s, "@@@singlequote@@@", "\'")
    return (s)
  </function>
  <function name="JSSafe" parameters="s" type="string"><![CDATA[
    s = Replace(s, "\"", "")
    s = Replace(s, "\'", "")
    s = Replace(s, " ", "")
    s = Replace(s, ".", "")
    s = Replace(s, ",", "")
    s = Replace(s, "!", "")
    s = Replace(s, "?", "")
    s = Replace(s, "-", "")
    s = Replace(s, "/", "")
    s = Replace(s, "(", "")
    s = Replace(s, ")", "")
    s = Replace(s, "$", "")
    s = Replace(s, "%", "")
    s = Replace(s, "&", "")
    s = Replace(s, "*", "")
    s = Replace(s, "@", "")
    return (s)
  ]]></function>
  <function name="HandleMenuTextResponse" parameters="input" type="boolean"><![CDATA[
    handled = false
    if (IsInt(input)) {
      number = ToInt(input)
      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {
        handled = true
        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))
      }
    }
    return (handled)
  ]]></function>
  <function name="ClearMenu">
    HideOutputSection (game.menuoutputsection)
    game.menuoutputsection = null
    game.menuoptions = null
    game.menucallback = null
  </function>
  <function name="StartNewOutputSection" type="string">
    if (not HasInt(game, "lastoutputsection")) {
      game.lastoutputsection = 0
    }
    game.lastoutputsection = game.lastoutputsection + 1
    name = "section" + game.lastoutputsection
    JS.StartOutputSection (name)
    return (name)
  </function>
  <function name="EndOutputSection" parameters="name">
    JS.EndOutputSection (name)
  </function>
  <function name="HideOutputSection" parameters="name">
    JS.HideOutputSection (name)
  </function>
  <function name="StartTurnOutputSection">
    if (HasString(game, "currentturnoutputsection")) {
      game.lastturnoutputsection = game.currentturnoutputsection
      EndOutputSection (game.currentturnoutputsection)
    }
    game.currentturnoutputsection = StartNewOutputSection()
  </function>
  <function name="HidePreviousTurnOutput">
    if (HasString(game, "lastturnoutputsection")) {
      HideOutputSection (game.lastturnoutputsection)
    }
  </function>
  <function name="Ask" parameters="question, callback">
    options = NewStringList()
    list add (options, "Yes")
    list add (options, "No")
    game.askcallback = callback
    ShowMenu (question, options, false) {
      parameters = NewDictionary()
      if (result = "Yes") {
        boolresult = true
      }
      else {
        boolresult = false
      }
      dictionary add (parameters, "result", boolresult)
      callback = game.askcallback
      game.askcallback = null
      invoke (callback, parameters)
    }
  </function>
  <function name="AllKeysAvailable" parameters="object" type="boolean">
    if (HasObject(object, "key")) {
      if (not HasInt(object,"keycount")) {
        object.keycount = 1
        object.key1 = object.key
      }
      if (not HasObject(object, "key1")) {
        object.key1 = object.key
      }
    }
    for (x, 1, object.keycount) {
      keyname = "key" + ToString(x)
      if (HasObject(object, keyname)) {
        if (not ListContains(ScopeInventory(), GetAttribute(object, keyname))) {
          return (false)
        }
      }
    }
    return (true)
  </function>
  <function name="CreateBiExits" parameters="dir, from, to">
    create exit (dir, from, to)
    create exit (ReverseDirection(dir), to, from)
  </function>
  <function name="Equal" parameters="value1, value2" type="boolean">
    if (not TypeOf(value1) = TypeOf(value2)) {
      return (false)
    }
    if (not value1 = value2) {
      return (false)
    }
    return (true)
  </function>
  <function name="ReverseDirection" parameters="dir" type="string">
    list1 = Split("north;northeast;east;southeast;south;southwest;west;northwest;up;down;in;out", ";")
    list2 = Split("south;southwest;west;northwest;north;northeast;east;southeast;down;up;out;in", ";")
    n = IndexOf(list1, dir)
    if (not n = -1) {
      return (StringListItem(list2, n))
    }
    return (dir)
  </function>
  <function name="PadString" parameters="str, n, pad" type="string"><![CDATA[
    s = ""
    str = "" + str
    pad = "" + pad
    step = LengthOf(pad)
    if (step = 0) {
      error ("Zero length pad in PadString")
    }
    if (pad = " ") {
      pad = "&nbsp;"
    }
    for (i, 1, n - LengthOf(str), step) {
      s = s + pad
    }
    return (s + str)
  ]]></function>
  <function name="Decimalise" parameters="n, places" type="string"><![CDATA[
    negative = (n < 0)
    n = abs(n)
    if (places = 0) {
      return ("" + n)
    }
    factor = pow (10, places)
    pounds = floor(n / factor)
    pennies = n % factor
    result = pounds + "." + PadString(pennies, places, 0)
    if (negative) {
      result = "-" + result
    }
    return (result)
  ]]></function>
  <function name="DisplayNumber" parameters="n, control" type="string"><![CDATA[
    n = abs(n)
    regex = "^(?<before>\\D*)(?<padding>\\d+)(?<sep>\\D)(?<places>\\d*)(?<after>\\D*)$"
    if (not IsRegexMatch(regex, control, "DisplayNumber")) {
      error ("Unexpected format in DisplayNumber (" + control + "). Should be a number, followed by a single character separator, followed by a number.")
    }
    options = Populate(regex, control, "DisplayNumber")
    places = ToInt(StringDictionaryItem(options, "places"))
    padding = ToInt(StringDictionaryItem(options, "padding"))
    if (places > 0) {
      padding = padding + 1 + places
    }
    decimal = Replace(Decimalise(n, places), ".", StringDictionaryItem(options, "sep"))
    return (StringDictionaryItem(options, "before") + PadString(decimal, padding, 0) + StringDictionaryItem(options, "after"))
  ]]></function>
  <function name="DisplayMoney" parameters="n" type="string"><![CDATA[
    // Returns the given number formatted according to game.moneyformat
    if (not HasString(game, "moneyformat")) {
      error ("No format for money set in game.moneyformat.")
    }
    ary = Split(game.moneyformat, "!")
    if (ListCount(ary) = 2) {
      return (Replace(game.moneyformat, "!", "" + n))
    }
    else if (ListCount(ary) = 3) {
      negative = (n < 0)
      n = abs(n)
      options = StringListItem(ary, 1)
      showsign = StartsWith(options, "+")
      if (showsign) {
        options = Mid(options, 2)
      }
      number = DisplayNumber(n, options)
      if (negative) {
        number = "-" + number
      }
      else if (not n = 0 and showsign) {
        number = "+" + number
      }
      return (StringListItem(ary, 0) + number + StringListItem(ary, 2))
    }
    else if (ListCount(ary) = 4) {
      if (n < 0) {
        options = StringListItem(ary, 2)
      }
      else {
        options = StringListItem(ary, 1)
      }
      number = DisplayNumber(n, options)
      return (StringListItem(ary, 0) + number + StringListItem(ary, 3))
    }
    else {
      error ("game.moneyformat expected to have either 1, 2 or 3 exclamation marks.")
    }
  ]]></function>
  <function name="IndexOf" parameters="lst, item" type="int">
    for (i, 0, ListCount(lst) - 1) {
      x = ListItem(lst, i)
      if (x = item) {
        return (i)
      }
    }
    return (-1)
  </function>
  <function name="ObjectListToStringList" parameters="list, att" type="stringlist">
    l = NewStringList()
    foreach (o, list) {
      if (HasString(o, att)) {
        list add (l, GetString(o, att))
      }
    }
    return (l)
  </function>
  <function name="FilterByType" parameters="lst, t" type="objectlist">
    l = NewObjectList()
    foreach (o, lst) {
      if (DoesInherit(o, t)) {
        list add (l, o)
      }
    }
    return (l)
  </function>
  <function name="FilterByAttribute" parameters="lst, name, value" type="objectlist">
    if (not IsDefined("value")) {
      return (FilterByNotAttribute (lst, name, null))
    }
    l = NewObjectList()
    foreach (o, lst) {
      val = GetAttribute(o, name)
      if (Equal(val, value)) {
        list add (l, o)
      }
    }
    return (l)
  </function>
  <function name="FilterByNotAttribute" parameters="lst, name, value" type="objectlist">
    if (not IsDefined("value")) {
      return (FilterByAttribute (lst, name, null))
    }
    l = NewObjectList()
    foreach (o, lst) {
      val = GetAttribute(o, name)
      if (not Equal(val, value)) {
        list add (l, o)
      }
    }
    return (l)
  </function>
  <function name="ListCompact" parameters="lst" type="list">
    l = NewList()
    foreach (o, lst) {
      if (not Equal(o, null)) {
        if (IndexOf(l, o) = -1) {
          list add (l, o)
        }
      }
    }
    return (l)
  </function>
  <function name="ObjectListCompact" parameters="lst" type="objectlist">
    l = NewObjectList()
    foreach (o, lst) {
      if (not Equal(o, null)) {
        if (IndexOf(l, o) = -1) {
          list add (l, o)
        }
      }
    }
    return (l)
  </function>
  <function name="AllRooms" type="objectlist">
    return (FilterByAttribute(AllObjects(),"isroom",true))
  </function>
  <function name="DictionaryAdd" parameters="dict, key, val">
    if (dict = null or TypeOf(dict)="object") {
      error ("DictionaryAdd:  Dictionary does not exist!")
    }
    if (DictionaryContains(dict, key)) {
      dictionary remove (dict, key)
    }
    dictionary add (dict, key, val)
  </function>
  <function name="DictionaryRemove" parameters="dict, key">
    if (dict = null or TypeOf(dict)="object") {
      error ("DictionaryAdd:  Dictionary does not exist!")
    }
    if (DictionaryContains(dict, key)) {
      dictionary remove (dict, key)
    }
  </function>
  <function name="DbgLog" parameters="txt">
    if (GetBoolean(game,"debugging")) {
      Log ("DEBUGGING:  "+txt)
    }
  </function>
  <function name="DbgMsg" parameters="txt"><![CDATA[
    if (GetBoolean(game,"debugging")) {
      msg ("<br/><p style='color:blue;font-weight:bold;'>DEBUGGING:  "+txt+"</p><br/>")
    }
  ]]></function>
  <function name="DisableTranscript">
    game.notranscript = true
    JS.eval ("savingTranscript = false;")
  </function>
  <function name="DisableHtmlLog">
    game.nohtmllog = true
  </function>
  <function name="QuickParams" parameters="key1, value1, key2, value2, key3, value3" type="dictionary">
    d = NewDictionary()
    dictionary add (d, key1, value1)
    if (IsDefined("key2")) {
      dictionary add (d, key2, value2)
    }
    if (IsDefined("key3")) {
      dictionary add (d, key3, value3)
    }
    return (d)
  </function>
  <function name="HandleCommand" parameters="command, metadata"><![CDATA[
    handled = false
    if (game.menucallback <> null) {
      if (HandleMenuTextResponse(command)) {
        handled = true
      }
      else {
        if (game.menuallowcancel) {
          ClearMenu
        }
        else {
          handled = true
        }
      }
    }
    if (not handled) {
      StartTurnOutputSection
      if (StartsWith (command, "*")) {
        // Modified by KV to bypass turn scripts and turn counts, and to print "Noted."
        game.suppressturnscripts = true
        msg ("")
        msg (SafeXML (command))
        msg ("Noted.")
        // Added for Quest 5.8    - KV
        FinishTurn
      }
      else {
        shownlink = false
        if (game.echocommand) {
          if (metadata <> null and game.enablehyperlinks and game.echohyperlinks) {
            foreach (key, metadata) {
              if (EndsWith(command, key)) {
                objectname = StringDictionaryItem(metadata, key)
                object = GetObject(objectname)
                if (object <> null) {
                  msg ("")
                  msg ("&gt; " + Left(command, LengthOf(command) - LengthOf(key)) + "{object:" + object.name + "}")
                  shownlink = true
                }
              }
            }
          }
          if (not shownlink) {
            msg ("")
            OutputTextRaw ("&gt; " + SafeXML(command))
          }
        }
        if (game.command_newline) {
          msg ("")
        }
        game.pov.commandmetadata = metadata
        if (game.multiplecommands) {
          commands = Split(command, ".")
          if (ListCount(commands) = 1) {
            game.pov.commandqueue = null
            HandleSingleCommand (Trim(command))
          }
          else {
            game.pov.commandqueue = commands
            HandleNextCommandQueueItem
          }
        }
        else {
          game.pov.commandqueue = null
          HandleSingleCommand (Trim(command))
        }
      }
    }
  ]]></function>
  <function name="HandleNextCommandQueueItem"><![CDATA[
    if (TypeOf(game.pov, "commandqueue") = "stringlist") {
      queuelength = ListCount(game.pov.commandqueue)
      if (queuelength > 0) {
        thiscommand = Trim(StringListItem(game.pov.commandqueue, 0))
        if (queuelength = 1) {
          game.pov.commandqueue = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.commandqueue, i))
          }
          game.pov.commandqueue = newqueue
        }
        if (LengthOf(thiscommand) > 0) {
          HandleSingleCommand (thiscommand)
        }
        else {
          HandleNextCommandQueueItem
        }
      }
    }
  ]]></function>
  <function name="HandleSingleCommand" parameters="command"><![CDATA[
    if (LCase(command) = "again" or LCase(command) = "g") {
      // First handle AGAIN
      if (not game.pov.currentcommand = null) {
        HandleSingleCommand (game.pov.currentcommand)
      }
      else {
        msg ("There is nothing to repeat.")
      }
    }
    else {
      // Check through all commands for any that match
      candidates = NewObjectList()
      foreach (cmd, ScopeCommands()) {
        if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
          list add (candidates, cmd)
        }
      }
      maxstrength = -1
      thiscommand = null
      // Pick the best match
      foreach (candidate, candidates) {
        strength = GetMatchStrength(candidate.pattern, command, candidate.name)
        // favour commands defined later, so an author can override a library command...
        if (strength >= maxstrength) {
          // ... except if the command defined later (candidate) has no parent, and the current best
          // match (thiscommand) does have a parent. We want to favour any commands defined in rooms
          // over global candidates.
          skip = false
          if (thiscommand <> null) {
            if (thiscommand.parent <> null and candidate.parent = null) {
              skip = true
            }
          }
          if (not skip) {
            thiscommand = candidate
            maxstrength = strength
          }
        }
      }
      if (thiscommand = null) {
        if (HasScript(game, "unresolvedcommandhandler")) {
          params = NewDictionary()
          dictionary add (params, "command", command)
          do (game, "unresolvedcommandhandler", params)
        }
        else {
          msg (Template("UnrecognisedCommand"))
        }
        HandleNextCommandQueueItem
      }
      else {
        varlist = Populate(thiscommand.pattern, command, thiscommand.name)
        HandleSingleCommandPattern (command, thiscommand, varlist)
      }
    }
  ]]></function>
  <function name="HandleSingleCommandPattern" parameters="command, thiscommand, varlist">
    // current command string
    game.pov.currentcommand = command
    // current command object
    game.pov.currentcommandpattern = thiscommand
    // string dictionary of variables, e.g. object1="book"; object2="table"
    game.pov.currentcommandvarlist = varlist
    // string list of variables left to resolve
    game.pov.currentcommandvarlistqueue = NewStringList()
    foreach (key, varlist) {
      list add (game.pov.currentcommandvarlistqueue, key)
    }
    // dictionary of resolved elements, e.g. object1=book_object; object2=table_object
    game.pov.currentcommandresolvedelements = NewDictionary()
    // list of resolved elements, e.g. book_object; table_object
    game.pov.currentcommandresolvedobjects = NewObjectList()
    game.pov.currentcommandunresolvedobject = null
    game.pov.currentcommandpendingvariable = null
    ResolveNextName
  </function>
  <function name="ResolveNextName"><![CDATA[
    resolvedall = false
    queuetype = TypeOf(game.pov, "currentcommandvarlistqueue")
    if (queuetype = "stringlist") {
      queuelength = ListCount(game.pov.currentcommandvarlistqueue)
      if (queuelength > 0) {
        // Pop next variable off the queue
        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)
        if (queuelength = 1) {
          game.pov.currentcommandvarlistqueue = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))
          }
          game.pov.currentcommandvarlistqueue = newqueue
        }
        // Resolve variable
        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)
        if (value <> "") {
          result = null
          resolvinglist = false
          // This is to resolve issue 626
          if (StartsWith(var, "objectexit")) {
            result = ResolveName(var, value, "exit")
          }
          if (result = null) {
            if (StartsWith(var, "object")) {
              if (GetBoolean(game.pov.currentcommandpattern, "allow_all")) {
                scope = FilterByAttribute(GetScope("object", "", "object"), "scenery", false)
                game.pov.currentcommandpendingobjectscope = ListExclude(scope, FilterByAttribute(scope, "not_all", true))
                game.pov.currentcommandpendingvariable = var
                ResolveNameList (value, "object")
                resolvinglist = true
              }
              else if (HasScript(game.pov.currentcommandpattern, "multipleobjects")) {
                game.pov.currentcommandpendingobjectlist = NewObjectList()
                game.pov.currentcommandpendingvariable = var
                do (game.pov.currentcommandpattern, "multipleobjects")
                ResolveNameList (value, "object")
                resolvinglist = true
              }
              else {
                result = ResolveName(var, value, "object")
              }
            }
            else if (StartsWith(var, "exit")) {
              result = ResolveName(var, value, "exit")
            }
            else if (StartsWith(var, "text")) {
              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)
            }
            else {
              error ("Unhandled command variable '" + var + "' - command variable names must begin with 'object', 'exit' or 'text'")
            }
          }
          // at this point, ResolveName has returned - either an object name, unresolved, or pending
          if (result = null) {
            if ((not resolvinglist) and LengthOf(GetString(game.pov, "currentcommandpendingvariable")) = 0) {
              UnresolvedCommand (value, var)
            }
          }
          else {
            AddToResolvedNames (var, result)
          }
        }
        else {
          ResolveNextName
        }
      }
      else {
        resolvedall = true
      }
    }
    else if (queuetype = "null") {
      resolvedall = true
    }
    else {
      error ("Invalid queue type")
    }
    if (resolvedall) {
      // All the objects have been resolved, so now we can actually do the command
      // TO DO: game.lastobjects should be game.pov.lastobjects
      game.lastobjects = game.pov.currentcommandresolvedobjects
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", false)
      }
      if (not GetBoolean(game.pov.currentcommandpattern, "isundo")) {
        if (LengthOf(game.pov.currentcommand) > 0) {
          start transaction (game.pov.currentcommand)
        }
      }
      if (not GetBoolean(game.pov.currentcommandpattern, "isoops")) {
        // TO DO: game.unresolved* should be game.pov.unresolved*
        game.unresolvedcommand = null
        game.unresolvedcommandvarlist = null
        game.unresolvedcommandkey = null
      }
      if (HasScript(game.pov.currentcommandpattern, "script")) {
        // This is the bit that actually runs the commands
        do (game.pov.currentcommandpattern, "script", game.pov.currentcommandresolvedelements)
      }
      //
      // Setting game.runturnscripts to true to run turn scripts after ShowMenu , show menu, ask, or Ask.
      // This works in conjuction with FinishTurn, which has also been modified as of Quest 5.8.
      // - KV, 2018/05/25
      game.runturnscripts = true
      FinishTurn
      HandleNextCommandQueueItem
    }
  ]]></function>
  <function name="AddToResolvedNames" parameters="var, result">
    if (TypeOf(result) = "object") {
      if (result.type = "object") {
        list add (game.pov.currentcommandresolvedobjects, result)
      }
    }
    else if (TypeOf(result) = "objectlist") {
      foreach (obj, result) {
        if (obj.type = "object") {
          list add (game.pov.currentcommandresolvedobjects, obj)
        }
      }
    }
    dictionary add (game.pov.currentcommandresolvedelements, var, result)
    ResolveNextName
  </function>
  <function name="ResolveName" parameters="variable, value, objtype" type="object"><![CDATA[
    found = false
    if (game.pov.commandmetadata <> null) {
      if (DictionaryContains(game.pov.commandmetadata, value)) {
        result = GetObject(StringDictionaryItem(game.pov.commandmetadata, value))
        if (result <> null) {
          if (ListContains(ScopeVisible(), result)) {
            found = true
            return (result)
          }
        }
      }
    }
    if (not found) {
      value = LCase(value)
      result = ResolveNameInternal(variable, value, objtype)
      if (result <> null) {
        return (result)
      }
      else {
        // TO DO: Check this behaviour. We only want to try ignoring prefixes if we have definitely got an unresolved name.
        foreach (prefix, game.parserignoreprefixes) {
          if (StartsWith(value, prefix + " ")) {
            result = ResolveNameInternal(variable, Mid(value, LengthOf(prefix) + 1), objtype)
          }
        }
        if (result = null and LengthOf(variable) = 0 and not GetBoolean(game.pov, "currentcommandmultiobjectpending")) {
          UnresolvedCommand (value, game.pov.currentcommandpendingvariable)
        }
        return (result)
      }
    }
  ]]></function>
  <function name="ResolveNameInternal" parameters="variable, value, objtype" type="object">
    game.pov.currentcommandmultiobjectpending = false
    scope = GetScope(variable, value, objtype)
    if (HasString(game.pov.currentcommandpattern, "scope")) {
      secondaryscope = ScopeVisible()
    }
    else {
      secondaryscope = null
    }
    return (ResolveNameFromList(variable, value, objtype, scope, secondaryscope))
  </function>
  <function name="ResolveNameFromList" parameters="variable, value, objtype, scope, secondaryscope" type="object"><![CDATA[
    value = Trim(LCase(value))
    fullmatches = NewObjectList()
    partialmatches = NewObjectList()
    foreach (obj, scope) {
      name = LCase(GetDisplayAlias(obj))
      CompareNames (name, value, obj, fullmatches, partialmatches)
      if (obj.alt <> null) {
        foreach (altname, obj.alt) {
          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
        }
      }
    }
    // allow referring to objects from the previous command by gender or article
    if (objtype = "object" and game.lastobjects <> null) {
      foreach (obj, game.lastobjects) {
        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)
        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)
      }
    }
    // Also check the secondary scope, but only if we have not found anything yet
    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {
      foreach (obj, secondaryscope) {
        name = LCase(GetDisplayAlias(obj))
        CompareNames (name, value, obj, fullmatches, partialmatches)
        if (obj.alt <> null) {
          foreach (altname, obj.alt) {
            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
          }
        }
      }
    }
    if (ListCount(fullmatches) = 1) {
      return (ListItem(fullmatches, 0))
    }
    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {
      return (ListItem(partialmatches, 0))
    }
    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {
      return (null)
    }
    else {
      // Added this line to resolve issue with new FinishTurn setup in 580
      game.disambiguating = true
      candidates = ListCompact(ListCombine(fullmatches, partialmatches))
      if (LengthOf(variable) > 0) {
        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements
        game.pov.currentcommandpendingvariable = variable
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), candidates, true) {
          varname = game.pov.currentcommandpendingvariable
          game.pov.currentcommandpendingvariable = null
          if (result <> null) {
            AddToResolvedNames (varname, GetObject(result))
          }
        }
      }
      else {
        // multi-object command, so after showing the menu, add the object to the list
        game.pov.currentcommandmultiobjectpending = true
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), candidates, true) {
          if (result <> null) {
            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))
            ResolveNextNameListItem
          }
        }
      }
      return (null)
    }
  ]]></function>
  <function name="ResolveNameList" parameters="value, objtype">
    game.pov.currentcommandpendingobjectlist = NewObjectList()
    game.pov.currentcommandpendingobjectlistunresolved = NewStringList()
    game.pov.currentcommandpendingobjecttype = objtype
    inputlist = Split(value, ",")
    foreach (inputbase, inputlist) {
      inputlist2 = Split(inputbase, " " + Template("And") + " ")
      foreach (input, inputlist2) {
        list add (game.pov.currentcommandpendingobjectlistunresolved, input)
      }
    }
    ResolveNextNameListItem
  </function>
  <function name="ResolveNextNameListItem"><![CDATA[
    resolvedall = false
    if (TypeOf(game.pov, "currentcommandpendingobjectlistunresolved") = "stringlist") {
      queuelength = ListCount(game.pov.currentcommandpendingobjectlistunresolved)
      if (queuelength > 0) {
        thisitem = Trim(StringListItem(game.pov.currentcommandpendingobjectlistunresolved, 0))
        if (queuelength = 1) {
          game.pov.currentcommandpendingobjectlistunresolved = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.currentcommandpendingobjectlistunresolved, i))
          }
          game.pov.currentcommandpendingobjectlistunresolved = newqueue
        }
        ResolveNameListItem (Trim(thisitem))
      }
      else {
        resolvedall = true
      }
    }
    else {
      resolvedall = true
    }
    if (resolvedall) {
      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectlist)
    }
  ]]></function>
  <function name="ResolveNameListItem" parameters="value"><![CDATA[
    if (ListContains(game.allobjects, value)) {
      // value is "all"
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", true)
      }
      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectscope)
    }
    else {
      object = ResolveName("", value, game.pov.currentcommandpendingobjecttype)
      if (object <> null) {
        if (not ListContains(game.pov.currentcommandpendingobjectlist, object)) {
          list add (game.pov.currentcommandpendingobjectlist, object)
        }
        ResolveNextNameListItem
      }
    }
  ]]></function>
  <function name="ResolveNameListItemFinished" parameters="result"><![CDATA[
    if (ListCount(result) > 1) {
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", true)
      }
    }
    AddToResolvedNames (game.pov.currentcommandpendingvariable, result)
  ]]></function>
  <function name="UnresolvedCommand" parameters="objectname, varname"><![CDATA[
    // TO DO: Update names below, we don't need these two variables
    unresolvedobject = objectname
    unresolvedkey = varname
    if (HasString(game.pov.currentcommandpattern, "unresolved")) {
      if (ListCount(game.pov.currentcommandvarlist) > 1) {
        msg (game.pov.currentcommandpattern.unresolved + " (" + unresolvedobject + ")")
      }
      else {
        msg (game.pov.currentcommandpattern.unresolved)
      }
    }
    else {
      if (ListCount(game.pov.currentcommandvarlist) > 1) {
        msg (Template("UnresolvedObject") + " (" + unresolvedobject + ")")
      }
      else {
        msg (Template("UnresolvedObject"))
      }
    }
    game.unresolvedcommand = game.pov.currentcommandpattern
    game.unresolvedcommandvarlist = game.pov.currentcommandvarlist
    game.unresolvedcommandkey = unresolvedkey
  ]]></function>
  <function name="HandleMultiVerb" parameters="object, property, object2, default">
    dictionary = GetAttribute(object, property)
    if (DictionaryContains(dictionary, object2.name)) {
      parameters = NewDictionary()
      dictionary add (parameters, "this", object)
      dictionary add (parameters, "object", object2)
      invoke (ScriptDictionaryItem(dictionary, object2.name), parameters)
    }
    else {
      parameters = NewDictionary()
      dictionary add (parameters, "this", object)
      dictionary add (parameters, "object", object2)
      if (DictionaryContains(dictionary, "default")) {
        invoke (ScriptDictionaryItem(dictionary, "default"), parameters)
      }
      else {
        msg (default)
      }
    }
  </function>
  <function name="GetScope" parameters="variable, value, objtype" type="objectlist"><![CDATA[
    items = NewObjectList()
    if (HasString(game.pov.currentcommandpattern, "scope")) {
      scoping = GetScoping(game.pov.currentcommandpattern.scope, variable)
      foreach (partscope, Split(scoping, ";")) {
        switch (partscope) {
          case ("inventory") {
            items = ListCombine(items, ScopeInventory())
          }
          case ("notheld", "room") {
            items = ListCombine(items, ScopeVisibleNotHeld()) - game.pov
          }
          case ("all") {
            items = ListCombine(items, ScopeVisible()) - game.pov
          }
          case ("container") {
            items = ListCombine(items, FilterByType(ScopeVisible(), "container_base"))
          }
          case ("contents") {
            foreach (cont, FilterByType(ScopeVisible(), "container_base")) {
              items = ListCombine(items, GetAllChildObjects(cont))
            }
          }
          case ("world") {
            items = ListCombine(items, AllObjects())
          }
          case ("none") {
          }
          default {
            // The command's "scope" can be the name of an object, or an attribute of the player's parent
            obj = GetObject(partscope)
            if (not obj = null) {
              items = ListCombine(items, GetAllChildObjects(obj))
            }
            if (HasObject(game.pov.parent, partscope)) {
              obj = GetAttribute(game.pov.parent, partscope)
              items = ListCombine(items, GetAllChildObjects(obj))
            }
            else if (HasAttribute(game.pov.parent, partscope)) {
              attr = GetAttribute(game.pov.parent, partscope)
              if (TypeOf(attr) = "objectlist") {
                items = ListCombine (items, attr)
              }
            }
            else if (HasAttribute(game.pov, partscope)) {
              attr = GetAttribute(game.pov, partscope)
              if (TypeOf(attr) = "objectlist") {
                items = ListCombine (items, attr)
              }
            }
          }
        }
      }
    }
    else if (objtype = "object") {
      items = ScopeVisible()
    }
    else if (objtype = "exit") {
      items = ScopeExits()
    }
    else {
      // Should never get here!
      // CHANGE: Should still never get here, but we don't return null.
      // If we get here somehow, trust user's scripts to define scope.
    }
    items = ObjectListCompact(items)
    // CHANGE: Run the script 'changecommandscope' (if it exists) for the game object, the player's room and
    // containing rooms, and the current command. This allows the user to change command scope on a per-location
    // or per-command basis
    // This script gets an "items" list parameter, like `scopebackdrop` script does; but also has parameters
    // 'command', 'variable', and 'objtype', so the user can adjust their script to give different item lists
    // for different commands, or different variables within a command.
    objectswithscripts = NewObjectList()
    if (HasScript(game.pov.currentcommandpattern, "changecommandscope")) {
      list add (objectswithscripts, game.pov.currentcommandpattern)
    }
    room = game.pov
    while (not room = null) {
      if (HasScript(room, "changecommandscope")) {
        list add (objectswithscripts, room)
      }
      room = room.parent
    }
    if (HasScript(game, "changecommandscope")) {
      list add (objectswithscripts, game)
    }
    if (ListCount(objectswithscripts) > 0) {
      params = NewDictionary()
      dictionary add (params, "items", items)
      dictionary add (params, "command", game.pov.currentcommandpattern)
      dictionary add (params, "variable", variable)
      dictionary add (params, "objtype", objtype)
      dictionary add (params, "matched", game.pov.currentcommandresolvedelements)
      foreach (o, objectswithscripts) {
        do (o, "changecommandscope", params)
      }
      items = ObjectListCompact(items)
    }
    return (items)
  ]]></function>
  <function name="GetScoping" parameters="scopestring, variable" type="string">
    lst = Split(scopestring, "|")
    if (ListCount(lst) = 1) {
      return (scopestring)
    }
    foreach (s, lst) {
      if (StartsWith(s, variable + "=")) {
        return (Mid(s, LengthOf(variable) + 2))
      }
    }
    return ("all")
  </function>
  <function name="CompareNames" parameters="name, value, obj, fullmatches, partialmatches"><![CDATA[
    if (name = value) {
      if (not ListContains(fullmatches, obj)) {
        list add (fullmatches, obj)
      }
    }
    else {
      if (StartsWith(name, value)) {
        if (not ListContains(partialmatches, obj)) {
          list add (partialmatches, obj)
        }
      }
      else {
        // check if input matches the start of any word in the name
        if (Instr(name, " " + value) > 0) {
          if (not ListContains(partialmatches, obj)) {
            list add (partialmatches, obj)
          }
        }
      }
    }
  ]]></function>
  <function name="GenerateMenuChoices" parameters="dictionary, objects">
    msg ("WARNING: GenerateMenuChoices is deprecated as ShowMenu can handle lists with objects")
    foreach (obj, objects) {
      if (not DictionaryContains(dictionary, obj.name)) {
        dictionary add (dictionary, obj.name, GetDisplayAlias(obj))
      }
    }
  </function>
  <function name="GetPlacesObjectsList" type="objectlist">
    return (ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov))
  </function>
  <function name="GetExitsList" type="objectlist">
    return (RemoveLookOnlyExits(RemoveSceneryObjects(ScopeExits())))
  </function>
  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsVisible(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeReachableInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsReachable(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotHeld" type="objectlist">
    return (ScopeVisibleNotHeldForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotHeldForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room))
      list add (result, game.pov)
      return (result)
    }
    else {
      return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)))
    }
  </function>
  <function name="ScopeVisibleNotHeldNotScenery" type="objectlist">
    return (ScopeVisibleNotHeldNotSceneryForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotHeldNotSceneryForRoom" parameters="room" type="objectlist">
    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))
  </function>
  <function name="ScopeReachable" type="objectlist">
    return (ScopeReachableForRoom(game.pov.parent))
  </function>
  <function name="ScopeReachableForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory())
      list add (result, game.pov)
    }
    else {
      result = ScopeReachableNotHeldForRoom(room)
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotReachable" type="objectlist">
    return (ScopeVisibleNotReachableForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotReachableForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    exclude = ScopeReachableForRoom(room)
    list add (exclude, game.pov)
    newParent = GetNonTransparentParent(room)
    foreach (obj, GetAllChildObjects(newParent)) {
      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="GetNonTransparentParent" parameters="room" type="object">
    if (GetBoolean(room, "transparent")) {
      if (room.parent = null) {
        return (room)
      }
      else {
        return (GetNonTransparentParent(room.parent))
      }
    }
    else {
      return (room)
    }
  </function>
  <function name="ScopeReachableNotHeld" type="objectlist">
    return (ScopeReachableNotHeldForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleLightsource" parameters="lightstrength" type="objectlist">
    result = ScopeVisible()
    lightobjects = NewObjectList()
    foreach (obj, result) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add (lightobjects, obj)
      }
    }
    exits = ScopeExits()
    foreach (obj, exits) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add (lightobjects, obj)
      }
    }
    return (lightobjects)
  </function>
  <function name="ScopeReachableNotHeldForRoom" parameters="room" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(room)) {
      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {
        list add (result, obj)
      }
    }
    if (HasScript(game, "scopebackdrop")) {
      dict = NewDictionary()
      dictionary add (dict, "items", result)
      do (game, "scopebackdrop", dict)
    }
    return (result)
  ]]></function>
  <function name="ScopeVisible" type="objectlist">
    return (ScopeVisibleForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()))
    }
    else {
      return (ScopeVisibleNotHeldForRoom(room))
    }
  </function>
  <function name="ScopeExits" type="objectlist">
    return (ScopeExitsForRoom(game.pov.parent))
  </function>
  <function name="ScopeExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add (result, exit)
            }
          }
          else {
            list add (result, exit)
          }
        }
      }
    }
    return (result)
  </function>
  <function name="ScopeUnlockedExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible and not exit.locked) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add (result, exit)
            }
          }
          else {
            list add (result, exit)
          }
        }
      }
    }
    return (result)
  </function>
  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = null or command.parent = game.pov.parent) {
        list add (result, command)
      }
      if (not game.pov.parent.parent = null) {
        if (command.parent = game.pov.parent.parent) {
          list add (result, command)
        }
      }
    }
    return (result)
  </function>
  <function name="GetBlockingObject" parameters="obj" type="object">
    result = null
    foreach (obj, ListParents(obj)) {
      if (result = null and not CanReachThrough(obj)) {
        result = obj
      }
    }
    return (result)
  </function>
  <function name="ListParents" parameters="obj" type="objectlist"><![CDATA[
    result = NewObjectList()
    if (obj.parent <> null) {
      parent_as_list = NewObjectList()
      list add (parent_as_list, obj.parent)
      result = ListCombine(parent_as_list, ListParents(obj.parent))
    }
    return (result)
  ]]></function>
  <function name="ContainsVisible" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, false))
  </function>
  <function name="ContainsReachable" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, true))
  </function>
  <function name="ContainsAccessible" parameters="parentObj, searchObj, onlyReachable" type="boolean">
    if (not HasObject(searchObj, "parent")) {
      return (false)
    }
    else if (not searchObj.visible) {
      return (false)
    }
    else if (GetBoolean(parentObj, "darklevel") and not GetBoolean(searchObj, "lightsource")) {
      return (false)
    }
    else {
      if (searchObj.parent = null) {
        return (false)
      }
      else if (searchObj.parent = parentObj) {
        return (true)
      }
      else {
        if (onlyReachable) {
          canAdd = CanReachThrough(searchObj.parent)
        }
        else {
          canAdd = CanSeeThrough(searchObj.parent)
        }
        if (canAdd) {
          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))
        }
        else {
          return (false)
        }
      }
    }
  </function>
  <function name="GetVolume" parameters="obj, allinclusive" type="int">
    result = 0
    foreach (object, GetAllChildObjects ( obj )) {
      if (HasInt(object, "volume")) {
        result = result + object.volume
      }
    }
    if (allinclusive and HasInt(obj, "volume")) {
      result = result + obj.volume
    }
    return (result)
  </function>
  <function name="CanSeeThrough" parameters="obj" type="boolean">
    return ((GetBoolean(obj, "transparent") or CanReachThrough(obj)) and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="CanReachThrough" parameters="obj" type="boolean">
    return (GetBoolean(obj, "isopen") and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="Got" parameters="obj" type="boolean">
    return (ListContains(ScopeInventory(), obj))
  </function>
  <function name="UpdateObjectLinks">
    if (game.enablehyperlinks) {
      data = NewStringDictionary()
      foreach (object, ScopeVisible()) {
        dictionary add (data, object.name, Join(GetDisplayVerbs(object), "/"))
      }
      JS.updateObjectLinks (data)
      exits = NewStringList()
      foreach (exit, ScopeExits()) {
        list add (exits, exit.name)
      }
      JS.updateExitLinks (exits)
      commands = NewStringList()
      foreach (cmd, ScopeCommands()) {
        list add (commands, cmd.name)
      }
      JS.updateCommandLinks (commands)
    }
  </function>
  <function name="SecondaryScopeReachableForRoom" parameters="room" type="objectlist">
    return (NewObjectList())
  </function>
  <function name="ShowRoomDescription"><![CDATA[
    isDark = CheckDarkness()
    if (isDark) {
      descriptionfield = "darkroomdescription"
    }
    else {
      descriptionfield = "description"
    }
    if (game.autodescription) {
      desc = ""
      for (i, 1, 4) {
        if (i = game.autodescription_youarein) {
          if (game.autodescription_youarein_useprefix) {
            youarein = game.pov.parent.descprefix
            desc = AddDescriptionLine (desc, youarein + " " + GetDisplayName(game.pov.parent) + ".")
          }
          else {
            desc = AddDescriptionLine (desc, "<b>" + CapFirst(GetDisplayName(game.pov.parent)) + "</b>")
          }
          if (game.autodescription_youarein_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_youcansee) {
          objects = FormatObjectList(game.pov.parent.objectslistprefix, GetNonTransparentParent(game.pov.parent), Template("And"), ".")
          desc = AddDescriptionLine(desc, objects)
          if (game.autodescription_youcansee_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_youcango) {
          exits = FormatExitList(game.pov.parent.exitslistprefix, GetExitsList(), Template("Or"), ".")
          desc = AddDescriptionLine(desc, exits)
          if (game.autodescription_youcango_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_description) {
          if (HasScript(game.pov.parent, descriptionfield)) {
            if (LengthOf(desc) > 0) {
              msg (desc)
              desc = ""
            }
            do (game.pov.parent, descriptionfield)
            if (game.autodescription_description_newline) {
              msg ("")
            }
          }
          else {
            desc = AddDescriptionLine(desc, GetRoomDescription())
            if (game.autodescription_description_newline) {
              msg (desc + "<br/>")
              desc = ""
            }
          }
        }
      }
      if (LengthOf(desc) > 0) {
        msg (desc)
      }
    }
    else {
      if (HasScript(game.pov.parent, descriptionfield)) {
        do (game.pov.parent, descriptionfield)
      }
      else {
        fulldesc = GetRoomDescription()
        if (LengthOf(fulldesc) > 0) {
          msg (fulldesc)
        }
      }
    }
  ]]></function>
  <function name="AddDescriptionLine" parameters="desc, line" type="string"><![CDATA[
    if (LengthOf(line) > 0) {
      if (LengthOf(desc) > 0) {
        msg (desc)
        desc = ""
      }
      desc = desc + line
    }
    return (desc)
  ]]></function>
  <function name="GetRoomDescription" type="string"><![CDATA[
    fulldesc = ""
    if (CheckDarkness()) {
      if (HasString(game.pov.parent, "darkroomdescription")) {
        if (LengthOf(game.pov.parent.darkroomdescription) > 0) {
          fulldesc = game.pov.parent.darkroomdescription
        }
      }
      // Added by The Pixie to correct what appears to be a bug
      if (fulldesc = "") {
        fulldesc = DynamicTemplate("LookAtDarkness", game.pov.parent)
      }
    }
    else {
      if (HasString(game.pov.parent, "description")) {
        if (LengthOf(game.pov.parent.description) > 0) {
          fulldesc = game.pov.parent.description
        }
      }
    }
    if (game.appendobjectdescription) {
      foreach (val, ScopeVisibleNotHeld()) {
        if (HasString(val, "inroomdescription")) {
          if (LengthOf(val.inroomdescription) > 0 and val <> game.pov) {
            fulldesc = fulldesc + " " + val.inroomdescription
          }
        }
      }
    }
    return (Trim(fulldesc))
  ]]></function>
  <function name="OnEnterRoom" parameters="oldRoom"><![CDATA[
    game.displayroomdescriptiononstart = false
    if (IsDefined("oldRoom")) {
      if (oldRoom <> null) {
        if (game.clearscreenonroomenter) {
          ClearScreen
          if (not game.currentexitmessage = null) {
            msg (game.currentexitmessage)
            game.currentexitmessage = null
          }
        }
        if (HasScript(oldRoom, "onexit")) {
          do (oldRoom, "onexit")
        }
      }
    }
    on ready {
      if ((not GetBoolean(game.pov.parent, "visited")) and HasScript(game.pov.parent, "beforefirstenter")) {
        do (game.pov.parent, "beforefirstenter")
      }
      on ready {
        if (HasScript(game.pov.parent, "beforeenter")) {
          do (game.pov.parent, "beforeenter")
        }
        on ready {
          if (game.gridmap) {
            Grid_CalculateMapCoordinates (game.pov.parent, game.pov)
            Grid_DrawPlayerInRoom (game.pov.parent)
          }
          if (IsDefined("oldRoom")) {
            if (oldRoom <> null and game.changeroom_newline and not game.command_newline) {
              msg ("")
            }
          }
          JS.updateLocation (CapFirst(GetDisplayName(game.pov.parent)))
          roomFrameExists = false
          if (HasString(game.pov.parent, "picture")) {
            if (LengthOf(game.pov.parent.picture) > 0) {
              roomFrameExists = true
              SetFramePicture (game.pov.parent.picture)
            }
          }
          if (game.clearframe and not roomFrameExists) {
            ClearFramePicture
          }
          if (game.showdescriptiononenter) {
            ShowRoomDescription
          }
          if (HasScript( game, "roomenter")) {
            do (game, "roomenter")
          }
          on ready {
            if ((not GetBoolean(game.pov.parent, "visited")) and HasScript(game.pov.parent, "firstenter")) {
              do (game.pov.parent, "firstenter")
            }
            on ready {
              if (HasScript(game.pov.parent, "enter")) {
                do (game.pov.parent, "enter")
              }
            }
            set (game.pov.parent, "visited", true)
          }
        }
      }
    }
  ]]></function>
  <function name="FormatObjectList" parameters="preList, parent, preFinal, postList" type="string"><![CDATA[
    result = ""
    count = 0
    list = RemoveSceneryObjects(GetDirectChildren(parent))
    if (CheckDarkness()) {
      list = RemoveDarkObjects(list)
    }
    listLength = ListCount(list)
    foreach (item, list) {
      if (LengthOf(result) = 0) {
        result = preList + " "
      }
      result = result + GetDisplayNameLink(item, "object")
      if (CanSeeThrough(item)) {
        result = result + FormatObjectList(" (" + item.contentsprefix, item, preFinal, ")")
      }
      count = count + 1
      if (count = listLength - 1) {
        result = result + " " + preFinal + " "
      }
      else if (count < listLength) {
        result = result + ", "
      }
      else {
        result = result + postList
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveSceneryObjects" parameters="list" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.scenery and obj <> game.pov and obj.visible) {
        list add (result, obj)
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveLookOnlyExits" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.lookonly) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="RemoveDarkObjects" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (GetBoolean(obj, "lightsource") or obj.parent = game.pov) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="FormatExitList" parameters="preList, list, preFinal, postList" type="string"><![CDATA[
    result = ""
    listLength = ListCount(list)
    if (listLength > 0) {
      count = 0
      result = preList + " "
      foreach (item, list) {
        result = result + GetDisplayNameLink(item, "exit")
        count = count + 1
        if (count = listLength - 1) {
          result = result + " " + preFinal + " "
        }
        else if (count < listLength) {
          result = result + ", "
        }
      }
      result = result + postList
    }
    return (result)
  ]]></function>
  <function name="GetDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "alias")) {
      result = obj.alias
    }
    else {
      result = obj.name
    }
    return (result)
  </function>
  <function name="GetDisplayName" parameters="obj" type="string">
    return (GetDisplayNameLink(obj, ""))
  </function>
  <function name="GetDisplayNameLink" parameters="obj, type" type="string"><![CDATA[
    verbs = GetDisplayVerbs(obj)
    if (verbs <> null) {
      verbCount = ListCount(verbs)
    }
    else {
      verbCount = 0
    }
    if (type = "exit" and verbCount = 1) {
      if (not game.enablehyperlinks) {
        result = GetDisplayAlias(obj)
      }
      else {
        result = "{exit:" + obj.name + "}"
      }
    }
    else if (type = "") {
      result = GetDisplayAlias(obj)
    }
    else {
      result = "{object:" + obj.name + "}"
    }
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else if (type = "exit") {
      prefix = ""
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    result = prefix + result
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]></function>
  <function name="ObjectLink" parameters="obj" type="string">
    return ("{object:" + obj.name + "}")
  </function>
  <function name="GetListDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "listalias")) {
      // Modified by KV
      result = ProcessText(obj.listalias)
    }
    else {
      result = GetDisplayAlias(obj)
    }
    return (result)
  </function>
  <function name="CheckDarkness" type="boolean"><![CDATA[
    roomCheckDarkness = true
    if (GetBoolean(game.pov.parent, "dark")) {
      if (ListCount(ScopeVisibleLightsource("strong")) > 0) {
        roomCheckDarkness = false
      }
    }
    else {
      roomCheckDarkness = false
    }
    game.pov.parent.darklevel = roomCheckDarkness
    return (roomCheckDarkness)
  ]]></function>
  <function name="EnableTimer" parameters="timer">
    timer.enabled = true
    timer.trigger = game.timeelapsed + timer.interval
  </function>
  <function name="DisableTimer" parameters="timer">
    timer.enabled = false
  </function>
  <function name="SetTimerInterval" parameters="timer, interval">
    timer.interval = interval
  </function>
  <function name="SetTimerScript" parameters="timer, script">
    timer.script = script
  </function>
  <function name="SetTimeout" parameters="interval, script">
    SetTimeoutID (interval, "", script)
  </function>
  <function name="SetTimeoutID" parameters="interval, name, script">
    timername = ""
    if (name = "") {
      timername = GetUniqueElementName("timeout")
    }
    else {
      if (GetTimer(name) = null and GetObject(name) = null) {
        timername = name
      }
      else {
        error ("Error creating timer: There is already an existing object named " + name)
      }
    }
    if (not timername = "") {
      create timer (timername)
      timer = GetTimer(timername)
      SetTimerInterval (timer, interval)
      timer.timeoutscript = script
      SetTimerScript (timer) {
        this.enabled = false
        invoke (this.timeoutscript)
        JS.scrollToEnd ()
        destroy (this.name)
      }
      EnableTimer (timer)
    }
  </function>
  <function name="Pause" parameters="interval">
    error ("The Pause function is obsolete as of Quest 5.5")
  </function>
  <function name="RunTurnScripts">
    if (IsGameRunning()) {
      if (game.menucallback = null) {
        foreach (turnscript, ObjectListSort(AllTurnScripts(), "name")) {
          if (GetBoolean(turnscript, "enabled")) {
            inscope = false
            if (turnscript.parent = game or turnscript.parent = null) {
              inscope = true
            }
            else {
              if (Contains(turnscript.parent, game.pov)) {
                inscope = true
              }
            }
            if (inscope) {
              do (turnscript, "script")
            }
          }
        }
      }
    }
  </function>
  <function name="EnableTurnScript" parameters="turnscript">
    turnscript.enabled = true
  </function>
  <function name="DisableTurnScript" parameters="turnscript">
    turnscript.enabled = false
  </function>
  <function name="SetTurnScript" parameters="turnscript, script">
    turnscript.script = script
  </function>
  <function name="SetTurnTimeout" parameters="turncount, script">
    SetTurnTimeoutID (turncount, "", script)
  </function>
  <function name="SetTurnTimeoutID" parameters="turncount, name, script"><![CDATA[
    turnscriptname = ""
    if (name = "") {
      turnscriptname = GetUniqueElementName("turnscript")
    }
    else {
      if (GetObject(name) = null and GetTimer(name) = null) {
        turnscriptname = name
      }
      else {
        error ("Error creating turnscript: There is already an existing object named " + name)
      }
    }
    if (not turnscriptname="") {
      create turnscript (turnscriptname)
      turnscript = GetObject(turnscriptname)
      turnscript.turncount = 0
      turnscript.triggerturncount = turncount
      turnscript.timeoutscript = script
      SetTurnScript (turnscript) {
        this.turncount = this.turncount + 1
        if (this.turncount >= this.triggerturncount) {
          this.enabled = false
          invoke (this.timeoutscript)
          destroy (this.name)
        }
      }
      EnableTurnScript (turnscript)
    }
  ]]></function>
  <function name="SuppressTurnscripts">
    game.suppressturnscripts = true
  </function>
  <function name="UpdateStatusAttributes"><![CDATA[
    status = NewStringList()
    AddStatusAttributesForElement (status, game, game.statusattributes)
    AddStatusAttributesForElement (status, game.pov, game.povstatusattributes)
    AddStatusAttributesForElement (status, game.pov, game.pov.statusattributes)
    JS.updateStatus (Join(status, "<br/>"))
  ]]></function>
  <function name="AddStatusAttributesForElement" parameters="status, element, statusAttributes" type="string">
    if (not statusAttributes = null) {
      foreach (attr, statusAttributes) {
        list add (status, FormatStatusAttribute(attr, GetAttribute(element, attr), StringDictionaryItem(statusAttributes, attr)))
      }
    }
  </function>
  <function name="FormatStatusAttribute" parameters="attr, value, format" type="string">
    if (LengthOf(format) = 0) {
      return (CapFirst(attr) + ": " + value)
    }
    else {
      if (TypeOf(value) = "int" and attr = "money" and HasString(game, "moneyformat")) {
        value = DisplayMoney(value)
      }
      else if (TypeOf(value) = "int" or TypeOf(value) = "double") {
        value = ToString(value)
      }
      else if (TypeOf(value) = "null") {
        value = ""
      }
      return (Replace(format, "!", value))
    }
  </function>
  <function name="InitStatusAttributes">
    if (game.showscore) {
      game.score = 0
      if (game.statusattributes = null) {
        game.statusattributes = NewStringDictionary()
      }
      dictionary add (game.statusattributes, "score", "Score: !")
    }
    if (game.showhealth) {
      if (game.povstatusattributes = null) {
        game.povstatusattributes = NewStringDictionary()
      }
      dictionary add (game.povstatusattributes, "health", "Health: !%")
    }
    if (game.showmoney) {
      if (game.povstatusattributes = null) {
        game.povstatusattributes = NewStringDictionary()
      }
      dictionary add (game.povstatusattributes, "money", "Money: !")
    }
  </function>
  <function name="IncreaseScore" parameters="amount">
    if (not HasInt(game, "score")) {
      error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.")
    }
    game.score = game.score + amount
  </function>
  <function name="DecreaseScore" parameters="amount">
    if (not HasInt(game, "score")) {
      error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.")
    }
    game.score = game.score - amount
  </function>
  <function name="IncreaseHealth" parameters="amount">
    if (not HasInt(game.pov, "health")) {
      error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.")
    }
    game.pov.health = game.pov.health + amount
  </function>
  <function name="DecreaseHealth" parameters="amount">
    if (not HasInt(game.pov, "health")) {
      error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.")
    }
    game.pov.health = game.pov.health - amount
  </function>
  <function name="IncreaseMoney" parameters="amount">
    if (not HasInt(game.pov, "money")) {
      error ("Money is not configured. To enable money, go to 'game' and tick 'Show money' on the Player tab.")
    }
    game.pov.money = game.pov.money + amount
  </function>
  <function name="DecreaseMoney" parameters="amount">
    if (not HasInt(game.pov, "money")) {
      error ("Money is not configured. To enable money, go to 'game' and tick 'Show money' on the Player tab.")
    }
    game.pov.money = game.pov.money - amount
  </function>
  <function name="OutputText" parameters="text">
    OutputTextRaw (ProcessText(text))
  </function>
  <function name="OutputTextRaw" parameters="text"><![CDATA[
    format = GetCurrentTextFormat("")
    JS.addText ("<span style=\"" + format + "\">" + text + "</span><br/>")
    if (GetString(game, "commandbarformat") <> format) {
      ResetCommandBarFormat
    }
    RequestSpeak (text)
  ]]></function>
  <function name="ResetCommandBarFormat">
    format = GetCurrentTextFormat("") + ";background:" + game.defaultbackground
    game.commandbarformat = format
    JS.setCommandBarStyle (format)
  </function>
  <function name="OutputTextNoBr" parameters="text">
    OutputTextRawNoBr (ProcessText(text))
  </function>
  <function name="OutputTextRawNoBr" parameters="text"><![CDATA[
    JS.addText ("<span style=\"" + GetCurrentTextFormat("") + "\">" + text + "</span>")
    RequestSpeak (text)
  ]]></function>
  <function name="GetCurrentTextFormat" parameters="colour" type="string"><![CDATA[
    style = ""
    if (UIOptionUseGameFont()) {
      font = GetCurrentFontFamily()
    }
    else {
      font = GetUIOption("OverrideFontName")
    }
    if (LengthOf(font) > 0) {
      style = style + "font-family:" + font + ";"
    }
    if (LengthOf(colour) = 0) {
      if (UIOptionUseGameColours()) {
        colour = game.defaultforeground
      }
      else {
        colour = GetUIOption("OverrideForeground")
      }
    }
    if (LengthOf(colour) > 0) {
      style = style + "color:" + colour + ";"
    }
    if (UIOptionUseGameFont()) {
      size = game.defaultfontsize
    }
    else {
      size = ToDouble(GetUIOption("OverrideFontSize"))
    }
    if (size > 0) {
      style = style + "font-size:" + ToString(size) + "pt;"
    }
    return (style)
  ]]></function>
  <function name="GetCurrentLinkTextFormat" type="string">
    return (GetCurrentTextFormat(GetLinkTextColour()))
  </function>
  <function name="UIOptionUseGameFont" type="boolean">
    value = GetUIOption("UseGameFont")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>
  <function name="UIOptionUseGameColours" type="boolean">
    value = GetUIOption("UseGameColours")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>
  <function name="ParamsForTextProcessor" type="dictionary">
    params = NewDictionary()
    if (not game.text_processor_this = null) {
      dictionary add (params, "this", game.text_processor_this)
    }
    if (HasAttribute(game, "text_processor_variables")) {
      foreach (key, game.text_processor_variables) {
        if (not key = "this" or game.text_processor_this = null) {
          dictionary add (params, key, DictionaryItem(game.text_processor_variables, key))
        }
      }
    }
    return (params)
  </function>
  <function name="ObjectForTextProcessor" parameters="objectname" type="object">
    if (not game.text_processor_this = null and objectname = "this") {
      object = game.text_processor_this
      if (TypeOf(object) = "object") {
        return (object)
      }
    }
    if (not game.text_processor_variables = null and DictionaryContains (game.text_processor_variables, objectname)) {
      object = DictionaryItem(game.text_processor_variables, objectname)
      if (TypeOf(object) = "object") {
        return (object)
      }
    }
    return (GetObject(objectname))
  </function>
  <function name="GetLinkTextColour" type="string">
    if (UIOptionUseGameColours()) {
      return (game.defaultlinkforeground)
    }
    else {
      return (GetUIOption("OverrideLinkForeground"))
    }
  </function>
  <function name="ProcessText" parameters="text" type="string">
    data = NewDictionary()
    dictionary add (data, "fulltext", text)
    text = ProcessTextSection(text, data)
    return (Replace(Replace(text, "@@@open@@@", "{"), "@@@close@@@", "}"))
  </function>
  <function name="ProcessTextSection" parameters="text, data" type="string"><![CDATA[
    containsUnprocessedSection = false
    open = Instr(text, "{")
      if (open > 0) {
        nestCount = 1
        searchStart = open + 1
        finished = false
        while (not finished) {
          nextOpen = Instr(searchStart, text, "{")
            nextClose = Instr(searchStart, text, "}")
          if (nextClose > 0) {
            if (nextOpen > 0 and nextOpen < nextClose) {
              nestCount = nestCount + 1
              searchStart = nextOpen + 1
            }
            else {
              nestCount = nestCount - 1
              searchStart = nextClose + 1
              if (nestCount = 0) {
                close = nextClose
                containsUnprocessedSection = true
                finished = true
              }
            }
          }
          else {
            finished = true
          }
        }
      }
      if (containsUnprocessedSection) {
        section = Mid(text, open + 1, close - open - 1)
        value = ProcessTextCommand(section, data)
        value = ProcessTextSection(value, data)
        text = Left(text, open - 1) + value + ProcessTextSection(Mid(text, close + 1), data)
      }
      return (text)
  ]]></function>
  <function name="ProcessTextCommand" parameters="section, data" type="string">
    params = NewDictionary()
    dictionary add (params, "section", section)
    dictionary add (params, "data", data)
    foreach (command, game.textprocessorcommands) {
      if (StartsWith(section, command)) {
        invoke (ScriptDictionaryItem(game.textprocessorcommands, command), params)
        if (HasString(game, "textprocessorcommandresult")) {
          result = game.textprocessorcommandresult
          game.textprocessorcommandresult = null
          return (result)
        }
      }
    }
    dot = Instr(section, ".")
    if (dot = 0) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      objectname = Left(section, dot - 1)
      attributename = Mid(section, dot + 1)
      object = ObjectForTextProcessor(objectname)
      if (object = null) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else {
        if (HasAttribute(object, attributename)) {
          type = TypeOf(object, attributename)
          switch (type) {
            case ("string", "int", "double") {
              return (ToString(GetAttribute(object, attributename)))
            }
            case ("boolean") {
              result = GetAttribute(object, attributename)
              if (result) {
                return ("true")
              }
              else {
                return ("false")
              }
            }
            default {
              return ("(" + type + ")")
            }
          }
        }
        else {
          return ("")
        }
      }
    }
  </function>
  <function name="ProcessTextCommand_Eval" parameters="section, data" type="string">
    if (StartsWith(section, "=")) {
      section = Mid(section, 2)
    }
    else {
      section = Mid(section, 6)
    }
    if (not IsRegexMatch("[^\\w\\s]", section, "tp_punctuation_check")) {
      section = section + "()"
    }
    return (ToString(eval(section)))
  </function>
  <function name="ProcessTextCommand_Either" parameters="section, data" type="string">
    command = Mid(section, 8)
    l = Tsplit(command)
    if (ListCount(l) = 1) {
      return ("@@@open@@@either " + command + "@@@close@@@")
    }
    condition = StringListItem(l, 0)
    text = StringListItem(l, 1)
    if (ListCount(l) = 2) {
      sep = Instr(text, "|")
      if (sep = 0) {
        text2 = ""
      }
      else {
        text2 = Mid(text, sep + 1)
        text = Replace(text, "|" + text2, "")
      }
    }
    else {
      text2 = StringListItem(l, 2)
    }
    result = eval(condition, ParamsForTextProcessor())
    if (result) {
      return (ProcessTextSection(text, data))
    }
    else {
      if (text2 = "") {
        return ("")
      }
      else {
        return (ProcessTextSection(text2, data))
      }
    }
  </function>
  <function name="ProcessTextCommand_Here" parameters="section, data" type="string">
    if (StartsWith(section, "here")) {
      flag = true
      command = Mid(section, 6)
    }
    else {
      flag = false
      command = Mid(section, 9)
    }
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@" + section + "@@@close@@@")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      object = Eval(condition, ParamsForTextProcessor())
      if (object = null) {
        return ("@@@open@@@" + section + "@@@close@@@")
      }
      if (object.parent = game.pov.parent and flag) {
        return (ProcessTextSection(text, data))
      }
      else if (not object.parent = game.pov.parent and not flag) {
        return (ProcessTextSection(text, data))
      }
      else {
        return ("")
      }
    }
  </function>
  <function name="ProcessTextCommand_If" parameters="section, data" type="string"><![CDATA[
    command = Mid(section, 4)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@if " + command + "@@@close@@@")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      if (not game.text_processor_this = null) {
        condition = Replace(condition, "this", game.text_processor_this.name)
      }
      operator = Instr(condition, "<=")
      if (operator <> 0) {
        operatorlength = 2
      }
      if (operator = 0) {
        operator = Instr(condition, ">=")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<>")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, ">")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "=")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        checkfor = true
        if (StartsWith(condition, "not ")) {
          checkfor = false
          condition = Mid(condition, 5)
        }
        dot = Instr(condition, ".")
        if (dot = 0) {
          result = GetBoolean(game, condition)
        }
        else {
          objectname = Left(condition, dot - 1)
          attributename = Mid(condition, dot + 1)
          object = ObjectForTextProcessor(objectname)
          if (object = null) {
            result = false
          }
          else {
            result = GetBoolean(object, attributename)
          }
        }
        if (result = checkfor) {
          return (ProcessTextSection(text, data))
        }
        else {
          return ("")
        }
      }
      else {
        lhs = Left(condition, operator - 1)
        rhs = Mid(condition, operator + operatorlength)
        op = Mid(condition, operator, operatorlength)
        dot = Instr(lhs, ".")
        if (dot = 0) {
          objectname = ""
          attributename = ""
          if (HasInt(game, lhs)) {
            objectname = "game"
            attributename = lhs
          }
          else {
            return ("@@@open@@@if " + command + "@@@close@@@")
          }
        }
        else {
          objectname = Left(lhs, dot - 1)
          attributename = Mid(lhs, dot + 1)
        }
        object = ObjectForTextProcessor(objectname)
        if (object = null) {
          return ("@@@open@@@if " + command + "@@@close@@@")
        }
        else if (not HasAttribute(object, attributename)) {
          return ("@@@open@@@if " + command + "@@@close@@@")
        }
        else {
          value = GetAttribute(object, attributename)
          if (TypeOf(value) = "object") {
            value = value.name
          }
          if (op = "=") {
            if (ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<>") {
            if (not ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">") {
            if (ToDouble(ToString(value)) > ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<") {
            if (ToDouble(ToString(value)) < ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">=") {
            if (ToDouble(ToString(value)) >= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<=") {
            if (ToDouble(ToString(value)) <= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
        }
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_Format" parameters="section, data" type="string"><![CDATA[
    html = Mid(section, 1, 1)
    section = Mid(section, 3)
    return (ProcessTextSection("<" + html + ">" + section + "</" + html + ">", data))
  ]]></function>
  <function name="ProcessTextCommand_Colour" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    com = StringListItem(ary, 0)
    c = StringListItem(ary, 1)
    list remove (ary, com)
    list remove (ary, c)
    s = Join (ary, ":")
    if (com = "back") {
      return (ProcessTextSection("<span style=\"background-color:" + c + ";\">" + s + "</span>", data))
    }
    else {
      return (ProcessTextSection("<span style=\"color:" + c + ";\">" + s + "</span>", data))
    }
  ]]></function>
  <function name="ProcessTextCommand_Popup" parameters="section, data" type="string"><![CDATA[
    section = Mid(section, 7)
    ary = Split(section, ":")
    s1 = StringListItem(ary, 0)
    list remove (ary, s1)
    s2 = Join (ary, ":")
    id = JSSafe(s1) + GetRandomInt(0, 999999999)
    link = game.defaultlinkforeground
    if (HasString(game, "altlinkforeground")) {
      link = game.altlinkforeground
    }
    s = "<span  style=\"cursor:pointer;color:" + link + ";\" onclick=\"$('#" + id + "').css('display', 'block');\">" + s1 + "</span><div id=\"" + id + "\" class=\"w3-theme-border\" style=\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:" + game.defaultbackground + ";border:2px solid " + game.defaultforeground + ";color:" + link + ";border-radius:5px;padding:5px;\" onclick=\"$('#" + id + "').css('display', 'none');\"><p>"
    s = s + s2 + "</p></div>"
    return (ProcessTextSection(s, data))
  ]]></function>
  <function name="ProcessTextCommand_Object" parameters="section, data" type="string"><![CDATA[
    objectname = Mid(section, 8)
    text = ""
    colon = Instr(objectname, ":")
    if (colon > 0) {
      text = Mid(objectname, colon + 1)
      objectname = Left(objectname, colon - 1)
    }
    object = ObjectForTextProcessor(objectname)
    if (object = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      if (LengthOf(text) = 0) {
        text = SafeXML(GetDisplayAlias(object))
      }
      if (game.enablehyperlinks) {
        linkid = ProcessTextCommand_GetNextLinkId()
        colour = ""
        if (HasString(object, "linkcolour") and GetUIOption("UseGameColours") = "true") {
          colour = object.linkcolour
        }
        else {
          colour = GetLinkTextColour()
        }
        style = GetCurrentTextFormat(colour)
        return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink elementmenu\" data-elementid=\"" + object.name + "\">" + text + "</a>")
      }
      else {
        return (text)
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_GetNextLinkId" type="string">
    if (not HasInt(game, "lastlinkid")) {
      game.lastlinkid = 0
    }
    game.lastlinkid = game.lastlinkid + 1
    return ("verblink" + game.lastlinkid)
  </function>
  <function name="ProcessTextCommand_Command" parameters="section, data" type="string"><![CDATA[
    colon = Instr(section, ":")
    command = Mid(section, colon + 1)
    text = command
    colon = Instr(command, ":")
    if (colon > 0) {
      text = Mid(command, colon + 1)
      command = Left(command, colon - 1)
    }
    style = GetCurrentLinkTextFormat()
    candidates = NewObjectList()
    foreach (cmd, ScopeCommands()) {
      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
        list add (candidates, cmd)
      }
    }
    elementid = ""
    if (ListCount(candidates) = 1) {
      cmd = ObjectListItem(candidates, 0)
      elementid = cmd.name
    }
    linkid = ProcessTextCommand_GetNextLinkId()
    dataattrs = ""
    if (game.deactivatecommandlinks) {
      dataattrs = dataattrs + "data-deactivateonclick=\"true\" "
    }
    dataattrs = dataattrs + "data-command=\"" + command + "\""
    return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink commandlink\" data-elementid=\"" + elementid + "\" " + dataattrs + ">" + ProcessTextSection(text, data) + "</a>")
  ]]></function>
  <function name="ProcessTextCommand_Exit" parameters="section, data" type="string"><![CDATA[
    exitname = Mid(section, 6)
    exit = GetObject(exitname)
    if (exit = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      verbs = GetDisplayVerbs(exit)
      alias = GetDisplayAlias(exit)
      command = LCase(StringListItem(verbs, 0)) + " " + alias
      style = GetCurrentLinkTextFormat()
      return ("<a style=\"" + style + "\" class=\"cmdlink exitlink\" data-elementid=\"" + exit.name + "\" data-command=\"" + command + "\">" + alias + "</a>")
    }
  ]]></function>
  <function name="ProcessTextCommand_Once" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return (ProcessTextSection(Mid(section, 6), data))
    }
    else {
      return ("")
    }
  </function>
  <function name="ProcessTextCommand_NotFirst" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return ("")
    }
    else {
      return (ProcessTextSection(Mid(section, 10), data))
    }
  </function>
  <function name="ProcessTextCommand_Random" parameters="section, data" type="string">
    elements = Mid(section, 8)
    elementslist = Tsplit(elements)
    index = GetRandomInt(0, ListCount(elementslist) - 1)
    return (ProcessTextSection(ListItem(elementslist, index), data))
  </function>
  <function name="Tsplit" parameters="splittext" type="stringlist"><![CDATA[
    itemlist = NewStringList()
    sections = 0
    startpos = 1
    for (i, 1, LengthOf(splittext)) {
      if (Mid(splittext, i, 1) = "{") {
          sections = sections + 1
        }
        if (Mid(splittext, i, 1) = "}") {
        sections = sections - 1
      }
      if (Mid(splittext, i, 1) = ":" and 0 >= sections) {
        item = Mid(splittext, startpos, i - startpos)
        list add (itemlist, item)
        startpos = i + 1
      }
    }
    item = Mid(splittext, startpos)
    list add (itemlist, item)
    return (itemlist)
  ]]></function>
  <function name="ProcessTextCommand_RandomAlias" parameters="section, data" type="string"><![CDATA[
    objectname = Mid(section, 8)
    object = ObjectForTextProcessor(objectname)
    if (object = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      count = ListCount(object.alt)
      if (count > 0) {
        return (ListItem(object.alt, GetRandomInt(0, count - 1)))
      }
      else {
        return ("")
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_Img" parameters="section, data" type="string"><![CDATA[
    filename = Mid(section, 5)
    return ("<img src=\"" + GetFileURL(filename) + "\" />")
  ]]></function>
  <function name="ProcessTextCommand_Counter" parameters="section, data" type="string">
    section = Mid(section, 9)
    if (HasAttribute(game, section)) {
      return (ToString(GetAttribute(game, section)))
    }
    else {
      return ("0")
    }
  </function>
  <function name="ProcessTextCommand_Select" parameters="section, data" type="string"><![CDATA[
    elements = Mid(section, 8)
    elementslist = Tsplit(elements)
    objectandatt = StringListItem (elementslist, 0)
    list remove (elementslist, objectandatt)
    objectandattlist = Split(objectandatt, ".")
    if (not ListCount (objectandattlist) = 2) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      objectname = StringListItem(objectandattlist, 0)
      object = ObjectForTextProcessor(objectname)
      if (object = null) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else if (not HasInt (object, StringListItem(objectandattlist, 1))) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else {
        if (Instr(elements, "|") > 0) {
          elementslist = Split(Join(elementslist, ":"), "|")
        }
        index = GetInt(object, StringListItem(objectandattlist, 1))
        if ((0 > index) or (index >= Listcount(elementslist))) {
          return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
        }
        else {
          return (ProcessTextSection(ListItem(elementslist, index), data))
        }
      }
    }
  ]]></function>
  <function name="SetFramePicture" parameters="filename"><![CDATA[
    JS.setPanelContents ("<img src=\"" + GetFileURL(filename) + "\" onload=\"setPanelHeight()\"/>")
    game.panelcontents = filename
  ]]></function>
  <function name="ClearFramePicture">
    JS.setPanelContents ("")
    game.panelcontents = null
  </function>
  <function name="ClearScreen">
    JS.clearScreen ()
  </function>
  <function name="SetForegroundColour" parameters="colour">
    // request (Foreground, colour)
    game.defaultforeground = colour
  </function>
  <function name="SetBackgroundColour" parameters="colour">
    JS.setBackground (colour)
    game.defaultbackground = colour
  </function>
  <function name="SetLinkForegroundColour" parameters="colour">
    // request (LinkForeground, colour)
    game.defaultlinkforeground = colour
  </function>
  <function name="SetFontName" parameters="font">
    game.defaultfont = font
    game.defaultwebfont = ""
  </function>
  <function name="SetWebFontName" parameters="font">
    AddExternalStylesheet ("https://fonts.googleapis.com/css?family=" + Replace(font, " ", "+"))
    game.defaultwebfont = font
  </function>
  <function name="AddExternalStylesheet" parameters="stylesheet">
    if (game.externalstylesheets = null) {
      game.externalstylesheets = NewStringList()
    }
    if (not ListContains(game.externalstylesheets, stylesheet)) {
      list add (game.externalstylesheets, stylesheet)
      JS.addExternalStylesheet (stylesheet)
    }
  </function>
  <function name="SetFontSize" parameters="size">
    game.defaultfontsize = size
  </function>
  <function name="PrintCentered" parameters="text">
    SetAlignment ("center")
    msg (text)
    SetAlignment ("left")
  </function>
  <function name="ShowYouTube" parameters="id">
    JS.AddYouTube (id)
  </function>
  <function name="ShowVimeo" parameters="id">
    JS.AddVimeo (id)
  </function>
  <function name="DisplayHttpLink" parameters="text, url, https"><![CDATA[
    pos = Instr(url, "://")
    if (pos > 0) {
      url = Mid(url, pos + 3)
    }
    if (https) {
      url = "https://" + url
    }
    else {
      url = "http://" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="DisplayMailtoLink" parameters="text, url"><![CDATA[
    if (Instr(url, "mailto:") = 0) {
      url = "mailto:" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="CommandLink" parameters="cmd, text" type="string">
    return ("{command:" + cmd + ":" + text + "}")
  </function>
  <function name="Log" parameters="text"><![CDATA[
    // request (Log, text)
    // Replacing double quotes with 2 single quotes
    text = Replace(text, "\"", "''")
    // Changing syntax from single quotes to escaped double quotes to allow single quotes in log entries
    if (not GetBoolean(game, "nohtmllog")) {
      JS.eval ("if(typeof(addLogEntry)===\"function\"){ addLogEntry(\""+text+"\"); };")
    }
    JS.eval ("if(!webPlayer && typeof(WriteToLog)===\"function\"){var s = \""+text+"\";WriteToLog(s);}")
  ]]></function>
  <function name="SetBackgroundImage" parameters="filename">
    JS.SetBackgroundImage (GetFileURL(filename))
    game.backgroundimage = filename
  </function>
  <function name="SetBackgroundOpacity" parameters="opacity">
    JS.SetBackgroundOpacity (opacity)
    game.backgroundopacity = opacity
    game.setbackgroundopacity = true
  </function>
  <function name="DisplayList" parameters="list, numbers"><![CDATA[
    if (numbers) {
      result = "<ol>"
    }
    else {
      result = "<ul>"
    }
    foreach (item, list) {
      result = result + "<li>" + item + "</li>"
    }
    if (numbers) {
      result = result + "</ol>"
    }
    else {
      result = result + "</ul>"
    }
    msg (result)
  ]]></function>
  <function name="SetAlignment" parameters="align">
    JS.createNewDiv (align)
  </function>
  <function name="GetCurrentFontFamily" type="string">
    if (game.defaultwebfont = null) {
      return (game.defaultfont)
    }
    else {
      if (game.defaultwebfont = "") {
        return (game.defaultfont)
      }
      else {
        return ("'" + game.defaultwebfont + "', " + game.defaultfont)
      }
    }
  </function>
  <function name="FormatList" parameters="list, joiner, lastjoiner, nothing" type="string"><![CDATA[
    if (ListCount (list) = 0) {
      return (nothing)
    }
    else {
      result = ""
      count = 0
      listLength = ListCount(list)
      foreach (item, list) {
        if (TypeOf(item) = "object") {
          result = result + GetDisplayName(item)
        }
        else {
          result = result + item
        }
        count = count + 1
        if (count = listLength - 1) {
          if (not IsRegexMatch("^\\W", lastjoiner)) {
            result = result + " "
          }
          result = result + lastjoiner + " "
        }
        else if (count < listLength) {
          result = result + joiner + " "
        }
      }
      return (Trim (result))
    }
  ]]></function>
  <function name="Spaces" parameters="number" type="string"><![CDATA[
    game.command_successful = True
    text = ""
    for (x, 1, number) {
      text = text+ "&nbsp;"
    }
    return (text)
  ]]></function>
  <function name="ToRoman" parameters="n" type="string"><![CDATA[
    if (not TypeOf(n) = "int") {
      error ("ToRoman can only handle ints")
    }
    arabic = Split("1000;900;500;400;100;90;50;40;10;9;5;4;1", ";")
    roman = Split("M;CM;D;CD;C;XC;L;XL;X;IX;V;IV;I", ";")
    result = ""
    for (i, 0, 12) {
      a = ToInt(StringListItem(arabic, i))
      r = StringListItem(roman, i)
      while (n >= a) {
        result = result + r
        n = n - a
      }
    }
    return (result)
  ]]></function>
  <function name="Grid_SetScale" parameters="scale">
    JS.Grid_SetScale (scale)
  </function>
  <function name="Grid_CalculateMapCoordinates" parameters="room, playerobject"><![CDATA[
    if (room.parent <> null) {
      if (room.grid_parent_offset_auto) {
        room.grid_parent_offset_x = (room.parent.grid_width - room.grid_width) /2.0
        room.grid_parent_offset_y = (room.parent.grid_length - room.grid_length) /2.0
      }
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") - room.grid_parent_offset_x)
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") - room.grid_parent_offset_y)
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
      room.parent.grid_render = true
      Grid_CalculateMapCoordinates (room.parent, playerobject)
    }
    // go through all exits in room, set x,y co-ordinates for the rooms they point to
    foreach (exit, AllExits()) {
      if (exit.parent = room and not GetBoolean(exit, "lookonly")) {
        if (DoesInherit(exit, "northdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "eastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"))
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "westdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"))
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "northwestdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "northeastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southwestdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southeastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "updirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") + exit.grid_length)
          exit.grid_render = false
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "downdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") - exit.grid_length)
          exit.grid_render = false
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "indirection") or DoesInherit(exit, "outdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          exit.grid_render = false
          exit.to.grid_render = true
        }
      }
    }
  ]]></function>
  <function name="Grid_DrawPlayerInRoom" parameters="room">
    if (room.grid_render) {
      Grid_DrawRoom (room, false, game.pov)
      player_x = Grid_GetGridCoordinateForPlayer(game.pov, room, "x") + room.grid_width/2.0
      player_y = Grid_GetGridCoordinateForPlayer(game.pov, room, "y") + room.grid_length/2.0
      player_z = Grid_GetGridCoordinateForPlayer(game.pov, room, "z")
      // Grid_DrawPlayer(x, y, z, radius, border, borderWidth, fill)
      JS.Grid_DrawPlayer (player_x, player_y, player_z, 5, "black", 2, "yellow")
    }
  </function>
  <function name="Grid_DrawRoom" parameters="room, redraw, playerobject"><![CDATA[
    if (room.grid_render) {
      if (redraw or not Grid_GetRoomBooleanForPlayer(playerobject, room, "grid_isdrawn")) {
        if (room.parent <> null) {
          Grid_DrawRoom (room.parent, redraw, playerobject)
        }
        JS.Grid_DrawBox (Grid_GetGridCoordinateForPlayer(game.pov, room, "x"), Grid_GetGridCoordinateForPlayer(game.pov, room, "y"), Grid_GetGridCoordinateForPlayer(game.pov, room, "z"), room.grid_width, room.grid_length, room.grid_border, room.grid_borderwidth, room.grid_fill, room.grid_bordersides)
        if (LengthOf(room.grid_label) > 0) {
          label_x = Grid_GetGridCoordinateForPlayer(game.pov, room, "x") + room.grid_width/2.0
          label_y = (Grid_GetGridCoordinateForPlayer(game.pov, room, "y") + room.grid_length/2.0) - 0.5
          JS.Grid_DrawLabel (label_x, label_y, Grid_GetGridCoordinateForPlayer(game.pov, room, "z"), room.grid_label, room.grid_label_colour)
        }
        foreach (exit, AllExits()) {
          if (exit.grid_render and exit.parent = room and exit.grid_length > 0) {
            Grid_DrawLine (Grid_GetGridCoordinateForPlayer(game.pov, exit, "x"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "y"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "end_x"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "end_y"), game.mapexitcolour, game.mapexitwidth)
          }
        }
        Grid_SetRoomBooleanForPlayer (playerobject, room, "grid_isdrawn", true)
      }
    }
  ]]></function>
  <function name="Grid_ShowCustomLayer" parameters="visible">
    if (visible) {
      JS.Grid_ShowCustomLayer (true)
    }
    else {
      JS.Grid_ShowCustomLayer (false)
    }
  </function>
  <function name="Grid_ClearCustomLayer">
    JS.Grid_ClearCustomLayer ()
  </function>
  <function name="Grid_DrawLine" parameters="x1, y1, x2, y2, border, borderWidth">
    JS.Grid_DrawLine (x1, y1, x2, y2, border, borderWidth)
  </function>
  <function name="Grid_DrawArrow" parameters="id, x1, y1, x2, y2, border, borderWidth">
    JS.Grid_DrawArrow (id, x1, y1, x2, y2, border, borderWidth)
  </function>
  <function name="Grid_DrawGridLines" parameters="x1, y1, x2, y2, border">
    JS.Grid_DrawGridLines (x1, y1, x2, y2, border)
  </function>
  <function name="Grid_SetCentre" parameters="x, y">
    JS.Grid_SetCentre (x, y)
  </function>
  <function name="Grid_DrawSquare" parameters="id, x, y, width, height, text, fill">
    JS.Grid_DrawSquare (id, x, y, width, height, text, fill)
  </function>
  <function name="Grid_LoadSvg" parameters="data, id">
    JS.Grid_LoadSvg (data, id)
  </function>
  <function name="Grid_DrawSvg" parameters="id, symbolid, x, y, width, height">
    JS.Grid_DrawSvg (id, symbolid, x, y, width, height)
  </function>
  <function name="Grid_DrawImage" parameters="id, url, x, y, width, height">
    JS.Grid_DrawImage (id, url, x, y, width, height)
  </function>
  <function name="Grid_AddNewShapePoint" parameters="x, y">
    JS.Grid_AddNewShapePoint (x, y)
  </function>
  <function name="Grid_DrawShape" parameters="id, border, fill, opacity">
    JS.Grid_DrawShape (id, border, fill, opacity)
  </function>
  <function name="JS_GridSquareClick" parameters="parameterstring">
    parameters = Split(parameterstring, ";")
    x = ToInt(StringListItem(parameters, 0))
    y = ToInt(StringListItem(parameters, 1))
    GridSquareClick (x, y)
  </function>
  <function name="GridSquareClick" parameters="x, y">
    // Copy this function into your game to handle grid square clicks
  </function>
  <function name="Grid_Redraw">
    foreach (object, AllObjects()) {
      if (Grid_GetRoomBooleanForPlayer(game.pov, object, "grid_isdrawn")) {
        Grid_DrawRoom (object, true, game.pov)
      }
    }
  </function>
  <function name="Grid_SetGridCoordinateForPlayer" parameters="playerobject, room, coordinate, value">
    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    if (DictionaryContains(coordinates, coordinate)) {
      dictionary remove (coordinates, coordinate)
    }
    dictionary add (coordinates, coordinate, value * 1.0)
  </function>
  <function name="Grid_GetGridCoordinateForPlayer" parameters="playerobject, room, coordinate" type="double">
    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    return (DictionaryItem(coordinates, coordinate))
  </function>
  <function name="Grid_SetRoomBooleanForPlayer" parameters="playerobject, room, coordinate, value">
    datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    if (DictionaryContains(datadictionary, coordinate)) {
      dictionary remove (datadictionary, coordinate)
    }
    dictionary add (datadictionary, coordinate, value)
  </function>
  <function name="Grid_GetRoomBooleanForPlayer" parameters="playerobject, room, attribute" type="boolean">
    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)
    if (not DictionaryContains(coordinatedata, room.name)) {
      return (false)
    }
    else {
      datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
      if (DictionaryContains(datadictionary, attribute)) {
        return (DictionaryItem(datadictionary, attribute))
      }
      else {
        return (false)
      }
    }
  </function>
  <function name="Grid_GetPlayerCoordinateDictionary" parameters="playerobject" type="dictionary">
    if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
      return (Grid_GetPlayerCoordinateDictionary(playerobject.grid_coordinates_delegate))
    }
    else {
      if (not HasAttribute(playerobject, "grid_coordinates")) {
        playerobject.grid_coordinates = NewDictionary()
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "x", 0)
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "y", 0)
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "z", 0)
        playerobject.parent.grid_render = true
        Grid_CalculateMapCoordinates (playerobject.parent, playerobject)
      }
      return (playerobject.grid_coordinates)
    }
  </function>
  <function name="Grid_GetPlayerCoordinatesForRoom" parameters="playerobject, room" type="dictionary">
    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)
    if (not DictionaryContains(coordinatedata, room.name)) {
      dictionary add (coordinatedata, room.name, NewDictionary())
    }
    return (DictionaryItem(coordinatedata, room.name))
  </function>
  <function name="MergePOVCoordinates"><![CDATA[
    coordinateowner = GetCoordinateOwner(game.pov)
    foreach (obj, GetDirectChildren(game.pov.parent)) {
      if (obj <> game.pov and HasAttribute(obj, "grid_coordinates")) {
        objcoordinateowner = GetCoordinateOwner(obj)
        if (coordinateowner <> objcoordinateowner) {
          MapPOVCoordinates (objcoordinateowner, coordinateowner)
        }
      }
    }
  ]]></function>
  <function name="GetCoordinateOwner" parameters="playerobject" type="object">
    if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
      return (GetCoordinateOwner(playerobject.grid_coordinates_delegate))
    }
    else {
      return (playerobject)
    }
  </function>
  <function name="MapPOVCoordinates" parameters="source, target">
    sourcecoordinates = Grid_GetPlayerCoordinateDictionary(source)
    targetcoordinates = Grid_GetPlayerCoordinateDictionary(target)
    xoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "x") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "x")
    yoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "y") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "y")
    zoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "z") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "z")
    foreach (roomname, sourcecoordinates) {
      coordinatedata = DictionaryItem(sourcecoordinates, roomname)
      if (not DictionaryContains(targetcoordinates, roomname)) {
        newroomdata = NewDictionary()
        dictionary add (targetcoordinates, roomname, newroomdata)
        MapPOVCoordinate (coordinatedata, newroomdata, "x", xoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "y", yoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "z", zoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "end_x", xoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "end_y", yoffset)
      }
      else {
        newroomdata = DictionaryItem(targetcoordinates, roomname)
      }
      if (DictionaryContains(coordinatedata, "grid_isdrawn")) {
        if (DictionaryContains(newroomdata, "grid_isdrawn")) {
          dictionary remove (newroomdata, "grid_isdrawn")
        }
        dictionary add (newroomdata, "grid_isdrawn", DictionaryItem(coordinatedata, "grid_isdrawn"))
      }
    }
    source.grid_coordinates_delegate = target
    Grid_Redraw
    Grid_DrawPlayerInRoom (game.pov.parent)
  </function>
  <function name="MapPOVCoordinate" parameters="sourcedata, targetdata, name, offset">
    if (DictionaryContains(sourcedata, name)) {
      value = DictionaryItem(sourcedata, name)
      dictionary add (targetdata, name, value + offset)
    }
  </function>
  <function name="DiceRoll" parameters="dice" type="int"><![CDATA[
    if (TypeOf(dice) = "int") {
      return (dice)
    }
    p1 = Instr(dice, "d")
    p2 = Instr(dice, "+")
    p4 = Instr(dice, "-")
    p3 = LengthOf(dice)
    if (p1 = 0) {
      if (IsInt(dice)) {
        return (ToInt(dice))
      }
      error ("Invalid dice type: " + dice)
    }
    number_str = Mid(dice, 1, p1 - 1)
    if (LengthOf(number_str) = 0) {
      number = 1
    }
    else {
      number = ToInt(number_str)
    }
    if (p2 > 0) {
      sides = ToInt(Mid(dice, p1 + 1, p2 - p1 - 1))
      total = ToInt(Mid(dice, p2 + 1, p3 - p2))
    }
    else if (p4 > 0) {
      sides = ToInt(Mid(dice, p1 + 1, p4 - p1 - 1))
      total = -ToInt(Mid(dice, p4 + 1, p3 - p2))
    }
    else {
      sides = ToInt(Mid(dice, p1 + 1, p3 - p1))
      total = 0
    }
    for (i, 1, number) {
      total = total + GetRandomInt(1, sides)
    }
    return (total)
  ]]></function>
  <function name="PickOneObject" parameters="lst" type="object">
    n = ListCount(lst)
    if (n = 0) {
      return (null)
    }
    index = GetRandomInt(0, n - 1)
    return (ObjectListItem(lst, index))
  </function>
  <function name="PickOneString" parameters="lst" type="string">
    if (TypeOf(lst) = "string") {
      lst = Split(lst, ";")
    }
    n = ListCount(lst)
    if (n = 0) {
      return ("")
    }
    index = GetRandomInt(0, n - 1)
    return (StringListItem(lst, index))
  </function>
  <function name="PickOneChild" parameters="obj" type="object">
    return (PickOneObject(GetDirectChildren(obj)))
  </function>
  <function name="PickOneChildOfType" parameters="room, typename" type="object">
    l = NewObjectList()
    foreach (o, GetDirectChildren(room)) {
      if (DoesInherit(o, typename)) {
        list add (l, o)
      }
    }
    return (PickOneObject(l))
  </function>
  <function name="PickOneExit" parameters="room" type="object">
    return (PickOneObject(ScopeExitsForRoom (room)))
  </function>
  <function name="PickOneUnlockedExit" parameters="room" type="object">
    return (PickOneObject(ScopeUnlockedExitsForRoom (room)))
  </function>
  <function name="TextFX_Typewriter" parameters="text, speed">
    TextFX_Typewriter_Internal (text, speed, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)
  </function>
  <function name="TextFX_Typewriter_Internal" parameters="text, speed, font, color, size">
    JS.TextFX.Typewriter (text, speed, font, color, size)
  </function>
  <function name="TextFX_Unscramble" parameters="text, speed, reveal">
    TextFX_Unscramble_Internal (text, speed, reveal, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)
  </function>
  <function name="TextFX_Unscramble_Internal" parameters="text, speed, reveal, font, color, size">
    JS.TextFX.Unscramble (text, speed, reveal, font, color, size)
  </function>
  <function name="_DoWear" parameters="object" type="boolean"><![CDATA[
    // Is this possible?
    if (not HasAttribute(object,"worn") or not HasAttribute(object,"wear_slots")) {
      // No, not a garment
      msg (DynamicTemplate("WearUnsuccessful", object))
      return (false)
    }
    if (object.parent = game.pov and object.worn = true) {
      // No, already worn
      msg (DynamicTemplate("AlreadyWearing", object))
      return (false)
    }
    if (not ListContains(ScopeInventory(), object)) {
      // No, not held
      msg (DynamicTemplate("CannotWearIfNotHeld", object))
      return (false)
    }
    // Are other worn garments in the way?
    obj = _GetOuterForGarment(game.pov, object)
    if (not obj = null) {
      if (obj.wear_layer > object.wear_layer or obj.wear_layer = 0 or object.wear_layer = 0) {
        msg (DynamicTemplate("CannotWearOver", obj))
        return (false)
      }
      if (obj.wear_layer = object.wear_layer) {
        msg (DynamicTemplate("CannotWearWith", obj))
        return (false)
      }
    }
    if (not TestGarment(object)) {
      return (false)
    }
    WearGarment (object)
    if (object.wearmsg = null) {
      P (DynamicTemplate("WearSuccessful",object))
    }
    else {
      P (object.wearmsg)
    }
    // do after
    if (HasScript(object, "onafterwear")) {
      do (object, "onafterwear")
    }
    else if (HasString(object, "onafterwear")) {
      P (object.onafterwear)
    }
    AfterWear
    return (true)
  ]]></function>
  <function name="WearGarment" parameters="object">
    if (GetBoolean(object, "multistate")) {
      object.multistate_status = 1
    }
    else {
      object.multistate_status = 0
    }
    if (object.alias = null) {
      object.alias = object.name
    }
    if (object.listalias = null) {
      object.listalias = object.alias
    }
    if (object.original_alias = null) {
      object.original_drop = object.drop
      object.original_alias = object.alias
      object.original_listalias = object.listalias
      object.original_bonusatts = object.bonusatts
      object.original_wearslots = object.wear_slots
      object.display = GetDisplayAlias(object)
    }
    object.parent = _GetWornClothingLocation()
    object.worn = True
    object.drop = false
    _SetGarmentAlias (object)
    _SetMultistate (object)
    SetVerbs
    SetBonuses (object, true)
    if (HasInt(game.pov, "maxobjects")) {
      game.pov.maxobjects = game.pov.maxobjects + 1
    }
    // Do error checking now so item can be put on even if multistate is going to fail
    if (GetBoolean(object, "multistate")) {
      if (not HasAttribute(object, "multistate_descriptors")) {
        error ("No descriptors for multistate clothing: " + object.name)
      }
      if (not HasAttribute(object, "multistate_verbs")) {
        error ("No verbs for multistate clothing: " + object.name)
      }
      if (not HasAttribute(object, "multistate_wearslots")) {
        error ("No wearslots for multistate clothing: " + object.name)
      }
      statecount = ListCount(object.multistate_descriptors)
      if (not statecount = ListCount(object.multistate_verbs)) {
        error ("Mismatch in lists for multistate clothing: " + object.name)
      }
      if (not statecount = ListCount(object.multistate_wearslots)) {
        error ("Mismatch in lists for multistate clothing: " + object.name)
      }
      object.original_wearslots = object.wear_slots
    }
  </function>
  <function name="_DoRemove" parameters="object" type="boolean"><![CDATA[
    if (not ListContains(GetAllChildObjects(game.pov), object)) {
      msg (DynamicTemplate("CannotRemoveIfNotHeld", object))
      return (false)
    }
    if (not GetBoolean(object, "worn")) {
      msg (DynamicTemplate("CannotRemoveIfNotWearing", object))
      return (false)
    }
    if (not GetBoolean(object, "removeable")) {
      if (HasString(object, "notremoveablemessage")) {
        msg (object.notremoveablemessage)
      }
      else {
        msg (DynamicTemplate("NotRemovable", object))
      }
      return (false)
    }
    if (HasInt(game.pov, "maxobjects")) {
      if (ListCount(GetAllChildObjects(game.pov)) >= game.pov.maxobjects) {
        msg (DynamicTemplate("MaxObjectsInInventory", object))
        return (false)
      }
    }
    obj = _GetOuterForGarment(game.pov, object)
    if (not obj = null) {
      if (obj.wear_layer > object.wear_layer) {
        msg (DynamicTemplate("RemoveFirst", obj))
        return (false)
      }
    }
    if (not TestRemove(object)) {
      return (false)
    }
    RemoveGarment (object)
    if (object.removemsg = null) {
      P (DynamicTemplate("RemoveSuccessful",object))
    }
    else {
      P (object.removemsg)
    }
    // do after
    if (HasScript(object, "onafterremove")) {
      do (object, "onafterremove")
    }
    else if (HasString(object, "onafterremove")) {
      P (object.onafterremove)
    }
    AfterRemove
    return (true)
  ]]></function>
  <function name="RemoveGarment" parameters="object"><![CDATA[
    SetBonuses (object, false)
    object.worn = false
    object.drop = object.original_drop
    object.alias = object.original_alias
    object.multistate_status = 0
    if (HasString(object, "listalias")) {
      if (StartsWith(object.listalias, "<span style=\"color:blue\">")) {
        object.listalias = null
        do (object, "colourmylistalias")
      }
      else {
        object.listalias = object.original_listalias
      }
    }
    object.parent = game.pov
    if (HasInt(game.pov, "maxobjects")) {
      game.pov.maxobjects = game.pov.maxobjects - 1
    }
    SetVerbs
  ]]></function>
  <function name="Slots" type="stringlist">
    sl = NewStringList()
    foreach (o, AllObjects()) {
      if (HasAttribute(o, "wear_slots")) {
        foreach (s, o.wear_slots) {
          if (not ListContains(sl, s)) {
            list add (sl, s)
          }
        }
      }
    }
    return (sl)
  </function>
  <function name="GetDisplayGarment" parameters="obj" type="string"><![CDATA[
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    if (HasString(obj, "original_alias")) {
      result = prefix + obj.original_alias
    }
    else {
      result = prefix + obj.alias
    }
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]></function>
  <function name="GetDescriptor" parameters="object" type="string">
    if (object.multistate_status = 0) {
      return (" (" + object.wornmodifier + ")")
    }
    s = StringListItem(object.multistate_descriptors, object.multistate_status - 1)
    if (s = "*") {
      return (" (" + object.wornmodifier + ")")
    }
    return (" (" + object.wornmodifier + " " + s + ")")
  </function>
  <function name="SetMultistate" parameters="object, state"><![CDATA[
    if (state < 1) {
      error ("Attempt to set state to " + state + " for " + object.name)
    }
    if (state > ListCount(object.multistate_descriptors)) {
      error ("Attempt to set state to " + state + " for " + object.name + " (max " + ListCount(object.multistate_descriptors) + ")")
    }
    if (not object.multistate_status = state) {
      SetBonuses (object, false)
      object.multistate_status = state
      _SetGarmentAlias (object)
      _SetMultistate (object)
      SetBonuses (object, true)
      SetVerbs
    }
  ]]></function>
  <function name="GetOuterFor" parameters="char, slot" type="object"><![CDATA[
    garment = null
    foreach (o, _GetList(char, slot)) {
      if (garment = null) {
        garment = o
      }
      else if (o.wear_layer > garment.wear_layer) {
        garment = o
      }
    }
    return (garment)
  ]]></function>
  <function name="ListWornFor" parameters="char" type="objectlist">
    return (_GetList(char, null))
  </function>
  <function name="ListVisibleFor" parameters="char" type="objectlist">
    ol = newObjectList()
    foreach (s, Slots()) {
      o = GetOuterFor(char, s)
      if (not o = null and not ListContains(ol, o)) {
        list add (ol, o)
      }
    }
    return (ol)
  </function>
  <function name="GetArmourFor" parameters="char" type="int">
    total = 2 * _GetSlotArmour(char, "head") + 3 * _GetSlotArmour(char, "torso")
    foreach (s, Split("feet|legs|shoulders|arms|hands", "|")) {
      total = total + _GetSlotArmour(char, s)
    }
    return (total)
  </function>
  <function name="GetOuter" parameters="slot" type="object">
    return (GetOuterFor(game.pov, slot))
  </function>
  <function name="GetArmour" type="int">
    return (GetArmourFor(game.pov))
  </function>
  <function name="SetVerbs">
    foreach (o, GetAllChildObjects(game.pov)) {
      if (DoesInherit(o, "wearable")) {
        if (HasAttribute(o, "wear_adjverbs")) {
          if (o.wear_adjverbs) {
            if (HasAttribute(o, "wear_slots") and HasInt(o, "wear_layer")) {
              _SetVerbsForGarment (o)
            }
            if (not HasString(o, "alias")) {
              o.alias = o.name
            }
            if (not HasString(o, "listalias")) {
              o.listalias = o.alias
            }
          }
        }
      }
    }
  </function>
  <function name="WornCount" type="int">
    count = 0
    foreach (o, GetAllChildObjects(game.pov)) {
      if (GetBoolean(o, "worn")) {
        count = count + 1
      }
    }
    return (count)
  </function>
  <function name="ListClothes" type="string">
    l = NewStringList()
    foreach (obj, ListWornFor(game.pov)) {
      list add (l, GetDisplayGarment(obj))
    }
    return (FormatList(l, ",", "and", "nothing"))
  </function>
  <function name="SetBonuses" parameters="garment, wearflag">
    if (HasString(garment, "bonusatts")) {
      foreach (att, Split(garment.bonusatts, ";")) {
        bonus = 1
        plusarray = Split(att, "+")
        minusarray = Split(att, "-")
        if (ListCount(plusarray) = 2) {
          att = StringListitem(plusarray, 0)
          if (not IsInt(StringListitem(plusarray, 1))) {
            error ("Bonus attribute for " + garment.name + " not properly formatted: " + garment.bonusatts)
          }
          bonus = ToInt(StringListitem(plusarray, 1))
        }
        if (ListCount(minusarray) = 2) {
          att = StringListitem(minusarray, 0)
          if (not IsInt(StringListitem(minusarray, 1))) {
            error ("Negative bonus attribute for " + garment.name + " not properly formatted: " + garment.bonusatts)
          }
          bonus = -ToInt(StringListitem(minusarray, 1))
        }
        if (not wearflag) {
          bonus = -bonus
        }
        bonus = ClothingBonusMultiplier() * bonus
        n = GetInt(game.pov, att) + bonus
        set (player, att, n)
      }
    }
  </function>
  <function name="SetAlias" parameters="object, alias">
    SetListAlias (object, alias, alias)
  </function>
  <function name="SetListAlias" parameters="object, alias, listalias">
    object.alias = alias
    object.listalias = listalias
    if (Equal(object.worn, true)) {
      object.original_alias = object.alias
      object.original_listalias = object.listalias
      object.display = GetDisplayAlias(object)
      _SetGarmentAlias (object)
    }
  </function>
  <function name="_SetMultistate" parameters="object">
    if (GetBoolean(object, "multistate")) {
      ws = StringListItem(object.multistate_wearslots, object.multistate_status - 1)
      if (ws = "*") {
        object.wear_slots = object.original_wearslots
      }
      else {
        object.wear_slots = Split(ws, ";")
      }
      wv = StringListItem(object.multistate_verbs, object.multistate_status - 1)
      if (wv = "*") {
        object.wornverbs = null
      }
      else {
        object.wornverbs = wv
      }
      ba = StringListItem(object.multistate_bonusatts, object.multistate_status - 1)
      if (ba = "*") {
        object.bonusatts = object.original_bonusatts
      }
      else {
        object.bonusatts = ba
      }
    }
  </function>
  <function name="_SetGarmentAlias" parameters="object"><![CDATA[
    ext = GetDescriptor(object)
    object.alias = object.display + ext
    if (HasString(object, "listalias")) {
      if (StartsWith(object.listalias, "<span style=\"color:blue\">")) {
        object.listalias = null
        do (object, "colourmylistalias")
      }
      else {
        object.listalias = object.original_listalias + ext
      }
    }
  ]]></function>
  <function name="_GetWornClothingLocation" type="object">
    foreach (o, GetDirectChildren(game.pov)) {
      if (GetBoolean(o, "wornclothinglocation")) {
        return (o)
      }
    }
    return (game.pov)
  </function>
  <function name="_GetOuterForGarment" parameters="char, garment" type="object">
    foreach (slot, garment.wear_slots) {
      obj = GetOuterFor(char, slot)
      if (not obj = null and not obj = garment) {
        return (obj)
      }
    }
    return (null)
  </function>
  <function name="_SetVerbList" parameters="garment, list, s">
    garment.inventoryverbs = list
    if (not s = null) {
      if (not s = "") {
        foreach (s2, Split(s, ";")) {
          list add (garment.inventoryverbs, s2)
        }
      }
    }
  </function>
  <function name="_SetVerbsForGarment" parameters="garment"><![CDATA[
    outer = _GetOuterForGarment(game.pov, garment)
    if (not garment.worn) {
      if (outer = null) {
        _SetVerbList (garment, Split("Look at;Drop;Wear", ";"), garment.invverbs)
      }
      else if (outer.wear_layer < garment.wear_layer) {
        _SetVerbList (garment, Split("Look at;Drop;Wear", ";"), garment.invverbs)
      }
      else {
        _SetVerbList (garment, Split("Look at;Drop", ";"), garment.invverbs)
      }
    }
    else {
      if (outer = null) {
        if (garment.removeable) {
          _SetVerbList (garment, Split("Look at;Remove", ";"), garment.wornverbs)
        }
        else {
          _SetVerbList (garment, Split("Look at", ";"), garment.wornverbs)
        }
      }
      else if (outer.wear_layer < garment.wear_layer) {
        if (garment.removeable) {
          _SetVerbList (garment, Split("Look at;Remove", ";"), garment.wornverbs)
        }
        else {
          _SetVerbList (garment, Split("Look at", ";"), garment.wornverbs)
        }
      }
      else {
        garment.inventoryverbs = Split("Look at", ";")
      }
    }
  ]]></function>
  <function name="_GetList" parameters="char, slot" type="objectlist">
    garments = NewObjectList()
    foreach (o, GetAllChildObjects(char)) {
      if (HasAttribute(o, "wear_slots") and HasInt(o, "wear_layer") and GetBoolean(o, "worn")) {
        if (ListContains(o.wear_slots, slot) or slot = null) {
          list add (garments, o)
        }
      }
    }
    return (garments)
  </function>
  <function name="_GetSlotArmour" parameters="char, slot" type="int"><![CDATA[
    total = 0
    max = 0
    foreach (o, _GetList(char, slot)) {
      total = total + o.armour
      if (o.armour > max) {
        max = o.armour
      }
    }
    return (total + max)
  ]]></function>
  <function name="ClothingBonusMultiplier" type="int">
    return (1)
  </function>
  <function name="AfterRemove">
  </function>
  <function name="AfterWear">
  </function>
  <function name="P" parameters="s">
    msg (s)
  </function>
  <function name="UpdateArmour">
  </function>
  <function name="TestGarment" parameters="object" type="boolean">
    return (true)
  </function>
  <function name="TestRemove" parameters="object" type="boolean">
    return (true)
  </function>
  <function name="ParseToQuestCode" parameters="text"><![CDATA[
    // ----------------------------------------------------------------------------------------------------
    // REGEX
    // the regular expression to check the user input.
    // RegEx available in https://regex101.com/r/4qBEbT/1
    // ----------------------------------------------------------------------------------------------------
    regex = "^(?<object>\\S+?)\\.(?<attribute>\\S+?)(?:(?<keytoken>\\[|\\{)(?<key>.*?)(?:\\]|\\}))?(?:\\s?(?<istoken>\\=)\\s?(?:(?<valkeytoken>(?:\\[|\\{)?)(?<value>.*?)(?:\\]|\\})?)(?(valkeytoken)|(?:(?<valobject>.+?)\\.(?<valattribute>.+?))))?$"
    // ----------------------------------------------------------------------------------------------------
    // SUCCESS MATCH
    // If the user's entry is error-free, it is validated further.
    // ----------------------------------------------------------------------------------------------------
    if (IsRegexMatch (regex, text)) {
      result = populate (regex, text)
      Log (ToString(result))
      // ----------------------------------------------------------------------------------------------------
      // ASSIGN RESULT
      // Assign the result of the match to the appropriate object and attribute.
      // ----------------------------------------------------------------------------------------------------
      // Object
      object = getObjectExt(result["object"])
      if (TypeOf(object) = "null") {
        error (DynamicTemplate("DevModeErrorCantFindObject", result["object"]))
      }
      // Attribute
      attribute = result["attribute"]
      current_value = GetAttribute(object, attribute)
      if (TypeOf(current_value) = "null" and result["istoken"] <> "=") {
        error (DynamicTemplate("DevModeErrorCantFindAttribute", result["attribute"]))
      }
      // Value
      value = result["value"]
      // ----------------------------------------------------------------------------------------------------
      // SET VALUE
      // If an actual equals sign has been set, the input is treated as an assignment.
      // ----------------------------------------------------------------------------------------------------
      if (result["istoken"] = "=") {
        // ----------------------------------------------------------------------------------------------------
        // BOOLEAN-TOKENS
        // Short notation for Boolean states
        // ----------------------------------------------------------------------------------------------------
        if (result["value"] = "?") {
          value = true
        }
        else if (result["value"] = "!") {
          value = false
        }
        else if (result["value"] = "~") {
          value = not GetBoolean (object, attribute)
        }
        else if (result["valkeytoken"] = "[") {
          value = NewList ()
          if (result["value"] <> "") {
            list = Split(result["value"], ",")
            foreach (item, list) {
              list add (value, Eval(Trim(item)))
            }
          }
        }
        else if (result["valkeytoken"] = "{") {
            value = NewDictionary ()
            if (result["value"] <> "") {
              list = Split(result["value"], ",")
              foreach (assign, list) {
                if (not Instr(assign, ":") = 0) {
                  dic = Split(assign, ":")
                  dickey = dic[0]
                  dicvalue = dic[1]
                  dictionary add (value, dickey, Eval(Trim(dicvalue)))
                }
                else {
                  error (Template("DevModeErrorWrongFormat"))
                }
              }
            }
          }
          else if (result["valobject"] <> "") {
            valobject = getObjectExt(result["valobject"])
            if (TypeOf(valobject) = "null") {
              error (DynamicTemplate("DevModeErrorCantFindObject", result["valobject"]))
            }
            // Valattribute
            if (result["valattribute"] <> "") {
              valattribute = result["valattribute"]
              value = GetAttribute(valobject, valattribute)
              if (TypeOf(value) = "null") {
                error (DynamicTemplate("DevModeErrorCantFindAttribute", result["valattribute"]))
              }
            }
          }
          else {
            value = Eval(result["value"])
          }
          // ----------------------------------------------------------------------------------------------------
          // VALUE-LIST
          // Creating a new list
          // ----------------------------------------------------------------------------------------------------
          // ----------------------------------------------------------------------------------------------------
          // VALUE-DICTIONARY
          // Creating a new dictionary
          // ----------------------------------------------------------------------------------------------------
          // ----------------------------------------------------------------------------------------------------
          // VALUE-OBJECT AND VALUE-ATTRIBUTE
          // Assigning an attribute from another object
          // ----------------------------------------------------------------------------------------------------
          // ----------------------------------------------------------------------------------------------------
          // VALUE EVALUATION
          // Value is evaluated
          // ----------------------------------------------------------------------------------------------------
          // ----------------------------------------------------------------------------------------------------
          // SET-ATTRIBUTE-LIST
          // Add a new item to a list or overwrite an existing one
          // ----------------------------------------------------------------------------------------------------
          if (result["keytoken"] = "[") {
            if (TypeOf(current_value) <> "list" and TypeOf(current_value) <> "objectlist" and TypeOf(current_value) <> "stringlist") {
              current_value = NewList ()
            }
            if (result["key"] <> "") {
              if (not IsNumeric(result["key"])) {
                error (Template("DevModeErrorWrongTyp"))
              }
              else if (ToInt(result["key"]) < ListCount(current_value)) {
                list remove (current_value, ListItem(current_value, ToInt(result["key"])))
              }
            }
            list add (current_value, value)
            value = NewList ()
            value = current_value
          }
          else if (result["keytoken"] = "{") {
              if (TypeOf(current_value) <> "dictionary" and TypeOf(current_value) <> "objectdictionary" and TypeOf(current_value) <> "stringdictionary") {
                current_value = NewDictionary ()
              }
              if (result["key"] <> "") {
                if (result["key"] in current_value) {
                  dictionary remove (current_value, result["key"])
                }
                dictionary add (current_value, result["key"], value)
                value = NewDictionary ()
                value = current_value
              }
            }
            // ----------------------------------------------------------------------------------------------------
            // SET-ATTRIBUTE-DICTIONARY
            // Add a new key to a dictionary or overwrite an existing one
            // ----------------------------------------------------------------------------------------------------
            // ----------------------------------------------------------------------------------------------------
            // VALUE-ASSIGNMENT
            // The value is assigned to the attribute and a corresponding output appears
            // ----------------------------------------------------------------------------------------------------
            set (object, attribute, value)
            DevModeOutput (Template("DevModeComSetAttribute") + object.name + "." + attribute + "=" + ParseToFlyScript(value))
          }
          else {
            key = ""
            // ----------------------------------------------------------------------------------------------------
            // GET-ATTRIBUTE-LIST
            // If the attribute is a list and the specified key is in it, the content is read out.
            // ----------------------------------------------------------------------------------------------------
            if (result["keytoken"] = "[") {
              if (TypeOf(current_value) <> "list" and TypeOf(current_value) <> "objectlist" and TypeOf(current_value) <> "stringlist") {
                error (Template("DevModeErrorWrongTyp"))
              }
              else if (not IsNumeric(result["key"])) {
                error (Template("DevModeErrorWrongTyp"))
              }
              else if (ToInt(result["key"]) > ListCount(current_value)-1) {
                error (Template("DevModeErrorWrongKey"))
              }
              else {
                current_value = ListItem(current_value, ToInt(result["key"]))
              }
              key = "[" + result["key"] + "]"
            }
            // ----------------------------------------------------------------------------------------------------
            // GET-ATTRIBUTE-DICTIONARY
            // If the attribute is a dictionary and the specified key is in it, the content is read out.
            // ----------------------------------------------------------------------------------------------------
            if (result["keytoken"] = "{") {
                if (TypeOf(current_value) <> "dictionary" and TypeOf(current_value) <> "objectdictionary" and TypeOf(current_value) <> "stringdictionary") {
                  error (Template("DevModeErrorWrongTyp"))
                }
                else if (not result["key"] in current_value) {
                  error (Template("DevModeErrorWrongKey"))
                }
                else {
                  current_value = DictionaryItem(current_value, result["key"])
                }
                key = "{" + result["key"] + "}"
              }
              // ----------------------------------------------------------------------------------------------------
              // VALUE-READING
              // The value of the attribute is read out
              // ----------------------------------------------------------------------------------------------------
              DevModeOutput (Template("DevModeComGetAttribute") + object.name + "." + attribute + key + "=" + ParseToFlyScript(current_value))
            }
            // ----------------------------------------------------------------------------------------------------
            // GET VALUE
            // If no equal sign has been set, the result is treated as readout.
            // ----------------------------------------------------------------------------------------------------
          }
          else {
            error (Template("DevModeErrorWrongFormat"))
          }
          // ----------------------------------------------------------------------------------------------------
          // FAIL MATCH
          // An error message is displayed if the user's entry is incorrect.
          // ----------------------------------------------------------------------------------------------------
  ]]></function>
  <function name="ParseToFlyScript" parameters="text" type="string"><![CDATA[
    switch (TypeOf(text)) {
      // ----------------------------------------------------------------------------------------------------
      // STRING
      // ----------------------------------------------------------------------------------------------------
      case ("string") {
        parsetext = "\"" + text + "\""
      }
      // ----------------------------------------------------------------------------------------------------
      // OBJECT
      // ----------------------------------------------------------------------------------------------------
      case ("object") {
        parsetext = text.name
      }
      // ----------------------------------------------------------------------------------------------------
      // SCRIPT
      // ----------------------------------------------------------------------------------------------------
      case ("script") {
        parsetext = "<" + Replace(ToString(text), "Script: ", "") + ">"
      }
      // ----------------------------------------------------------------------------------------------------
      // LIST
      // ----------------------------------------------------------------------------------------------------
      case ("list", "stringlist", "objectlist") {
        list = NewStringList()
        foreach (item, text) {
          switch (TypeOf(item)) {
            case ("string") item = "\"" + item + "\""
            case ("object") item = item.name
            default item = ToString(item)
          }
          list add (list, item)
        }
        parsetext = "[" + Join (list, ",") + "]"
      }
      // ----------------------------------------------------------------------------------------------------
      // DICTIONARY
      // ----------------------------------------------------------------------------------------------------
      case ("dictionary", "stringdictionary", "objectdictionary", "scriptdictionary") {
        list = NewStringList()
        foreach (key, text) {
          item = DictionaryItem(text, key)
          switch (TypeOf(item)) {
            case ("string") item = "\"" + item + "\""
            case ("object") item = item.name
            case ("script") item = "<" + Replace(ToString(item), "Script: ", "") + ">"
            default item = ToString(item)
          }
          list add (list, key + ":" + item)
        }
        parsetext = "{" + Join (list, ",") + "}"
      }
      // ----------------------------------------------------------------------------------------------------
      // OTHER TYPES
      // ----------------------------------------------------------------------------------------------------
      default {
        parsetext = ToString(text)
      }
    }
    return (parsetext)
  ]]></function>
  <function name="DevModeOutput" parameters="str"><![CDATA[
    if (game.devmode_showinfos) {
      if (game.devmode_ownfontcolour) {
        col = " color=\"" + game.devmode_fontcolour + "\""
      }
      else {
        col = ""
      }
      msg ("<font" + col + ">" + str + "</font>")
    }
  ]]></function>
  <function name="DevModeOutputError" parameters="str"><![CDATA[
    if (game.devmode_showinfos) {
      msg ("<font color=\"red\">" + str + "</font>")
    }
  ]]></function>
  <function name="setWithoutChange" parameters="obj, att, val"><![CDATA[
    cha = "changed" + att
    bla => {
    }
    scr => {
    }
    if (obj = null) {
      error (Template("DevModeErrorObjectNotRecognised"))
    }
    if (HasAttribute (obj, cha)) {
      scr = GetAttribute (obj, cha)
      set (obj, cha, bla)
      set (obj, att, val)
      set (obj, cha, scr)
    }
    else {
      set (obj, att, val)
    }
  ]]></function>
  <function name="setDevMode">
    if (HasAttribute(game, "devmode_active")) {
      if (game.devmode_active) {
        DevModeOutput (Template("DevModeActive"))
        if (HasAttribute(game, "devmode_attributes") and not DictionaryCount(game.devmode_attributes) = 0) {
          foreach (key, game.devmode_attributes) {
            command = key + "=" + ToString(DictionaryItem(game.devmode_attributes, key))
            commandOutput ("#" + command)
            ParseToQuestCode (command)
          }
        }
        if (game.devmode_changepov) {
          commandOutput ("#to " + game.devmode_pov)
          HandleSingleCommand ("#to " + game.devmode_pov)
        }
        if (game.devmode_changepovpos) {
          commandOutput ("#go " + game.devmode_povpos)
          HandleSingleCommand ("#go " + game.devmode_povpos)
        }
        if (game.devmode_setverbs) {
          setVerbs
        }
        if (game.devmode_setinitscript and HasScript(game, "devmode_initscript")) {
          msg ("")
          DevModeOutput (Template("DevModeStartScript"))
          do (game, "devmode_initscript")
        }
        msg ("")
      }
    }
  </function>
  <function name="getTableDataNames" parameters="empty">
    data = NewStringList ()
    list add (data, "{\"name\":\"game\"}")
    foreach (obj, AllObjects()) {
      list add (data, "{\"name\":\"" + obj.name + "\"}")
    }
    datastr = "[" + Join (data, ",") + "]"
    JS.setTableData ("names", datastr)
  </function>
  <function name="getTableDataAttr" parameters="name">
    data = NewStringList ()
    obj = GetObject (name)
    foreach (attr, GetAttributeNames (obj, true)) {
      val = ParseToFlyScript (GetAttribute (obj, attr))
      list add (data, "{\"attribute\":\"" + attr + "\",\"value\":\"" + Replace(val, "\"", "\\\"") + "\"}")
    }
    datastr = "[" + Join (data, ",") + "]"
    JS.setTableData ("attr", datastr)
  </function>
  <function name="setTableData" parameters="command">
    commandOutput ("#" + command)
    ParseToQuestCode (command)
  </function>
  <function name="commandOutput" parameters="command"><![CDATA[
    msg ("")
    DevModeOutput ("> " + command)
  ]]></function>
  <function name="setVerbs">
    verbs = game.devmode_verbs
    foreach (object, AllObjects()) {
      if (HasAttribute(object, "displayverbs")) {
        object.displayverbs = ListCombine (object.displayverbs, verbs)
      }
      if (HasAttribute(object, "inventoryverbs")) {
        object.inventoryverbs = ListCombine (object.inventoryverbs, verbs)
      }
    }
    game.enablehyperlinks = true
    msg ("")
    DevModeOutput (Template("DevModeSetVerbs"))
  </function>
  <function name="getObjectExt" parameters="name" type="object">
    obj = GetObject(name)
    if (obj = null) {
      foreach (sobj, AllObjects()) {
        if (HasAttribute(sobj, "alias")) {
          if (LCase(sobj.alias) = LCase(name)) {
            return (sobj)
          }
        }
      }
    }
    return (obj)
  </function>
  <function name="selfTest"><![CDATA[
    msg ("")
    DevModeOutput ("<b>Start DevMode-Selftest...</b>")
    // ----------------------------------------------------------------------------------------------------
    // TESTOBJECTS
    // Generate testobjects
    // ----------------------------------------------------------------------------------------------------
    create ("testobject1")
    create ("testobject2")
    testobject1.testattribut = ""
    // ----------------------------------------------------------------------------------------------------
    // COMMANDS
    // Generate commmands for testing
    // ----------------------------------------------------------------------------------------------------
    commands = NewDictionary ()
    // ----------------------------------------------------------------------------------------------------
    // OBJECT-COMMANDS
    // Unlike the commands in the game, they are executed directly and without detours via intercept scripts
    // ----------------------------------------------------------------------------------------------------
    dictionary add (commands, "#take testobject1", "Got (testobject1)")
    dictionary add (commands, "#drop testobject1", "Contains (game.pov.parent, testobject1)")
    dictionary add (commands, "#put testobject1 in testobject2", "Contains (testobject2, testobject1)")
    dictionary add (commands, "#open testobject1", "testobject1.isopen")
    dictionary add (commands, "#close testobject1", "not testobject1.isopen")
    dictionary add (commands, "#on testobject1", "IsSwitchedOn(testobject1)")
    dictionary add (commands, "#off testobject1", "not IsSwitchedOn(testobject1)")
    dictionary add (commands, "#to testobject1", "game.pov = testobject1")
    dictionary add (commands, "#go testobject2", "game.pov.parent = testobject2")
    // ----------------------------------------------------------------------------------------------------
    // OBJECT-ATTRIBUTES
    // assign and read attributes
    // ----------------------------------------------------------------------------------------------------
    // BOOLEAN
    dictionary add (commands, "#testobject1.testattribut=true", "TypeOf(testobject1.testattribut) = \"boolean\" and testobject1.testattribut=true")
    dictionary add (commands, "#testobject1.testattribut=false", "TypeOf(testobject1.testattribut) = \"boolean\" and testobject1.testattribut=false")
    dictionary add (commands, "#testobject1.testattribut=?", "TypeOf(testobject1.testattribut) = \"boolean\" and testobject1.testattribut=true")
    dictionary add (commands, "#testobject1.testattribut=!", "TypeOf(testobject1.testattribut) = \"boolean\" and testobject1.testattribut=false")
    dictionary add (commands, "#testobject1.testattribut=~", "TypeOf(testobject1.testattribut) = \"boolean\" and testobject1.testattribut=true")
    // STRING
    dictionary add (commands, "#testobject1.testattribut=\"teststring\"", "TypeOf(testobject1.testattribut) = \"string\" and testobject1.testattribut=\"teststring\"")
    // INTEGER
    dictionary add (commands, "#testobject1.testattribut=25", "TypeOf(testobject1.testattribut) = \"int\" and testobject1.testattribut = 25")
    // DOUBLE
    dictionary add (commands, "#testobject1.testattribut=25.25", "TypeOf(testobject1.testattribut) = \"double\" and testobject1.testattribut = 25.25")
    // OBJECT
    dictionary add (commands, "#testobject1.testattribut=testobject1", "TypeOf(testobject1.testattribut) = \"object\" and testobject1.testattribut = testobject1")
    // LIST
    dictionary add (commands, "#testobject1.testattribut=[]", "TypeOf(testobject1.testattribut) = \"list\" and ListCount(testobject1.testattribut) = 0")
    dictionary add (commands, "#testobject1.testattribut=[\"testitem1\",\"testitem2\",testobject1,testobject2]", "TypeOf(testobject1.testattribut) = \"list\" and ListCount(testobject1.testattribut) = 4 and TypeOf(ListItem(testobject1.testattribut, 0)) = \"string\" and ListItem(testobject1.testattribut, 0) = \"testitem1\" and TypeOf(ListItem(testobject1.testattribut, 1)) = \"string\" and ListItem(testobject1.testattribut, 1) = \"testitem2\" and TypeOf(ListItem(testobject1.testattribut, 2)) = \"object\" and ListItem(testobject1.testattribut, 2) = testobject1 and TypeOf(ListItem(testobject1.testattribut, 3)) = \"object\" and ListItem(testobject1.testattribut, 3) = testobject2")
    dictionary add (commands, "#testobject1.testattribut[2]=\"newtestitem2\"", "TypeOf(testobject1.testattribut) = \"list\" and ListCount(testobject1.testattribut) = 4 and TypeOf(ListItem(testobject1.testattribut, 3)) = \"string\" and ListItem(testobject1.testattribut, 3) = \"newtestitem2\"")
    dictionary add (commands, "#testobject1.testattribut[]=\"newtestitem5\"", "TypeOf(testobject1.testattribut) = \"list\" and ListCount(testobject1.testattribut) = 5 and ListItem(testobject1.testattribut, 4) = \"newtestitem5\"")
    dictionary add (commands, "#testobject1.testattribut[1]", "")
    // DICTIONARY
    dictionary add (commands, "#testobject1.testattribut={}", "TypeOf(testobject1.testattribut) = \"dictionary\" and DictionaryCount(testobject1.testattribut) = 0")
    dictionary add (commands, "#testobject1.testattribut={testkey1:\"testitem1\",testkey2:\"testitem2\",testkey3:testobject1,testkey4:testobject2}", "TypeOf(testobject1.testattribut) = \"dictionary\" and DictionaryCount(testobject1.testattribut) = 4 and TypeOf(DictionaryItem(testobject1.testattribut, \"testkey1\")) = \"string\" and DictionaryItem(testobject1.testattribut, \"testkey1\") = \"testitem1\" and TypeOf(DictionaryItem(testobject1.testattribut, \"testkey2\")) = \"string\" and DictionaryItem(testobject1.testattribut, \"testkey2\") = \"testitem2\" and TypeOf(DictionaryItem(testobject1.testattribut, \"testkey3\")) = \"object\" and DictionaryItem(testobject1.testattribut, \"testkey3\") = testobject1 and TypeOf(DictionaryItem(testobject1.testattribut, \"testkey4\")) = \"object\" and DictionaryItem(testobject1.testattribut, \"testkey4\") = testobject2")
    dictionary add (commands, "#testobject1.testattribut{testkey4}=\"newtestitem4\"", "TypeOf(testobject1.testattribut) = \"dictionary\" and DictionaryCount(testobject1.testattribut) = 4 and TypeOf(DictionaryItem(testobject1.testattribut, \"testkey4\")) = \"string\" and DictionaryItem(testobject1.testattribut, \"testkey4\") = \"newtestitem4\"")
    dictionary add (commands, "#testobject1.testattribut{testkey1}", "")
    // OBJECTATTRIBUT
    dictionary add (commands, "#testobject1.testattribut=testobject2.name", "TypeOf(testobject1.testattribut) = \"string\" and testobject1.testattribut=\"testobject2\"")
    // ALL TYPES
    dictionary add (commands, "#testobject1.testattribut", "")
    // ----------------------------------------------------------------------------------------------------
    // TESTING
    // Testing the Commands
    // ----------------------------------------------------------------------------------------------------
    iserror = false
    foreach (command, commands) {
      if (not iserror) {
        on ready {
          DevModeOutput ("<br/>&gt; " + command)
          HandleSingleCommand (command)
          on ready {
            compare = ToString(DictionaryItem(commands, command))
            if (compare <> "") {
              result = Eval(compare)
            }
            DevModeOutput ("Quest-Presentation: testobject1.testattribut = " + ToString(testobject1.testattribut))
            if (not result) {
              iserror = true
              DevModeOutputError (Template("DevModeComSelfTestFailed"))
              Log (ToString(ListItem(testobject1.testattribut, 2)))
            }
          }
        }
      }
    }
  ]]></function>
  <function name="InitInterface"><![CDATA[
    // Added by KV for transcript
    // Use JSSafe to remove any offensive characters!  - KV   May 27, 2018
    jsgamename = JSSafe(game.gamename)
    JS.eval ("var gameName = '"+jsgamename+"';var transcriptName = gameName;")
    if (GetBoolean(game,"savetranscript")) {
      JS.eval ("var savingTranscript = true;")
      JS.replaceTranscriptString (game.transcriptstring)
    }
    // End of addition by KV for transcript
    if (game.setcustomwidth) {
      JS.setGameWidth (game.customwidth)
    }
    if (game.setcustompadding) {
      JS.setGamePadding (game.custompaddingtop, game.custompaddingbottom, game.custompaddingleft, game.custompaddingright)
    }
    if (game.externalstylesheets <> null) {
      foreach (stylesheet, game.externalstylesheets) {
        JS.addExternalStylesheet (stylesheet)
      }
    }
    if (game.setbackgroundopacity) {
      SetBackgroundOpacity (game.backgroundopacity)
    }
    SetBackgroundColour (game.defaultbackground)
    SetForegroundColour (game.defaultforeground)
    SetLinkForegroundColour (game.defaultlinkforeground)
    if (LengthOf(game.backgroundimage) > 0) {
      SetBackgroundImage (game.backgroundimage)
    }
    JS.setCompassDirections (Join(game.compassdirections, ";"))
    JS.setInterfaceString ("InventoryLabel", "Inventory")
    JS.setInterfaceString ("StatusLabel", "Status")
    JS.setInterfaceString ("PlacesObjectsLabel", "Places and Objects")
    JS.setInterfaceString ("CompassLabel", "Compass")
    JS.setInterfaceString ("InButtonLabel", "in")
    JS.setInterfaceString ("OutButtonLabel", "out")
    JS.setInterfaceString ("EmptyListLabel", "(empty)")
    JS.setInterfaceString ("NothingSelectedLabel", "(nothing selected)")
    JS.setInterfaceString ("TypeHereLabel", "Type here...")
    JS.setInterfaceString ("ContinueLabel", "Continue...")
    JS.SetMenuBackground (game.menubackground)
    JS.SetMenuForeground (game.menuforeground)
    JS.SetMenuHoverBackground (game.menuhoverbackground)
    JS.SetMenuHoverForeground (game.menuhoverforeground)
    JS.SetMenuFontName (game.menufont)
    JS.SetMenuFontSize (game.menufontsize + "pt")
    if (not game.underlinehyperlinks) {
      JS.TurnOffHyperlinksUnderline ()
    }
    ResetCommandBarFormat
    if (game.showcommandbar) {
      JS.uiShow ("#txtCommandDiv")
    }
    else {
      JS.uiHide ("#txtCommandDiv")
    }
    if (HasString(game, "panelcontents")) {
      SetFramePicture (game.panelcontents)
    }
    if (game.gridmap) {
      JS.ShowGrid (game.mapsize)
      Grid_SetScale (game.mapscale)
      if (game.pov <> null) {
        if (game.pov.parent <> null) {
          Grid_Redraw
          Grid_DrawPlayerInRoom (game.pov.parent)
        }
      }
    }
    // Added by the Pixie
    // Note that panesVisible in playercore.js must be updated too
    // This line will get the save confirmation to appear in the right font and colour
    JS.setCss ("body", "color:" + game.defaultforeground + ";font-family:" + game.defaultfont + ";font-size:" + game.defaultfontsize + "pt;")
    // various new options
    if (HasString(game, "bordercolour")) {
      JS.setCss ("#gameBorder", "border-left:1px solid " + game.bordercolour + ";border-right:1px solid " + game.bordercolour)
    }
    if (not game.classiclocation) {
      JS.setCss ("#status", "background-image:none")
      if (HasString(game, "customlocationcolour")) {
        JS.setCss ("#status", "background-color:" + game.customlocationcolour)
      }
      else {
        JS.setCss ("#status", "background:transparent")
      }
      if (HasString(game, "customlocationtextcolour")) {
        JS.setCss ("#status", "color:" + game.customlocationtextcolour)
      }
      if (HasString(game, "customlocationbordercolour")) {
        JS.setCss ("#status", "border:1px solid " + game.customlocationbordercolour)
      }
      else {
        JS.setCss ("#status", "border:none")
      }
    }
    // request (Show, "Location")
    if (game.showlocation) {
      JS.uiShow ("#location")
      JS.setCss ("#status", "display:block")
    }
    else {
      JS.setCss ("#status", "display:none")
    }
    if (HasString(game, "marginscolour")) {
      JS.setCss ("body", "background-color:" + game.marginscolour)
    }
    if (game.turnoffsavebutton) {
      JS.setCss ("#controlButtons", "display:none")
    }
    if (game.turnoffcompass) {
      JS.setCss ("#compassLabel", "display:none;")
      JS.setCss ("#compassAccordion", "display:none;")
    }
    if (game.turnoffinventory) {
      JS.setCss ("#inventoryLabel", "display:none")
      JS.setCss ("#inventoryAccordion", "display:none")
    }
    if (game.turnoffplacesandobjects) {
      JS.setCss ("#placesObjectsLabel", "display:none")
      JS.setCss ("#placesObjectsAccordion", "display:none")
    }
    if (game.statusandcompassattop) {
      JS.eval ("$('#commandPane').insertBefore('#inventoryLabel')")
      JS.eval ("$('#customStatusPane').insertBefore('#inventoryLabel')")
      JS.eval ("$('#statusVarsLabel').insertBefore('#inventoryLabel')")
      JS.eval ("$('#statusVarsAccordion').insertBefore('#inventoryLabel')")
      JS.eval ("$('#compassLabel').insertBefore('#inventoryLabel')")
      JS.eval ("$('#compassAccordion').insertBefore('#inventoryLabel')")
    }
    if (game.showpanes and game.commandpane) {
      JS.setCss ("#commandPane", "display:block")
    }
    if (game.showpanes and game.customstatuspane) {
      JS.setCss ("#customStatusPane", "display:block")
    }
    if (game.colourblend) {
      JS.colourBlend (game.colourblendtop, game.colourblendbottom)
    }
    if (game.borderlesscursor) {
      JS.addScript ("<style>#txtCommand { outline:none; border:none; margin:0; padding:0; width:100px; background-color:transparent;}</style>")
      JS.setCss ("#txtCommandDiv", "color:" + game.defaultforeground)
      JS.eval ("$('#txtCommandPrompt').html('" + game.commandcursor + "')")
    }
    else if (game.shadowbox) {
      JS.addScript ("<style>#txtCommand { outline:none; border:none; margin:2px; padding:7px; width:100 px;box-shadow: 0px 0px 15px 5px #888;}</style>")
    }
    if (game.panestheme = "Midnight") {
      JS.setPanes ("white", "midnightblue", "midnightblue", "skyblue")
    }
    if (game.panestheme = "Nature") {
      JS.setPanes ("#A1C935", "#254117", "#306754", "#A1C935", "green")
    }
    if (game.panestheme = "Parchment") {
      JS.setPanes ("#493D26", "#FAEBD7", "#FAEBD7", "#493D26", "#C88141")
    }
    if (game.panestheme = "Vanilla") {
      JS.setPanes ("black", "white")
    }
    if (game.panestheme = "Black") {
      JS.setPanes ("orange", "black", "black", "orange")
    }
    if (game.panestheme = "Blood") {
      JS.setPanes ("orange", "#800000", "#800000", "orange", "yellow")
    }
    if (game.panestheme = "Tranquil") {
      JS.setPanes ("midnightblue", "skyblue", "white", "midnightblue", "blue")
    }
    if (game.respondtogridclicks) {
      JS.respondToGridClicks (true)
    }
    //
    // -----------------------------------------------------------------------
    // This is in the original, but must come last
    if (not game.showborder) {
      JS.hideBorder ()
    }
    if (game.showpanes) {
      JS.panesVisible (true)
    }
    else {
      JS.panesVisible (false)
    }
    JS.getDivCount ()
    if (not game.pov = null) {
      JS.updateLocation (CapFirst(GetDisplayName(game.pov.parent)))
    }
    if (game.feature_devmode) {
      setDevMode
    }
    InitUserInterface
    if (HasScript(game, "inituserinterface")) {
      do (game, "inituserinterface")
    }
  ]]></function>
  <function name="InitUserInterface">
  </function>
  <function name="StartGame"><![CDATA[
    StartTurnOutputSection
    if (game.showtitle) {
      JS.StartOutputSection ("title")
      PrintCentered ("<span style=\"font-size:260%\">" + game.gamename + "</span>")
      if (game.subtitle <> null) {
        if (LengthOf(game.subtitle) > 0) {
          PrintCentered ("<span style=\"font-size:130%\">" + game.subtitle + "</span>")
        }
      }
      if (game.author <> null) {
        if (LengthOf(game.author) > 0) {
          PrintCentered ("<br/><span style=\"font-size:140%\">by " + game.author + "</span>")
        }
      }
      msg ("<div style=\"margin-top:20px\"></div>")
      JS.EndOutputSection ("title")
    }
    if (game.pov = null) {
      playerObject = GetObject("player")
      if (playerObject = null) {
        if (ListCount(AllObjects()) > 0) {
          firstRoom = ObjectListItem(AllObjects(), 0)
        }
        else {
          create ("room")
          firstRoom = room
        }
        create ("player")
        player.parent = firstRoom
      }
      game.pov = player
    }
    else {
      InitPOV (null, game.pov)
    }
    InitStatusAttributes
    UpdateStatusAttributes
    InitVerbsList
    if (HasScript(game, "start")) {
      do (game, "start")
    }
    foreach (obj, AllObjects()) {
      if (HasScript(obj, "_initialise_")) {
        do (obj, "_initialise_")
      }
    }
    UpdateStatusAttributes
    UpdateObjectLinks
    on ready {
      if (game.gridmap) {
        Grid_DrawPlayerInRoom (game.pov.parent)
      }
      if (game.displayroomdescriptiononstart) {
        OnEnterRoom (null)
      }
      UpdateStatusAttributes
      UpdateObjectLinks
    }
    // Added by KV to use the old JS clearScreen if the transcript is disabled
    if (GetBoolean(game, "notranscript")) {
      JS.eval ("transcriptEnabled = false;")
    }
    game.runturnscripts = false
    FinishTurn
  ]]></function>
  <function name="InitVerbsList">
    game.verbattributes = NewStringList()
    game.verbattributeslookup = NewObjectDictionary()
    foreach (cmd, AllCommands()) {
      if (HasString(cmd, "property")) {
        list add (game.verbattributes, cmd.property)
        dictionary add (game.verbattributeslookup, cmd.property, cmd)
      }
    }
  </function>
  <function name="GetDisplayVerbs" parameters="object" type="stringlist">
    if (Contains(game.pov, object)) {
      baselist = object.inventoryverbs
    }
    else {
      baselist = object.displayverbs
    }
    if (not game.autodisplayverbs or GetBoolean(object, "usestandardverblist") or not HasAttribute(game, "verbattributes")) {
      return (baselist)
    }
    else {
      if (HasAttribute(object, "generatedverbslist")) {
        verbs = object.generatedverbslist
      }
      else {
        verbs = NewStringList()
        foreach (attr, GetAttributeNames(object, false)) {
          if (ListContains(game.verbattributes, attr)) {
            cmd = ObjectDictionaryItem(game.verbattributeslookup, attr)
            if (HasString(cmd, "displayverb")) {
              displayverb = CapFirst(cmd.displayverb)
            }
            else {
              displayverb = CapFirst(attr)
            }
            if (not ListContains(baselist, displayverb)) {
              list add (verbs, displayverb)
            }
          }
        }
        object.generatedverbslist = verbs
      }
      if (GetBoolean(object, "useindividualverblist")) {
        return (verbs)
      }
      else {
        return (ListCombine(baselist, verbs))
      }
    }
  </function>
  <function name="InitPOV" parameters="oldPOV, newPOV"><![CDATA[
    if (oldPOV <> null) {
      oldPOV.alias = oldPOV.external_alias
      oldPOV.alt = oldPOV.external_alt
      oldPOV.look = oldPOV.external_look
      oldPOV.gender = oldPOV.external_gender
      oldPOV.article = oldPOV.external_article
    }
    newPOV.external_alias = newPOV.alias
    newPOV.external_alt = newPOV.alt
    newPOV.external_look = newPOV.look
    newPOV.external_gender = newPOV.gender
    newPOV.external_article = newPOV.article
    if (not GetBoolean(newPOV, "pov_used")) {
      if (newPOV.alt = null) {
        newPOV.pov_alt = newPOV.pov_alt
      }
      else {
        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)
      }
      if (newPOV.alias <> null) {
        list add (newPOV.pov_alt, newPOV.alias)
      }
      if (game.showmoney and not HasInt(newPOV, "money")) {
        newPOV.money = 0
      }
      if (game.showhealth) {
        newPOV.health = 100
        newPOV.changedhealth => {
          if (this.health > 100) {
            this.health = 100
          }
          else if (this.health = 0) {
            if (HasScript(game, "onhealthzero")) {
              do (game, "onhealthzero")
            }
          }
          else if (this.health < 0) {
            this.health = 0
            // changedhealth will be called again so the onhealthzero script will run
          }
        }
      }
      newPOV.pov_used = true
    }
    newPOV.alias = newPOV.pov_alias
    newPOV.alt = newPOV.pov_alt
    newPOV.look = newPOV.pov_look
    newPOV.gender = newPOV.pov_gender
    newPOV.article = newPOV.pov_article
  ]]></function>
  <function name="FinishTurn">
    if (GetBoolean(game,"runturnscripts")) {
      if (not GetBoolean(game, "suppressturnscripts")) {
        RunTurnScripts
      }
    }
    game.runturnscripts = false
    game.suppressturnscripts = false
    UpdateStatusAttributes
    CheckDarkness
    UpdateObjectLinks
  </function>
  <function name="WhereAmI" parameters="s">
    game.questplatform = s
  </function>
  <timer name="fries serving">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>You hear the window slide open, and some muffled speaking. You're going to be served to somebody.")
      SetTimeout (10) {
        msg ("<br/>The beeps of the PIN pad start and end. Your time is coming soon.")
        SetTimeout (3) {
          msg ("<br/>Your world shakes as the bag moves through the air. You can feel it change hands.")
          DisableTimer (fries serving)
          wait {
            msg ("<br/>Without a second to waste, a giant hand enters the bag. You look up at the light, before the hand wraps around you and the fries. You're scooped up, and make eye contact with a college girl. Her brown eyes don't notice the grain of salt sized McDonald's worker on her food, before shoving it in her hungry mouth.")
            wait {
              ClearScreen
              MoveObject (player, mouth)
            }
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="fries swallow">
    <interval>7</interval>
    <script><![CDATA[
      msg ("<br/>All the fries are torn up under her pearly whites, and the hungry girl seems to be savouring the taste of the greasy food.")
      SetTimeout (5) {
        msg ("<br/>A gigantic plastic tube enters the mouth, and you recognize a straw. You don't have time to brace yourself before you and the fries are washed down her throat with a typhoon of Coke.")
        DisableTimer (fries swallow)
        wait {
          ClearScreen
          MoveObject (player, stomach)
        }
      }
    ]]></script>
  </timer>
  <timer name="fries digestion">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>A chewed up mouthful comes down the college girl's throat and into the stomach, joining you. You freak out as you begin to sink into the mixture, the bile sticking to your body and weighing you down, while at the same time digesting you.<br/><br/>The groans get louder, and a wave of soda lands on top of you, bubbling in the mixture. You can feel your skin begin to melt into the chyme.")
      SetTimeout (10) {
        msg ("<br/>Feeling the bile begin to eat at your now exposed muscles, you scream, opening your mouth to swallow some of the thick slime, and you begin to digest from the inside. You thrash your arms and legs, making pathetic splashing sounds.<br/><br/>You lose feeling your legs and arms, and another wad of chewed up fries land on top of you, pushing you deeper into this customer's stomach.")
        SetTimeout (5) {
          msg ("<br/>Finally being pushed under the surface of the bile, you let out your last screams, causing little bubbles on the surface of the chyme in the stranger's stomach. Your last thoughts run through your head as your body gives out. You're going to be a stranger's lunch, and her shit the next day. A pathetic way to go.<br/><br/>The stomach churns once again, and the unrecognizable human corpse is further digested, joining her soda and fries as you become one with the vomit. The slurry then slips in to her intestines, and all the nutrients and liquid are absorbed, with you adding barely anything to the already low nutrional content of the meal. Your now dry husk continues to float through her intestine, eventually reaching her colon. Your corpse is buried in human waste, and your bones are crushed under the sheer pressure of the college girl's shit. Her unthinking gut keeps pushing your tomb along. You're undistinguishable from the rest of her waste, as if a college girl would go looking for a shrunken minimum-wage worker in her dump.<br/><br/>Feeling a gurgle in her lower digestive system, the girl rubs it, before letting out a fart. The miniscule amount of calories you gave her would be used for this disgusting action. Gas exits her asshole, with little particles of you mixed in with it. <br/><br/>McDonald's always upsets her stomach.")
          finish
        }
      }
    ]]></script>
  </timer>
  <timer name="trainee ass sweat">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>Her ass is like a furnace,and  sweat is pouring in to it, coating you in the salty liquid. You sputter and choke on it as her ass shakes around. Judging by the amount, you imagine she's freaking out because you're gone, and getting stressed out in the busy environment of the restaurant kitchen.<br/><br/>You're also freaking out, but you're in the humid, moist, swampy environment of this girl's crack, with every bead of sweat and jiggle of her rear threatening to end your life.")
      SetTimeout (5) {
        msg ("<br/>Your efforts to cling to the panties to avoid slipping further are in vain, and your hands slip off the ass sweat soaked panties as you tumble further into her butt. The cheeks begins to put a bit of pressure on your chest, and you gasp for air, letting in a typhoon of sweat in your mouth. Big mistake.<br/><br/>You choke and sputter on the foul ass sweat as it continues to pour down her crack. Fuck, even if you survive this you're only about 1 hour into this employee's 9 hour shift. If you survive.")
        SetTimeout (5) {
          msg ("<br/>The drops of perspiration keep flowing down between her cheeks, trying to invade your airways. It feels like with every breath or miniscule movement she takes, you slide deeper between the moist cheeks, towards the bottom of the trainee's panties. You're terrified of dying that way, and you gasp for air and begin hyperventilating, allowing more and more ass sweat into your body. You can feel the disgusting fluid fill your mouth, head down your throat, and enter your lungs.<br/><br/>Covered in your own sweat and hers, you begin dry heaving and struggling for breath. This trainee's swamp ass was about to murder you.")
          SetTimeout (5) {
            msg ("<br/>You're close to giving up, you're about to die to an unaware employee's bodily function. Her ass, your captor, begins to shake and bounce as she picks up her movement. Combined with the salty, earthy ass sweat flowing down your airways, the movement of her ass is getting close to making you fall unconcious.<br/><br/>In your last moments, your mind rushes through the thought that you're never going to be found, that this girl is going to continue her shift completely unaware that you're speck-sized in her ass. You're probably going to be the first human to ever die from being drowned in ass sweat, if your tiny form could be even considered human anymore.<br/><br/>You're seeing stars.")
            SetTimeout (3) {
              msg ("<br/>With even more movement, your body slips further, and you just go limp. Your conciousness fades soon after, the last thing you'd experience is the ass of a McDonald's worker.<br/><br/>Of course, for her, the shift didn't end there. Your body would be subjected to another 8 hours of work from the trainee, and the conditions in her ass would not get better. More thick beads of sweat would surround your body, and your body kept slipping further and further into your tomb. A particularily large bead of sweat easily picks up your speck-sized body in it, carrying your body deeper, with you landing directly in the deepest part of her ass, her asshole.<br/><br/>The new employee felt this droplet, and clenched her ass, trying to absorb it into her panties. The brutal sweating did nothing to calm her nerves.<br/><br/>The clench of her anus was the final nail in the coffin for your tiny body, carrying in sweat and grime with you, and popping your frail, weak body like a grape. You, now a red mush, are spread around her asshole, with bits and pieces of you crushed between it's myriad of wrinkles like any other speck of filth. More sweat flows over your corpse, sliding easily across the greasy muscle and being absorbed by the disgusting fabric of her underwear.<br/><br/>Hours and hours pass, and eventually your trainee arrives back home, exhausted after a long day of work, and stinking of fries and sweat. The giant woman was pretty pissed that you bailed on her, leaving her to cover the workload of two employees. She takes off her tight black work pants, feeling her fat cheeks finally getting some air to breathe. Finally, she puts her fingers around the waistband of her panties. She'd been waiting for this all day. She peels them off, removing the sweat-soaked panties from deep within her crack, feeling the moist fabric become unstuck from her asshole.<br/><br/>Unsurprisingly, you're nowhere to be found. Whatever's left of you is either lodged deeply within a wrinkle on the sticky flesh of her asshole, or mixed in with the sweat soaked into her dirty panties. Either way, she would never know that she had turned her trainer into a little paste in her ass.")
              finish
            }
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="trainee taint sweat">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>You feel the warm globs of sweat trickle down her ass onto your tiny body, coating you and soaking the moist fabric behind you with the foul liquid. You choke on some that got into your nostril, finding it's way down into your throat.<br/><br/>Above you, the employee keeps at her job, her big ass bouncing around and giving you nausea.")
      SetTimeout (5) {
        msg ("<br/>The trainee's taint is no place for speck-sized people. You feel another typhoon of butt juice wash over you, entering your mouth when you mistakenly take a breath. You can feel it sliding through your insides, making it's way into your lungs and stomach. You gag on the salty, shitty sweat.<br/><br/>You feel like you're drowning.")
        SetTimeout (5) {
          msg ("<br/>Her ass is getting to you. There's absolutely no air left in your lungs, just sweat that your puny diaphragm srutggles and tries to push out, to no avail. Your mind stops working correctly as a gigantic glob of the liquid completely covers your body, submerging you before the poor, damp underwear behind you absorbed it.<br/><br/>The employee keeps working, rushing around the kitchen and making food, unaware that she's drowning her trainer in her swamp ass.")
          SetTimeout (5) {
            msg ("<br/>The lack of oxygen to your brain finally kills you, an act of mercy. What a horrific death.<br/><br/>Throughout the rest of her work day, her taint and panties would work together to pulverize your sweaty corpse into an unidentifiable red stain. Sweat would continue to pour on you, spreading your bloody remains into the girl's black underwear. By the end of her work day, she'd peel off her panties and toss them in the laundry hamper, leaving you and the moist, dirty panties to dry out.<br/><br/>Too bad she'd never know why her trainer bailed on her.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="trainee foot sweat">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>This giant girl keeps moving, and you're just praying that these movements don't crush you like a bug. The hustle of the trainee makes drops of perspiraton shake off the fabric of her moist sock, and onto you and her insole.<br/><br/>You feel the salty, funky liquid completely coat your body.")
      SetTimeout (5) {
        msg ("<br/>You take another breath of the stale, foul air of the new employee's shoe, before she takes another step around the bustling kitchen. You hear the squelch of the damp insole under her giant, sweaty foot.<br/><br/>This small step by the giantess causes you to roll further under her foot, your speck-like body easily rolling along the surface of the inside of her work shoe.")
        SetTimeout (5) {
          msg ("<br/>The foot comes down again, this time way closer to your body, the gross threads of her sock hanging real close to your body. The humid environment gets even worse with this new location.<br/><br/>You gasp for air, but barely get anything. There's no air down here that's not tainted with this trainee's foot sweat.")
          SetTimeout (5) {
            msg ("<br/>The next time she'd bring her foot down would be the last.<br/><br/>For you, anyway.<br/><br/>Her moist, socked foot comes down to claim your body, like some sort of sweaty, cotton cruise ship. You can feel your body be crushed into her sweaty insole, turning you immediately into a smear of gore.<br/><br/>Your work for that day had ended, but her's had just begun. Throughout the rest of her day, you were treated like any other piece of sock lint, being subjected to every up and down of the trainee's foot. A tsunami of sweat and dirt from the disgusting sock above your pathetic corpse would make sure you'd never be found, working you into the insole of the once-new work shoe.<br/><br/>When the new employee finally got home, she'd kick off her uncomfortable, odorous shoes, leaving your body to dry out for tomorrow's shift. Even though you bailed on her on her first day at work, you'd be with her for every single one of her next shifts, even if you were just a darkened speck under her foot.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="trainee random step">
    <interval>20</interval>
    <script><![CDATA[
      if (RandomChance(50)) {
        msg ("<br/>Sitting around on the busy restaurant floor, you had this coming.<br/><br/>The unaware trainee paces around the kitchen, and you watch her gigantic work shoes move, heading straight towards you. No amount of screaming or running could help you avoid this fate, and a shadow is cast over you by the new employee.<br/><br/>You're pounded into the floor by her shoe, with no resistance from your tiny body. The gore is absorbed into the dirty tread of her shoe, with what's left being mopped up later that night.")
        finish
      }
      else {
      }
    ]]></script>
  </timer>
  <timer name="manager boob suffocation">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>You can hear you manager chewing her lunch above you, and her sending her food down her throat cause you to descend deeper into her boobs. With every small movement she makes, she crushes the wind out of your chest, and fills it with salty boob sweat.<br/><br/>This is a nightmare, the last thing you want is to die speck-sized in the giant woman's cleavage. She'd probably get a kick out of that.")
      SetTimeout (5) {
        msg ("<br/>She shuffles around slightly in her seat, and her boobs come together for a small moment. The smallest movement to your boss caused your legs to be crushed, and you howl in pain. More sweat flows down your windpipe.<br/><br/>Your descent is aided by the boob sweat she's working up. The bitch is too cheap to install A/C.")
        SetTimeout (5) {
          msg ("<br/>You hit the tightest point of the cleavage, and you stop slipping deeper. The air here is basically non-existant, and your manager's tits begin to suffocate you. Air is squeezed out of your lungs, and replaced with the giant woman's tit sweat. You can't even fight as your world goes black, your bitch manager completely unaware the tiny employee suffocated in her bust.<br/><br/>After she was done with her meal, she'd get up to get back to work, her breasts bouncing as she took steps around the restaurant. After finding out you ditched your post at the grill, she began to train the new employee, the heat from the grill working up a sweat in her cleavage.<br/><br/>At the end of the day, she was so pissed she was ready to fire you. Little did she know, your tiny mangled corpse was entombed in her underboob, an ending that would've satisfied her more than firing you.")
          finish
        }
      }
    ]]></script>
  </timer>
  <timer name="manager shoulder idle">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>You idle too long on your bad manager's shoulder, and the bitch shifts in her seat. This sends you flying off her body, and into the air.<br/><br/>Your last thoughts are going through your brain as you enter freefall. How your whole life has amounted to being a small stain when you hit the ground, a worthless gunk no different from any other grime on the McDonald's floor.<br/><br/>You hit the ground and become an unrecognizable splatter, later to be mopped up by the giant employee you were supposed to train.")
      finish
    ]]></script>
  </timer>
  <timer name="manager asshole suffocation">
    <interval>30</interval>
    <script><![CDATA[
      msg ("<br/>The muscly sphincter beneath you begins to shift and to your horror clenches inward. The reeking, sweaty flesh squeezed down on you, your boss treating you no better than a speck of waste on her asshole. You try your best to fight the sticky, disgusting anus but it's no use.<br/><br/>The pressure lets up, and you cough up whatever liquid your manager's shithole forced into you. Feeling a pain in your legs, you realize that your legs had been forced into the mouth of the beast. You let out a muffled scream into the revolting asshole as Nicole unaware clenches. You cringe at the thought of dying here.")
      SetTimeout (10) {
        msg ("<br/>Your body is broken and battered as the vile pucker flexed in and out, eating your body like some of sick predator. The sticky hole of the giantess now holds you by your waist. From your position, you're being waterboarded with the sweaty runoff of her asshole and you gag at the horrid taste. You shriek, praying that your boss could hear the tiny employee wedged in her anus, before her sweaty and suffocating swamp ass snuff your pathetic life out.<br/><br/>Not that she'd care. She'd enjoy the fact that you're no better than a piece of shit right now, and the fact that the unaware movements of the hole she shits from daily were about to kill you. Bitch.")
        SetTimeout (10) {
          msg ("<br/>You feel gravity shift and your manager get up. Your pathetic attempts at resistance are nothing, and you're dragged further into her asshole, now up to your neck. The giant woman's ass moved around you as she walks, the fatty asscheeks jiggling, and worsening the rank environment around you. You struggle to stay concious as the hole clenches around your neck.<br/><br/>Every step she takes counts down to your demise, a tiny suffocated employee in their manager's asshole.")
          SetTimeout (7) {
            msg ("<br/>Your fate is sealed when the throbbing hole slides over your mouth, filling your airways with her anal perspiration and whatever grime it picked up off her hole. Your ability to breathe has been lost, and your microscopic body is left perpetually trapped in her backdoor. It doesn't take long for the slimy orifice to claim your life, and in your last moments you're relieved the horror and humilaition is over.<br/><br/>Nicole's asshole would eventually fully swallow your tiny body up, depositing your body in your manager's rectum. Your suffocation before this was a mercy, as the boiling, reeking bog of her ass is horrible. Throughout her work day, your corpse is coated in a gooey, rectal slime, leaving your body in a sort of cocoon. Humiliating.<br/><br/>Your boss would never discover you, only thinking that you left during the middle of your shift, which didn't surprise her at all. Then again, who goes looking for their millimeter tall employee in their asshole?")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="employee butt crush">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>From your vantage point on the seat, you see Becca walk into the break room, holding a bag of the greasy food she probably made. She spends a lot of time in here, the bitch always seems to be slacking off. She locks eyes with you, and you begin jumping and waving and screaming at her. She begins to approach you, her massive steps bringing her closer and putting her giant size in perspective. She sets the bag down on the table next to you, and looks straight at you.<br/><br/>Her eyes glaze over you, and her whole body turns around. The sense of impending doom hits your brain and you begin to freak out over the fact that your giant coworker is about to sit on you. Becca adjusts her pants, the little jiggle of her ass fat taunting you. Time seems to slow down as her knees begin to bend, the black work pants taking up more and more of the sky above you. Her ass seems to get bigger and bigger as it slowly descends, and you just sit in awe, basically accepting your fate. Before you even know it, tens of thousands of pounds of pure ass is dropped down on you, and your body crunches to a little gory stain beneath your giantess coworker's behind.<br/><br/>Your microscopic remains would blend into Becca's black pants for the rest of her shift, before being tossed into her dirty laundry, just waiting for the last traces of your pathetic existence to be wiped out. Crushed under a slacker's lazy ass.")
      finish
    ]]></script>
  </timer>
  <timer name="employee nugget">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>You spent too long on top of Becca's meal, and a shadow is cast over you. A giant, skinny hand reaches for the nugget you're on top of, taking you along for the ride. Too frozen in fear to do anything, you gain a deathgrip on the surface of the chicken nugget. Expecting the hot breath of the employee to wash over you, you're shocked when you're completely submerged in sweet and sour sauce, with every orifice of your body all sauced up. <br/><br/>Trying to get the stinging out of your eyes, you don't even notice yourself being brought up to the mouth of the employee. She announces her presence with a small burp, basically a hurricane to you, and you look in horror as you meet her cavernous maw.")
      MoveObject (player, employee mouth)
    ]]></script>
  </timer>
  <timer name="employee swallow">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>The chaos of her mouth seems to calm down, the chewed up mush of chicken joining your millimeter tall body on her tongue. It's only the calm before the storm, though.<br/><br/>The deafening noise of her swallowing is all you hear before you and the chewed food are sent down her esophagus. Squeezing through the muscular tube, you only have a few moments before you're deposited in her awaiting stomach.")
      MoveObject (player, employee stomach)
    ]]></script>
  </timer>
  <timer name="employee digestion">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>More chewed up food falls into her stomach, hitting the acrid vomit and splashing you with more of the employee's puke. The thick slime clings to your skin, burning you alive in the hot, dark, organic cavern. Another few splashes of soda drop down into the melting pot, like a waterfall of sugary liquid to you. You feel bits of skin wash off with the Coke, and you're terrified that you're melting into Becca's stomach contents.<br/><br/>That one mouthful had infinitely more nutrional value than your pathetic body.")
      SetTimeout (5) {
        msg ("<br/>The greasy sludge that you're neck deep in begins to churn, and you let out a fearful scream at the loud groan eminating from your gigantic captor's stomach. The foamy globs of whatever the fuck she's eaten take that as an invitation to enter your mouth, and you choke on it, feeling the sourness move down your throat, digesting you from the inside.<br/><br/>You're in agony. She's not even going to know of your brutal death, and you cringe at the thought of being food for your shitty coworker.")
        SetTimeout (5) {
          msg ("<br/>Your arms are getting tired of swimming, and you slip into the rapidly digesting mixture. Nothing but the contractions of her stomach swaying the slop around controls your fight for your life right now. You feel yourself dissolving at an increasingly rapid rate, your limbs now going numb, leaving you to question if they're even still attached to your body right now. Either way, Becca's stomach acid is eagerly snacking on your muscle tissue.<br/><br/>More grossness rains down on top of you, and you let out one last gurgly scream from your melting throat.")
          SetTimeout (5) {
            msg ("<br/>Fully submerged in the thick slime, pain is all you can feel. By this point you're surrounded by your liquidized body, with the last of your organs slowly giving out. Your brain races, thinking about your whole life, and how you're going to amount to nothing but a miniscule bit of nutrition for Becca, and whatever her gigantic body didn't need would be turned into shit. You get one last urge to fight, but you drift into unconciousness, your brain joining the rest of you floating in the girl's vomit.<br/><br/>The employee's stomach groans with satisfaction after she finishes her meal, the mixture of soda, chicken, sauce and you becoming one homologous mixture in her gut, with your tiny bones being the only part left to identify you as once human. As she gets back to work on the grill, her stomach contents drain into her intestines, bringing you down with them. Her body was getting ready to absorb you.<br/><br/>Later as Becca works the grill, your life and your caloric value are used up by herl. Attempting to keep the giant girl cool from the heat eminating from the grill, a single bead of sweat surfaces on her lower back, a combination of you and the tiniest bit of the greasy lunch's energy. The bead moves down her back, through her ass cheeks, and lands on her asshole. The smallest movement dislodges you from the disgusting hole that the rest of your remains would be coming out of later, and sends your life's contribution to her taint, to be quickly absorbed by her panties. They'd be thrown in the wash after her shift, washing away any trace of you from her sweat-soaked underwear.<br/><br/>Your life amounted to basically nothing; the best employee being used for nothing more than a bead of sweat in Becca's crack.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="manager digestion">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>Your world seems to shake as the stomach moves, turning your world upside down. You’re pulled under by the current, now you’re completely submerged in the disgusting slop. Swimming through the thick liquid proves difficult, and you struggle to resurface amid the salad. Thrashing your arms and swimming with all your might, you resurface in the acidic hell of the giant woman’s stomach. Attempting to wipe some of the digestive slime off your face, you’re horrified when layers of your skin come off with it. Nicole was going to strip every last calorie off your pathetic body.<br/><br/>Along with the roaring of your captor’s stomach, you can hear muffled conversation coming from your boss. Clearly she’s pissed off about something, not that you can do anything about it.")
      SetTimeout (5) {
        msg ("<br/>A clump of partially disgusted lettuce hits you right on, changing your course in the sea of stomach acid. No amount of swimming can stop your trajectory towards whatever the fuck, and your microscopic body easily slides against the stomach wall, a folded up wrinkle gladly accepting you into it. You try your best to escape the wrinkle that holds you captive, but the giant organ is simply too strong for a less than millimeter tall person to fight. Still surrounded by your manager’s hot vomit, you can feel it slowly continuing to eat away at you.<br/><br/>You’ve gone from her employee to her meal. She probably wouldn’t even mind that either.")
        SetTimeout (5) {
          msg ("<br/>Your whole body seems to go numb as your digestion continues. A loud belch from above signals another wave of vomit to come and wash over you, coating you once again in your manager’s disgusting puke. It seems to be getting it’s way with you, much to your horror, as you can feel bits of your pathetic body slip about into the mixture brewing in Nicole’s stomach. You try to move your arms to fight it, but you’re not even sure if they’re even attached to your body anymore. You slowly accept your fate, that you’re doomed to die in here, your manager’s gut.<br/><br/>You cringe at the thought of becoming part of her, and it hurts even more to imagine what happens when her digestive tract is done with your microscopic body.")
          SetTimeout (5) {
            msg ("<br/>As more stomach acid eats away at your body, it seems to make its way to your brain, and soon enough you drift into sweet oblivion, in a pool of your own digested remains. Your whole life is extinguished by your manager’s hungry stomach. All your memories, hopes, dreams, and aspirations are gone. Nicole’s digestive system has completely laid your body to waste.<br/><br/>Or maybe not. As your boss keeps going about her work day, her stomach continues to digest her food, rendering you and the salad indistinguishable from each other, except for your little indigestible bones. Her strong bile has picked them absolutely clean, with them being the only thing that shows you were once human. The nutritious mush is then squeezed into her small intestines, with a squelch, and on the outside the giant woman rubs her stomach lightly. Deep inside her intestines, her giant body begins to absorb what little nutrients your pathetically small body gave her.<br/><br/>You’re easily transported through Nicole’s bloodstream, and you get the honor of being part of the fat deposits on the bitch’s tits. While your new fat cell form bounces around on her chest as your boss walks, she begins to wonder where you are; the trainee that you were supposed to train said you just fucking disappeared.<br/><br/>Little did she know that the majority of your shrunken body was now a part of her right boob, and the parts her godlike body didn’t need were slowly moving through her large intestine, with your little skeleton nicely embedded in her next log of shit. Reduced from a human being to titty fat and a speck of a skeleton in your bitchy manager’s dump. She’d think you were worth more this way. Think about it, you went from a lowly minimum wage worker with a shitty life to having the glory of being part of her breasts.<br/><br/>“That piece of shit.” Nicole muttered.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="cashier foot sweat">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>The tiniest bead of sweat drips down on top of you and completely surrounds your millimeter tall body, leaving you in a sweaty drop of death. You can't decide if this is lucky or unlucky, but it soaks into the sock behind you, leaving you in a disoriented state. You're a tiny human coated entirely in foot sweat. What the fuck.<br/><br/>You cough and clear the sweat from your airways, gagging as bit of Maria's bodily runoff lands in your stomach. She's gone from your hottest coworker to the grossest in a matter of minutes.")
      SetTimeout (5) {
        msg ("<br/>Finally having caught a breath, the sour foot air fills your lungs. You move your arms to try to get out of this predicament, but it's no use. You seem to almost be swimming in the liquid, her sock seems to be getting waterlogged. The giant lady makes the smallest movement and a splash of sweat lands in your mouth, and this time it reaches your lungs. You try to cough it up, but it's no use.<br/><br/>This is fucking disgusting. This is the worst decision you've ever made.")
        SetTimeout (5) {
          msg ("<br/>More sweat confirms your statement. Still attempting to cough up what's found it's way to your airways, you leave your mouth wide open and ready to accept more of Maria's perspiration. You thrash and cough and fight for your life, but literally nothing can force it out of you. You're drowning in the stuff. Your brain doesn't even work anymore, and you feel your conciousness begin to fade in foot hell.<br/><br/>You used to be her coworker.")
          SetTimeout (5) {
            msg ("<br/>Within seconds you finally drown; a mercy at this point. You never imagined you die shrunken, drowning in Maria's foot sweat. Throughout the rest of her shift, your body lays dormant in it's sort of sick coffin, marinating in the giant's sweat. <br/><br/>When she finally goes to clock out, your tomb is disturbed as she takes her first step in a while. Your tiny body slides under her hell, before being immediately annihilated by it, adding your corpse's sickening crunch to the squelch of her sweat drenched sock. With every movement she makes towards that punch clock, your body is continuously pounded until the sweat washes the red paste into the moist cotton, leaving no trace behind.<br/><br/>You've turned into nothing basically, maybe a little bit of moisture in her sock, only amounting to the relief Maria would get when she peeled her socks off after her shift, leaving your final resting place in a disgusting sock on her bedroom floor.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="cashier ass suffocation">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>After spending a little while trapped in Maria's ass, the mortality of the situation begins to set in. You begin to feel short of breath, and realize her big booty is slowly draining your life away by crushing you. The cellulite seems to squeeze around your tiny form, squeezing the air out of you. You open your mouth to scream but the woman's butt quickly fills the void. Her ass is so big she doesn't even need to move for you to suffer.<br/><br/>You begin a pathetic attempt to fight back.")
      SetTimeout (5) {
        msg ("<br/>You try to push the fat of the giant lady's ass back, using all of your might and barely getting it to budge. Your tiny arms grow tired, and you return to your original position, the fat grabbing a firmer hold on your tiny form. You're being completely dominated by the unaware woman's ass, and she can't even feel your fight for your life.<br/><br/>You don't give up that easy though.")
        SetTimeout (5) {
          msg ("<br/>You wriggle and thrash against Maria's ass cheeks, using the last of your energy worming around in her planet-sized rear. Unfortunately for you, your action's have served absolutely no purpose, with you wasting your breath on actions that only moved to deeper in the giant cashier's crack. Eventually your movements cease, and there's no air left to breathe.<br/><br/>You sit in silence as you realize that these will be your last moment's, trapped inside your coworker's huge ass.")
          SetTimeout (3) {
            msg ("<br/>Your mind fades into oblivion as you pass out from the lack of air, her ass crack now having completely claimed you as it's own. Your death was kind of pathetic honestly. She didn't even do anything, her ass was just powerful enough to kill you.<br/><br/>As she begins to make the smallest movement, some of your tiny bones break and your corpse gets mangled by the movement of the Latina's gargantuan behind. You should be glad you weren't alive for that. With every small movement, her butt slowly pounds your puny body into submission, and you slowly lose all resemblance to a human. By the end of her shift, you're basically a piece of butt lint lodged somewhere in her crack, beaten and broken by the swaying and jiggling of Maria's big butt. <br/><br/>You don't even get the honor of your final resting place being between her cheeks; when she hit the shower after her shift, you were simply washed down the drain as she spread them.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="coffee fall">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>Standing still for too long on the cup was a bad idea, as the MILF begins to move. The sheer speed at which she's moving, a normal pace for a normally sized person, knocks you off your feet. You scream as you begin to slide towards the inside of the cup.<br/><br/>You enter free fall.")
      DisableTimer (coffee fall)
      wait {
        ClearScreen
        MoveObject (player, coffee cup)
      }
    ]]></script>
  </timer>
  <timer name="coffee drink">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>The tidal waves shift upwards, and even in your delusional state you know what's about to happen. You feel the burning liquid being drained into the woman's mouth, and it brings you along with it.<br/><br/>You hit the slightly less hot saliva of her maw. You glide along her waterslide of a tongue and being to fall down her throat, and you're an unfortunate passenger of the ride. She didn't even feel you.")
      MoveObject (player, MILF stomach)
    ]]></script>
  </timer>
  <timer name="milf digestion">
    <interval>20</interval>
    <enabled type="boolean">false</enabled>
    <script><![CDATA[
      msg ("<br/>The acid begins to chew through your horrific burns, and your brain can't even process the pain you're going through. Another splash of hot coffee is deposited in the stomach through the sphincter above you, and the sheer force of the mouthful of coffee forces you underneath the surface of the now bubbly stomach contents.<br/><br/>Flailing around like a fish out of water, you resurface, feeling your hair slide off your head. You let out a gurgly scream of horror.")
      SetTimeout (5) {
        msg ("<br/>After your vicious dunk into the MILF's giant digested meal, you attempt to cough up whatever sludge that managed to make it into your airways. You feel the sour, acrid taste of the stomach acid come up, as well as the irony taste of your own insides. As you're doing this, the sound of your pathetic cough is eclipsed by the deafening groan of this woman's digestive system. A wave of slime crashes over you, and you get washed away by the godlike power of the mom's stomach contractions. <br/><br/>You attempt to swim against the current, but you can feel your arms getting weak, not to mention the excrutiating pain you're in already.")
        SetTimeout (5) {
          msg ("<br/>You float along with the tide of the chyme, still attemping  to find some way out of this. Your partially digested, burned body begins to give out, and the pain seems to stop, your nerve endings joining the slurry that surrounds you. Another splash of hot coffee drops directly on top of you, and you don't even fight back, letting the puke take you. The mixture rushes into your lungs.The cavernous organ and the ocean of bile have squeezed the resistance out of you, and your brain rushes through the final thoughts of your life.<br/><br/>Your family, your friends, dreams, aspirations, goals.")
          SetTimeout (5) {
            msg ("<br/>All just to become part of some random MILF's coffee. <br/><br/>That was the last thought that ran through your brain before you were granted the mercy of death. <br/><br/>Your body is practically unrecognizable at this point, just a meaty hunk that vaguely resembles a millimeter tall human. The bile makes sure that isn't for long, and as the giant woman walks to her car you're nearly completely dissolved, mixing in nicely with the coffee and the omelette she had for breakfast. Of course, she's oblivious to your death, still sipping on her coffee as the digested slurry you're now a part of is squeezed into her intestines. Her colossal body easily absorbs your nutrients, the nutrients from her breakfast, and the large serving of caffeine into her bloodstream, leaving the undesirables, including your pathetic, microscopic bones, to float further down the digestive tract.<br/><br/>Whatever once made you human was barely a calorie to her, the rest of the food being worth infinitely more to her. Never the less, you'd be used for something, as a single fat cell would pop up on the underside of her gigantic, dimpled ass cheek, sentenced to a lifetime of jiggling as she walked.<br/><br/>Your puny bones would end up at her ass too, coming out after her coffee the next morning.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="milf boob suffocation">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>The giant woman takes a sip of her coffee, and you feel it travel down her throat as she swallows.Your prison begins to move up and down as the giant woman begins to move, her boobs bouncing up and down, grinding you between him. The amount of force these two fatty masses create is unimaginable.<br/><br/>It hurts, and it roughs up your tiny body with every step she takes.")
      SetTimeout (5) {
        msg ("<br/>It's stating to hurt even more now, and you feel your body begin to become sore and bruise up from the soft tissue. The breasts squeeze your whole body, making it hard for you to breathe. You're at serious risk of dying here.<br/><br/>The tits don't stop moving, and at this rate you're sinking deeper into them and begging the MILF to stop and let you out. You cries are silenced by some boob entering your mouth, and her next step knocks out some of your teeth.")
        SetTimeout (5) {
          msg ("<br/>Still sinking, you let out a muffled howl of pain as you feel some of your bones snap, the chafing of this giant woman's tits making quick work of your pathetic body. Feeling your ribcage pop, you feel short of breath as you realize the horror of what's happened. Your broken bone pops a hole in your lung.<br/><br/>You panic and thrash and cough up blood, all the while the gigantic lady keeps walking, fueling your demise.")
          SetTimeout (3) {
            msg ("<br/>Suddenly you feel a big drop, and you lose conciousness.<br/><br/>The MILF simply stepped off the curb outside the restaurant, walking towards her car, with your now mangled body still embedded in her big boobs. Your pathetic form would be with her for the rest of her day running errands, being further beaten up by the milk bags and marinating in her tit sweat.<br/><br/>Your corpse would tumble out of her cleavage when she stripped down before bed, before being unceremoniously buried under her foot, popping whatever was left of you into a smear beneath her sole.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="milf foot suffocation">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>Your new world begins to shake, and you come to the reasonable conclusion that the massive woman has begun to walk. With every step you take, your new tiny form slides a little bit more beneath her big toe. You feel a little bit of the putrid grime on her toe wipe onto your face. The thought passes through your mind that you're no better than it right now.<br/><br/>You fear this might be a death sentence.")
      SetTimeout (5) {
        msg ("<br/>The MILF keeps walking for what seems like forever, her building sized big toe now having claim your lower half. The digusting foot presses down on you, and you feel your bones crack beneath the weight of the massive digit. Howling in pain, you feel some sweat-laced grime enter your mouth and assault your taste buds. Your screams turn to gagging.<br/><br/>With your fucked up legs, there is genuinely no chance of escape.")
        SetTimeout (5) {
          msg ("<br/>Your body is repeatedbly smashed by the toe as the goddess walks, and you imagine your lower half has been turned into a paste, seeping into her sweat caked insole. Rapidly losing blood, your feel your world going dark, and in your last moments you cringe at the thought of your tomb being some woman's filthy heels. <br/><br/>A bug's death.")
          SetTimeout (3) {
            msg ("<br/>The toe claims your ribcage on the next step, and your body implodes under the MILF's calloused toe.<br/><br/>She doesn't even miss a beat on her next step; she didn't feel any part of your pathetic death underneath her toe. Your remains are spread thinly between her toe and the insole as she walks, and your tiny corpse would be along for a long ride as the giant woman ran her errands during the day. You're unrecognizable by the end of it.<br/><br/>The MILF would peel off her heels at the end of the day, and whatever wasn't part of the new blackened speck in her moist toe print would be glued to the underside of her toe. Your tiny human remains were toe jam.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="milf fart">
    <interval>20</interval>
    <script><![CDATA[
      msg ("<br/>The MILF's asshole in front of you contracts and expands before you get the slightest hint of what's going to happen.<br/><br/>A steaming hot hurricane of stink exits the hole in front of you, propelling you to fly at high speeds against the giant panties behind you. You feel some bones crack as you hit the lacy surface, and scream. The intense heat of the woman's gas burns your face, and you can feel the foul hole expel microscopic flecks of shit with it. Your brain still processing that you were just farted on by a giant woman, you slowly realize that you can't expel the lady's thick gas out of your lungs. You're choking to death on a fart.<br/><br/>The last thing you experience as you suffocate on the flatulence is the mature woman's anal stink. Your pathetic death goes completely unnoticed, the MILF just cursing how gassy coffee gets her.")
      finish
    ]]></script>
  </timer>
  <timer name="milf anal suffocation">
    <interval>10</interval>
    <script><![CDATA[
      msg ("<br/>More butt slime forces its way around you, surrounding your already coated body with the abhorrent mucus. You attempt to thrash against your captor's gunk, but it's no use. The sounds of the giant woman's digestive system above you sound off with groans and glucks that terrify you to your core. You feel so pathetic.<br/><br/>You can't even breathe anymore, the organic cave slowly draining the life out of you.")
      SetTimeout (5) {
        msg ("<br/>Your lungs fill up with the shitty fluid, every single cavity of yours is now gunked up. You can't even move anymore, forced to sit and take this disgusting abuse. You feel like a piece of waste right now, and honestly, you're no better than one. You hear more digestive noises, the roars of giant woman's guts that will soon claim your life.<br/><br/>You're fully encased in a cocoon of slime right now.")
        SetTimeout (3) {
          msg ("<br/>You eventually pass out, your brain not being able to receive any oxygen from the mucus inside your respiratory system. You die as a pathetic speck of filth inside some unaware MILF's asshole. She never felt the tiniest bit of anal stimulation.<br/><br/>Coated in sticky, waste-lubing sludge, you sit in her rectum for the time being. Her bodily processes keep going on while your corpse marinated in her ass juices, being slightly disturbed as she let out a few farts during her day. By the end of it, what was left of her large breakfast was about to meet you. The skyscraper-sized log easily slides over your tiny body, steamrolling you into an unrecognizable blob on the outside of the mound of waste. <br/><br/>The MILF would use the bathroom when she got home, unaware that she was wiping the remains of a shrunken McDonald's employee off her shit-stained asshole.")
          finish
        }
      }
    ]]></script>
  </timer>
  <timer name="employee flush">
    <interval>15</interval>
    <script><![CDATA[
      MakeObjectVisible (toilet paper)
      msg ("<br/>A massive sheet of toilet paper descends between Chloe's legs. She begins wiping the folds of her vagina, soaking up any excess urine off her snatch, and making sure it's clean. She then drops the sheet of paper in with you.<br/><br/>It floats down slowly before landing next to you, the {object:toilet paper} giving you company in the bowl.")
      SetTimeout (5) {
        msg ("<br/>You watch as your coworker lifts her ass off the toilet, showcasing a red imprint of where her bubble butt met the seat. She first pulls up her light blue panties into her crack, before bringing up her black work pants as well. She's completely regained her modesty.<br/><br/>You're not stupid, so you understand what's next.")
        SetTimeout (5) {
          msg ("<br/>Chloe turns around and reaches for the handle, the bitch not even looking down at you as she sentences you to death in her urine. You get one last look at her pretty face before she flicks the lever and heads over to the sink to wash her hands.<br/><br/>You feel the water being sucked beneath you and rushing in from the sides of the bowl and realize you're dead. You feel so pathetic.")
          SetTimeout (3) {
            msg ("<br/>You get sucked into the depths of the toilet, smashing your brains out against the stained porcelain and killing you instantly, before being dragged further into the pipes with Chloe's piss.<br/><br/>Up above, your former coworker finishes washing her hands, having a little giggle about the bug she flicked into the toilet bowl, completely unaware it was her shrunken coworker begging for help.<br/><br/>\"Served it right.\"<br/><br/>She'd notice your disappearance later on in her shift, unaware of her role in your murder. She was only pissed you increased her workload.")
            finish
          }
        }
      }
    ]]></script>
  </timer>
  <timer name="manager toilet entrance">
    <interval>15</interval>
    <script><![CDATA[
      msg ("<br/>You hear the faucet of the sink turn off, and the loud wails of the hand dryer. The sound stops, and the lock of the door clicks open. With all of that, Chloe's gone.")
      SetTimeout (10) {
        DisableTimer (manager toilet entrance)
        msg ("<br/>The door creaks as it swings open, and you hear footsteps. Footsteps you somehow recognize. You look up in horror as she approaches the toilet.<br/><br/>Nicole looks back down at you, the bitchy manager not even noticing your millimeter tall body in the water of the toilet, her toilet now. She turns around, displaying her ass before dropping her pants, her planet-sized fat glutes coming into view. Her thong came next, her fingers grabbing the sweat-drenched piece of fabric and pulling it out of her abyssal ass crack.<br/><br/>Your manager's ass begins to get wider, her chubby cheeks spreading as she gets ready to sit on the toilet her shrunken employee is trapped in.")
        wait {
          ClearScreen
          MoveObject (player, manager toilet2)
        }
      }
    ]]></script>
  </timer>
  <timer name="manager shit">
    <interval>30</interval>
    <script><![CDATA[
      msg ("<br/>You hear a hissing noise as the silence in the bowl is interrupted. You hear a light groan coming from Nicole as you begin to smell the hurricane that just entered the toilet. You gag as the taste of pure shit lands in your nostrils and mouth, and you can almost feel the little particles of waste landing all over you. The repulsive cloud doesn't seem to dissipate, leaving you pathetically choking on your manager's hot fart.<br/><br/>You imagine she's not going to stop there.")
      SetTimeout (5) {
        msg ("<br/>The asshole above you begins to stretch again, and you see the tip of something big emerging from the center of the beast. Nicole's colon continues to ease the log out, the size growing larger and larger, slowly smearing the outside of her sweaty asshole. You can smell it from down here, and it's way worse than her fart.<br/><br/>What did she eat?")
        SetTimeout (5) {
          MakeObjectVisible (shit)
          msg ("<br/>You'd soon find out, your manager's anus pinching the log off and dropping it into the bowl to join you. The splash sends you flying, the weight of the cruise ship-sized hunk of waste causing giant waves in the toilet bowl. Slowly you get your bearings back, swimming back over to the epicenter of the bowl, where a reeking, disgusting log of the bitch's shit is waiting for you.<br/><br/>The piece of {object:shit} is unimaginably big.")
          SetTimeout (5) {
            msg ("<br/>Your nightmare doesn't seem to end as another digested meal seems to make its way out Nicole's asshole, this one noticeably softer and less digested. Fuck, you don't even want to think about it. The sheer strength of her anal muscles slice it at the base, sending it falling into the bowl.<br/><br/>It drops down on you and the other piece of shit like a godlike punishment.")
            SetTimeout (5) {
              MakeObjectVisible (toilet paper1)
              msg ("<br/>Nicole begins to lean forward, and the bitch's chubby fingers containing a wad of toilet paper come down to wipe her ass. Dragging it through her crack, you watch her attempt to get it completely clean, but you know there are some points that the pig just can't get completely clean. That doesn't matter to her though, as she lifts her ass off the seat and drops the filthy paper in with you.<br/><br/>The {object:toilet paper1} floats down towards you, before landing in the toilet, displaying the filth your boss wiped off her dirtiest hole.")
              SetTimeout (3) {
                msg ("<br/>You just sit and watch as she pulls the sweaty thong back up into her mostly wiped crack. She struggles to pull the uniform's black pants up over her fat ass, but she manages. With that, Nicole reaches for the lever and sends you down the drain, you're no better than her shit. Your death is quick as one of the gigantic logs of waste crushes you against the bottom of the toilet as it's dragged down.<br/><br/>Satisfied with the dump she just took, Nicole finishes washing her hands and makes her way out into the kitchen. Noticing the trainee that you had abandoned, she's furious.<br/><br/>\"That piece of shit.\"<br/><br/>She didn't know how right she was. She wouldn't get the chance to fire you, but she'd be satisfied to know how you died, your microscopic body rotting away in the septic tank with her dump.")
                finish
              }
            }
          }
        }
      }
    ]]></script>
  </timer>
</asl>